{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Parquet\n",
    "\n",
    "Here's a quick illustrated guide to using Parquet files in pandas. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make a toy dataset\n",
    "\n",
    "import pandas as pd\n",
    "import numpy.random as npr\n",
    "import random\n",
    "import string\n",
    "\n",
    "size = 100000\n",
    "\n",
    "df = pd.DataFrame({'a': npr.randint(0, 10000, size=size), \n",
    "                   'b': [''.join(random.choices(string.ascii_uppercase, k=10))\n",
    "                         for i in range(size)]} )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2242</td>\n",
       "      <td>FSMZFYOGWX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3780</td>\n",
       "      <td>USHEQWJIPT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9657</td>\n",
       "      <td>MHNYKXBOLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5155</td>\n",
       "      <td>HSEVQEUYUG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4885</td>\n",
       "      <td>SMVHFZPNFC</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      a           b\n",
       "0  2242  FSMZFYOGWX\n",
       "1  3780  USHEQWJIPT\n",
       "2  9657  MHNYKXBOLB\n",
       "3  5155  HSEVQEUYUG\n",
       "4  4885  SMVHFZPNFC"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a       int64\n",
       "b    category\n",
       "dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can store \"b\" as a categorical (analogous to Factors in R). \n",
    "# This is helpful, for reasons we'll discuss on Tuesday,\n",
    "# but categoricals are only preserved by fastparquet. \n",
    "df['b'] = pd.Categorical(df['b'])\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save\n",
    "df.to_parquet('/users/nick/desktop/test.parquet', engine='fastparquet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2242</td>\n",
       "      <td>FSMZFYOGWX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3780</td>\n",
       "      <td>USHEQWJIPT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9657</td>\n",
       "      <td>MHNYKXBOLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5155</td>\n",
       "      <td>HSEVQEUYUG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4885</td>\n",
       "      <td>SMVHFZPNFC</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      a           b\n",
       "0  2242  FSMZFYOGWX\n",
       "1  3780  USHEQWJIPT\n",
       "2  9657  MHNYKXBOLB\n",
       "3  5155  HSEVQEUYUG\n",
       "4  4885  SMVHFZPNFC"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reload\n",
    "df2 = pd.read_parquet('/users/nick/desktop/test.parquet', engine='fastparquet')\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a       int64\n",
       "b    category\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Note that column b is still a categorical. \n",
    "df2.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also easily load subsets of columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FSMZFYOGWX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>USHEQWJIPT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MHNYKXBOLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>HSEVQEUYUG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SMVHFZPNFC</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            b\n",
       "0  FSMZFYOGWX\n",
       "1  USHEQWJIPT\n",
       "2  MHNYKXBOLB\n",
       "3  HSEVQEUYUG\n",
       "4  SMVHFZPNFC"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = pd.read_parquet('/users/nick/desktop/test.parquet', \n",
    "                      engine='fastparquet',\n",
    "                      columns=['b'])\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chunking with parquet\n",
    "\n",
    "Parquet allows chunking, but not quite as easily as you can chunk a csv. \n",
    "\n",
    "First, you have to save your file into chunks of a size you want. Parquet always saves rows as chunks, but by default each chunk has 50,000,000 rows, which (if you're chunking) may be too many:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save into 50,000 row chunks, \n",
    "# so we should get file saved into two chunks. \n",
    "\n",
    "df.to_parquet('/users/nick/desktop/test.parquet', \n",
    "              engine='fastparquet', \n",
    "              row_group_offsets=50000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          a           b\n",
      "0      2242  FSMZFYOGWX\n",
      "1      3780  USHEQWJIPT\n",
      "2      9657  MHNYKXBOLB\n",
      "3      5155  HSEVQEUYUG\n",
      "4      4885  SMVHFZPNFC\n",
      "...     ...         ...\n",
      "49995  5880  DDCZRSOYYX\n",
      "49996  4792  HNTHLENGQH\n",
      "49997   618  OXMWXAILJU\n",
      "49998   920  HSZUTZYTTL\n",
      "49999  7686  BTLUKYOPSG\n",
      "\n",
      "[50000 rows x 2 columns]\n",
      "          a           b\n",
      "0      6669  EAVHNWCJJT\n",
      "1      9183  AHWBRUTJOP\n",
      "2      9871  AFNMSRRQSL\n",
      "3      1759  BVFVHYXNRE\n",
      "4      9755  BDKCYTCGSN\n",
      "...     ...         ...\n",
      "49995   520  VAYOVPABGV\n",
      "49996  7175  TVFRIQKTPF\n",
      "49997  9917  LYXJVUZYFC\n",
      "49998  4495  CLRZXCSYJF\n",
      "49999   313  VBNJOOIICA\n",
      "\n",
      "[50000 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "# Then we have to read it in using the `fastparquet` \n",
    "# library itself (there's no way to do this directly from \n",
    "# pandas I'm afraid):\n",
    "\n",
    "from fastparquet import ParquetFile\n",
    "pf = ParquetFile('/users/nick/desktop/test.parquet')\n",
    "\n",
    "# Iterates over row groups\n",
    "for rg in pf.iter_row_groups():\n",
    "    print(rg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10088</th>\n",
       "      <td>5746</td>\n",
       "      <td>HAZNSYFSSY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22508</th>\n",
       "      <td>2294</td>\n",
       "      <td>YDDHYHYLUW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45752</th>\n",
       "      <td>7374</td>\n",
       "      <td>QXKXUUSQIW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35231</th>\n",
       "      <td>9102</td>\n",
       "      <td>CONWRQMHFV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45856</th>\n",
       "      <td>836</td>\n",
       "      <td>WSRBKDLGOO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23624</th>\n",
       "      <td>7868</td>\n",
       "      <td>NJUOMMFJMQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27220</th>\n",
       "      <td>8204</td>\n",
       "      <td>MTBOVIWOTB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30374</th>\n",
       "      <td>8950</td>\n",
       "      <td>UNEHOMUWEX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25098</th>\n",
       "      <td>7224</td>\n",
       "      <td>TCZVDZCNFO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17053</th>\n",
       "      <td>3480</td>\n",
       "      <td>SNCRFQVACY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          a           b\n",
       "10088  5746  HAZNSYFSSY\n",
       "22508  2294  YDDHYHYLUW\n",
       "45752  7374  QXKXUUSQIW\n",
       "35231  9102  CONWRQMHFV\n",
       "45856   836  WSRBKDLGOO\n",
       "23624  7868  NJUOMMFJMQ\n",
       "27220  8204  MTBOVIWOTB\n",
       "30374  8950  UNEHOMUWEX\n",
       "25098  7224  TCZVDZCNFO\n",
       "17053  3480  SNCRFQVACY"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# So you can filter and work with each group if you want:\n",
    "all_rows_w_even_a = []\n",
    "for rg in pf.iter_row_groups():\n",
    "    rg = rg.loc[(rg['a'] % 2) == 0]\n",
    "    all_rows_w_even_a.append(rg)\n",
    "\n",
    "even_rows = pd.concat(all_rows_w_even_a)\n",
    "even_rows.sample(10)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
