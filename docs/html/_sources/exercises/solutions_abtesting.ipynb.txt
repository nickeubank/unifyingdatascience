{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A/B Testing the Udacity Website\n",
    "\n",
    "In these exercises, we'll be analyzing data on user behavior from an experiment run by Udacity, the online education company. More specifically, we'll be looking at a test Udacity ran to improve the onboarding process on their site.\n",
    "\n",
    "Udacity's test is an example of an \"A/B\" test, in which some portion of users visiting a website (or using an app) are randomly selected to see a new version of the site. An analyst can then compare the behavior of users who see a new website design to users seeing their normal website to estimate the effect of rolling out the proposed changes to all users. While this kind of experiment has it's own name in industry (A/B testing), to be clear it's just a randomized experiment, and so everything we've learned about potential outcomes and randomized experiments apply here. \n",
    "\n",
    "(Udacity has generously provides the data from this test under an Apache open-source license, and you can find their [original writeup here](https://www.kaggle.com/tammyrotem/ab-tests-with-python/notebook). If you're interested in learning more on A/B testing in particular, it seems only fair while we use their data to flag they have a full course on the subject [here](https://www.udacity.com/course/ab-testing--ud257).)\n",
    "\n",
    "## Udacity's Test\n",
    "\n",
    "The test [is described by Udacity as follows](https://www.kaggle.com/tammyrotem/ab-tests-with-python/notebook): \n",
    "\n",
    "At the time of this experiment, Udacity courses currently have two options on the course overview page: \"start free trial\", and \"access course materials\".\n",
    "\n",
    "**Current Conditions Before Change**\n",
    "\n",
    "- If the student clicks \"start free trial\", they will be asked to enter their credit card information, and then they will be enrolled in a free trial for the paid version of the course. After 14 days, they will automatically be charged unless they cancel first.\n",
    "- If the student clicks \"access course materials\", they will be able to view the videos and take the quizzes for free, but they will not receive coaching support or a verified certificate, and they will not submit their final project for feedback.\n",
    "\n",
    "**Description of Experimented Change**\n",
    "\n",
    "- In the experiment, Udacity tested a change where if the student clicked \"start free trial\", they were asked how much time they had available to devote to the course.\n",
    "- If the student indicated 5 or more hours per week, they would be taken through the checkout process as usual. If they indicated fewer than 5 hours per week, a message would appear indicating that Udacity courses usually require a greater time commitment for successful completion, and suggesting that the student might like to access the course materials for free.\n",
    "- At this point, the student would have the option to continue enrolling in the free trial, or access the course materials for free instead. This [screenshot](images/udacity_checkyoureready.png) shows what the experiment looks like.\n",
    "\n",
    "**Udacity's Hope is that...**:\n",
    "\n",
    "> this might set clearer expectations for students upfront, thus reducing the number of frustrated students who left the free trial because they didn't have enough time -- without significantly reducing the number of students to continue past the free trial and eventually complete the course. If this hypothesis held true, Udacity could improve the overall student experience and improve coaches' capacity to support students who are likely to complete the course.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 1\n",
    "\n",
    "Begin by importing Udacity's data on user behavior by going to http://www.github/nickeubank/MIDS_Data/ and using the `udacity_AB_testing`folder, or by clicking [here.](https://github.com/nickeubank/MIDS_Data/tree/master/udacity_AB_testing) Note that there are TWO datasets for this test -- one for the control data (users who saw the original design), and one for treatment data (users who saw the experimental design). Udacity decided to show their test site to 1/2 of visitors, so there are roughly the same number of users appearing in each dataset (though this is not a requirement of AB tests)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "control = pd.read_csv('https://media.githubusercontent.com/media/nickeubank/MIDS_Data/master/udacity_AB_testing/control_data.csv')\n",
    "treat = pd.read_csv('https://media.githubusercontent.com/media/nickeubank/MIDS_Data/master/udacity_AB_testing/experiment_data.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 2\n",
    "\n",
    "Explore the data. Can you identifying the unit of observation of the data (e.g. what is represented by each row)? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Each row is a single day of behavior for each treatment arm. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pick your measures"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3\n",
    "\n",
    "The easiest way to analyze this data is to stack it into a single dataset where each observation is a day-treatment-arm (so you should end up with two rows per day, one for those who are in the treated groups, and one for those who were in the control group). Note that currently nothing in the data identifies whether a given observation is a treatment group observation or a control group observation, so you'll want to make sure to add a \"treatment\" indicator variable.\n",
    "\n",
    "The variables in the data are:\n",
    "\n",
    "- Pageviews: number of unique users visiting homepage\n",
    "- Clicks: number of those users clicking \"Start Free Trial\"\n",
    "- Enrollments: Number of people enrolling in trial\n",
    "- Payments: Number of people who eventually pay for the service"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Pageviews</th>\n",
       "      <th>Clicks</th>\n",
       "      <th>Enrollments</th>\n",
       "      <th>Payments</th>\n",
       "      <th>treatment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sat, Oct 11</td>\n",
       "      <td>7723</td>\n",
       "      <td>687</td>\n",
       "      <td>134.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sun, Oct 12</td>\n",
       "      <td>9102</td>\n",
       "      <td>779</td>\n",
       "      <td>147.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mon, Oct 13</td>\n",
       "      <td>10511</td>\n",
       "      <td>909</td>\n",
       "      <td>167.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tue, Oct 14</td>\n",
       "      <td>9871</td>\n",
       "      <td>836</td>\n",
       "      <td>156.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Wed, Oct 15</td>\n",
       "      <td>10014</td>\n",
       "      <td>837</td>\n",
       "      <td>163.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date  Pageviews  Clicks  Enrollments  Payments  treatment\n",
       "0  Sat, Oct 11       7723     687        134.0      70.0          0\n",
       "1  Sun, Oct 12       9102     779        147.0      70.0          0\n",
       "2  Mon, Oct 13      10511     909        167.0      95.0          0\n",
       "3  Tue, Oct 14       9871     836        156.0     105.0          0\n",
       "4  Wed, Oct 15      10014     837        163.0      64.0          0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "control['treatment'] = 0\n",
    "treat['treatment'] = 1\n",
    "users = pd.concat([control, treat])\n",
    "users.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make sure it worked well!\n",
    "assert len(users) == len(control) + len(treat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 4\n",
    "\n",
    "Given the outcomes of interest to Udacity, what outcomes do you want to measure? (In the language of the Potential Outcomes Framework, what are your $Y$ variables?). Add these to your data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Udacity wants a decline in the number of users who enroll \n",
    "# in the number of people who enroll in a trial but don't \n",
    "# end up continuing (paying) at the end of the trial. \n",
    "# So first we want the number of enrollments that end in \n",
    "# non-payment per person who sees trial page. \n",
    "\n",
    "users['enroll_but_nopayment_per_click'] = (users['Enrollments'] - users['Payments']) / users['Clicks']\n",
    "\n",
    "# Second, they don't actually want to see a decline in enrollees, so we also want to measure \n",
    "# the conversion rate from clicks to payments. Ideally, this won't change. \n",
    "\n",
    "users['payments_per_click'] = users['Payments'] / users['Clicks']\n",
    "\n",
    "# However, one could ALSO measure share of clicks that become enrollments. This \n",
    "# is actually the metric Udacity used, though honestly I think it's the wrong metric --\n",
    "# the goal isn't to reduce enrollments, it's to reduce enrollments that don't end in \n",
    "# payment!\n",
    "\n",
    "# But I'll include for completeness. \n",
    "\n",
    "users['enrollments_per_click'] = users['Enrollments'] / users['Clicks']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Validating The Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 5\n",
    "\n",
    "Whenever you are working with experimental data, the first thing you want to do is verify that users actually were randomly sorted into the two arms of the experiment. In this data, half of users were supposed to be shown the old version of the site and half were supposed to see the new version. \n",
    "\n",
    "`Pageviews` tells you how many unique users visited the welcome site we are experimenting on. `Pageviews` is what is sometimes called an \"invariant\" variable, meaning that it shouldn't vary across treatment arms -- after all, people have to visit the site before they get a chance to see the treatment, so there's no way that being assigned to treatment or control should affect the number of pageviews assigned to each group. \n",
    "\n",
    "\"Invariant\" variables are also an example of what are known as a \"pre-treatment\" variable, because pageviews are determined before users are manipulated in any way. That makes it analogous to gender or age in experiments where you have demographic data -- a person's age and gender are determined before they experience any manipulations, so the value of any pre-treatment attributes should be the same across the two arms of our experiment. This is what is called \"checking for balance.\" If pre-treatment attributes aren't balanced, then we know our attempt to randomly assign people to different groups failed.\n",
    "\n",
    "To test the quality of the randomization, calculate the average number of pageviews for the treated group and for the control group. Do they look similar? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9315.135135135135"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.loc[users['treatment'] == 1, 'Pageviews'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9339.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.loc[users['treatment'] == 0, 'Pageviews'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 6\n",
    "\n",
    "\"Similar\" is a tricky concept -- obviously, we expect *some* differences across groups since users were *randomly* divided across treatment arms. The question is whether the differences between groups are larger than we'd expect to emerge given our random assignment process. To evaluate this, let's use a `ttest` to test the statistical significance of the differences we see. \n",
    "\n",
    "If you're using R, you can just use the `t.test` function. \n",
    "\n",
    "If you're using Python, you can use the `ttest` function from scipy, which you can import as `from scipy.stats import ttest_ind`. \n",
    "\n",
    "**Note**: Remember that scipy functions don't accept `pandas` objects, so you have to pass the numpy vectors underlying your data with the `.values` operator (e.g. `df.my_column.values`). \n",
    "\n",
    "Does the difference in `pageviews` look statistically significant?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-0.1417118298287496, pvalue=0.8877034068650902)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats import ttest_ind\n",
    "ttest_ind(users.loc[users['treatment'] == 1, 'Pageviews'].values, \n",
    "          users.loc[users['treatment'] == 0, 'Pageviews'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# p-value of 0.8877 -- nope! Not statistically different at all. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 7\n",
    "\n",
    "`Pageviews` is not the only pre-treatment variable in this data. What other measure is pre-treatment? Review the description of the experiment if you're not sure. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clicks. The experiment only changes what happens AFTER people click on \"free trial\", so clicks are \"pre-treatment\","
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 8\n",
    "\n",
    "Check if the other pre-treatment variable is also balanced.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-0.09270642968639531, pvalue=0.9263942642482703)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ttest_ind(users.loc[users['treatment'] == 1, 'Clicks'].values, \n",
    "          users.loc[users['treatment'] == 0, 'Clicks'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Yup, good balance! Difference has a p-value of only 0.93!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimating the Effect of Experiment\n",
    "\n",
    "### Exercise 9\n",
    "\n",
    "Now that we've established we have good balance (meaning we think randomization was likely successful), we can evaluate the effects of the experiment. Test whether the two metrics you picked have different average values in the control group and treatment group. Because we've randomized, this is a consistent estimate of the Average Treatment Effect of Udacity's website change. \n",
    "\n",
    "Did Udacity achieve their goal?\n",
    "\n",
    "**Note:** You may discover some issues with your data. Can you figure out what's going on, and adjust?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Because trials last 2 weeks, you don't get enrollment stats from the last two weeks of data. \n",
    "# So we drop them. \n",
    "users = users[pd.notnull(users.Enrollments)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "change from orig to experiment in enroll_but_nopayment_per_click is -1.589 percentage points\n",
      "a change of -15.56%\n",
      "p-value of difference is 0.132\n",
      "\n",
      "\n",
      "change from orig to experiment in payments_per_click is -0.490 percentage points\n",
      "a change of -4.14%\n",
      "p-value of difference is 0.593\n",
      "\n",
      "\n",
      "change from orig to experiment in enrollments_per_click is -2.078 percentage points\n",
      "a change of -9.43%\n",
      "p-value of difference is 0.131\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for i in 'enroll_but_nopayment_per_click', 'payments_per_click', 'enrollments_per_click':\n",
    "    wo_change = users.loc[users['treatment'] == 0, i].mean()\n",
    "    w_change = users.loc[users['treatment'] == 1, i].mean()\n",
    "    pvalue = ttest_ind(users.loc[users['treatment'] == 1, i].values, \n",
    "                       users.loc[users['treatment'] == 0, i].values).pvalue\n",
    "    \n",
    "    print(f'change from orig to experiment in {i} is {(w_change - wo_change)*100:.3f} percentage points')\n",
    "    print(f'a change of {((w_change - wo_change) / wo_change)*100:.2f}%')\n",
    "    print(f'p-value of difference is {pvalue:.3f}')\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# So we do see a decrease in share of people who click trial, \n",
    "# enroll but then don't pay, and it's borderline significant \n",
    "# (has p-value < 0.1 if we had used a 1-tailed tests).\n",
    "# But we don't see decline in share of people who click \n",
    "# who end up enrolling after trial, \n",
    "# so the change was basically successful in only filtering out \n",
    "# people who weren't really interested. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 10\n",
    "\n",
    "One of the magic things about experiments is that all you have to do is compare averages to get an average treatment effect. However, you *can* do other things to try and increase the statistical power of your experiments, like add controls in a linear regression model. \n",
    "\n",
    "As you likely know, a bivariate regression is exactly equivalent to a t-test, so let's start by re-estimating the effect of treatment on payments-per-click using a linear regression. Can you replicate the results from your t-test? They shouldn't just be close -- they should be numerically equivalent (i.e. exactly the same to the limits of floating point number precision). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>payments_per_click</td> <th>  R-squared:         </th> <td>   0.007</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                    <td>OLS</td>        <th>  Adj. R-squared:    </th> <td>  -0.016</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>              <td>Least Squares</td>   <th>  F-statistic:       </th> <td>  0.2903</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>              <td>Sun, 02 Feb 2020</td>  <th>  Prob (F-statistic):</th>  <td> 0.593</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                  <td>12:38:50</td>      <th>  Log-Likelihood:    </th> <td>  95.810</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>       <td>    46</td>       <th>  AIC:               </th> <td>  -187.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>           <td>    44</td>       <th>  BIC:               </th> <td>  -184.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>               <td>     1</td>       <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>       <td>nonrobust</td>     <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>    0.1183</td> <td>    0.006</td> <td>   18.403</td> <td> 0.000</td> <td>    0.105</td> <td>    0.131</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>treatment</th> <td>   -0.0049</td> <td>    0.009</td> <td>   -0.539</td> <td> 0.593</td> <td>   -0.023</td> <td>    0.013</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 0.968</td> <th>  Durbin-Watson:     </th> <td>   1.092</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.616</td> <th>  Jarque-Bera (JB):  </th> <td>   0.985</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.316</td> <th>  Prob(JB):          </th> <td>   0.611</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.662</td> <th>  Cond. No.          </th> <td>    2.62</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:     payments_per_click   R-squared:                       0.007\n",
       "Model:                            OLS   Adj. R-squared:                 -0.016\n",
       "Method:                 Least Squares   F-statistic:                    0.2903\n",
       "Date:                Sun, 02 Feb 2020   Prob (F-statistic):              0.593\n",
       "Time:                        12:38:50   Log-Likelihood:                 95.810\n",
       "No. Observations:                  46   AIC:                            -187.6\n",
       "Df Residuals:                      44   BIC:                            -184.0\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept      0.1183      0.006     18.403      0.000       0.105       0.131\n",
       "treatment     -0.0049      0.009     -0.539      0.593      -0.023       0.013\n",
       "==============================================================================\n",
       "Omnibus:                        0.968   Durbin-Watson:                   1.092\n",
       "Prob(Omnibus):                  0.616   Jarque-Bera (JB):                0.985\n",
       "Skew:                           0.316   Prob(JB):                        0.611\n",
       "Kurtosis:                       2.662   Cond. No.                         2.62\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "smf.ols('payments_per_click ~ treatment', users).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 11\n",
    "\n",
    "Now add indicator variables for the day of each observation. Do the standard errors on your `treatment` variable change? If so, in what direction?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>payments_per_click</td> <th>  R-squared:         </th> <td>   0.743</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                    <td>OLS</td>        <th>  Adj. R-squared:    </th> <td>   0.475</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>              <td>Least Squares</td>   <th>  F-statistic:       </th> <td>   2.770</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>              <td>Sun, 02 Feb 2020</td>  <th>  Prob (F-statistic):</th>  <td>0.00991</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                  <td>12:38:50</td>      <th>  Log-Likelihood:    </th> <td>  126.94</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>       <td>    46</td>       <th>  AIC:               </th> <td>  -205.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>           <td>    22</td>       <th>  BIC:               </th> <td>  -162.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>               <td>    23</td>       <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>       <td>nonrobust</td>     <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>              <td>    0.0815</td> <td>    0.016</td> <td>    5.090</td> <td> 0.000</td> <td>    0.048</td> <td>    0.115</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Fri, Oct 24]</th> <td>    0.0791</td> <td>    0.022</td> <td>    3.569</td> <td> 0.002</td> <td>    0.033</td> <td>    0.125</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Fri, Oct 31]</th> <td>    0.0777</td> <td>    0.022</td> <td>    3.507</td> <td> 0.002</td> <td>    0.032</td> <td>    0.124</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Mon, Oct 13]</th> <td>    0.0179</td> <td>    0.022</td> <td>    0.809</td> <td> 0.427</td> <td>   -0.028</td> <td>    0.064</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Mon, Oct 20]</th> <td>    0.0343</td> <td>    0.022</td> <td>    1.548</td> <td> 0.136</td> <td>   -0.012</td> <td>    0.080</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Mon, Oct 27]</th> <td>    0.0799</td> <td>    0.022</td> <td>    3.604</td> <td> 0.002</td> <td>    0.034</td> <td>    0.126</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sat, Nov 1]</th>  <td>    0.0612</td> <td>    0.022</td> <td>    2.763</td> <td> 0.011</td> <td>    0.015</td> <td>    0.107</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sat, Oct 11]</th> <td>   -0.0033</td> <td>    0.022</td> <td>   -0.148</td> <td> 0.884</td> <td>   -0.049</td> <td>    0.043</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sat, Oct 18]</th> <td>    0.0239</td> <td>    0.022</td> <td>    1.080</td> <td> 0.292</td> <td>   -0.022</td> <td>    0.070</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sat, Oct 25]</th> <td>    0.0742</td> <td>    0.022</td> <td>    3.347</td> <td> 0.003</td> <td>    0.028</td> <td>    0.120</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sun, Nov 2]</th>  <td>    0.0405</td> <td>    0.022</td> <td>    1.826</td> <td> 0.081</td> <td>   -0.005</td> <td>    0.086</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sun, Oct 12]</th> <td>    0.0239</td> <td>    0.022</td> <td>    1.078</td> <td> 0.293</td> <td>   -0.022</td> <td>    0.070</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sun, Oct 19]</th> <td>    0.0196</td> <td>    0.022</td> <td>    0.887</td> <td> 0.385</td> <td>   -0.026</td> <td>    0.066</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sun, Oct 26]</th> <td>    0.0673</td> <td>    0.022</td> <td>    3.038</td> <td> 0.006</td> <td>    0.021</td> <td>    0.113</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Thu, Oct 16]</th> <td>    0.0095</td> <td>    0.022</td> <td>    0.430</td> <td> 0.672</td> <td>   -0.036</td> <td>    0.055</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Thu, Oct 23]</th> <td>    0.0161</td> <td>    0.022</td> <td>    0.725</td> <td> 0.476</td> <td>   -0.030</td> <td>    0.062</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Thu, Oct 30]</th> <td>    0.0181</td> <td>    0.022</td> <td>    0.817</td> <td> 0.423</td> <td>   -0.028</td> <td>    0.064</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Tue, Oct 14]</th> <td>    0.0394</td> <td>    0.022</td> <td>    1.779</td> <td> 0.089</td> <td>   -0.007</td> <td>    0.085</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Tue, Oct 21]</th> <td>    0.0226</td> <td>    0.022</td> <td>    1.022</td> <td> 0.318</td> <td>   -0.023</td> <td>    0.069</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Tue, Oct 28]</th> <td>    0.0643</td> <td>    0.022</td> <td>    2.904</td> <td> 0.008</td> <td>    0.018</td> <td>    0.110</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Wed, Oct 15]</th> <td>    0.0157</td> <td>    0.022</td> <td>    0.709</td> <td> 0.486</td> <td>   -0.030</td> <td>    0.062</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Wed, Oct 22]</th> <td>    0.0196</td> <td>    0.022</td> <td>    0.884</td> <td> 0.386</td> <td>   -0.026</td> <td>    0.066</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Wed, Oct 29]</th> <td>    0.0452</td> <td>    0.022</td> <td>    2.040</td> <td> 0.054</td> <td>   -0.001</td> <td>    0.091</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>treatment</th>              <td>   -0.0049</td> <td>    0.007</td> <td>   -0.750</td> <td> 0.461</td> <td>   -0.018</td> <td>    0.009</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 4.114</td> <th>  Durbin-Watson:     </th> <td>   1.713</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.128</td> <th>  Jarque-Bera (JB):  </th> <td>   1.796</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.000</td> <th>  Prob(JB):          </th> <td>   0.407</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.032</td> <th>  Cond. No.          </th> <td>    27.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:     payments_per_click   R-squared:                       0.743\n",
       "Model:                            OLS   Adj. R-squared:                  0.475\n",
       "Method:                 Least Squares   F-statistic:                     2.770\n",
       "Date:                Sun, 02 Feb 2020   Prob (F-statistic):            0.00991\n",
       "Time:                        12:38:50   Log-Likelihood:                 126.94\n",
       "No. Observations:                  46   AIC:                            -205.9\n",
       "Df Residuals:                      22   BIC:                            -162.0\n",
       "Df Model:                          23                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==========================================================================================\n",
       "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------\n",
       "Intercept                  0.0815      0.016      5.090      0.000       0.048       0.115\n",
       "C(Date)[T.Fri, Oct 24]     0.0791      0.022      3.569      0.002       0.033       0.125\n",
       "C(Date)[T.Fri, Oct 31]     0.0777      0.022      3.507      0.002       0.032       0.124\n",
       "C(Date)[T.Mon, Oct 13]     0.0179      0.022      0.809      0.427      -0.028       0.064\n",
       "C(Date)[T.Mon, Oct 20]     0.0343      0.022      1.548      0.136      -0.012       0.080\n",
       "C(Date)[T.Mon, Oct 27]     0.0799      0.022      3.604      0.002       0.034       0.126\n",
       "C(Date)[T.Sat, Nov 1]      0.0612      0.022      2.763      0.011       0.015       0.107\n",
       "C(Date)[T.Sat, Oct 11]    -0.0033      0.022     -0.148      0.884      -0.049       0.043\n",
       "C(Date)[T.Sat, Oct 18]     0.0239      0.022      1.080      0.292      -0.022       0.070\n",
       "C(Date)[T.Sat, Oct 25]     0.0742      0.022      3.347      0.003       0.028       0.120\n",
       "C(Date)[T.Sun, Nov 2]      0.0405      0.022      1.826      0.081      -0.005       0.086\n",
       "C(Date)[T.Sun, Oct 12]     0.0239      0.022      1.078      0.293      -0.022       0.070\n",
       "C(Date)[T.Sun, Oct 19]     0.0196      0.022      0.887      0.385      -0.026       0.066\n",
       "C(Date)[T.Sun, Oct 26]     0.0673      0.022      3.038      0.006       0.021       0.113\n",
       "C(Date)[T.Thu, Oct 16]     0.0095      0.022      0.430      0.672      -0.036       0.055\n",
       "C(Date)[T.Thu, Oct 23]     0.0161      0.022      0.725      0.476      -0.030       0.062\n",
       "C(Date)[T.Thu, Oct 30]     0.0181      0.022      0.817      0.423      -0.028       0.064\n",
       "C(Date)[T.Tue, Oct 14]     0.0394      0.022      1.779      0.089      -0.007       0.085\n",
       "C(Date)[T.Tue, Oct 21]     0.0226      0.022      1.022      0.318      -0.023       0.069\n",
       "C(Date)[T.Tue, Oct 28]     0.0643      0.022      2.904      0.008       0.018       0.110\n",
       "C(Date)[T.Wed, Oct 15]     0.0157      0.022      0.709      0.486      -0.030       0.062\n",
       "C(Date)[T.Wed, Oct 22]     0.0196      0.022      0.884      0.386      -0.026       0.066\n",
       "C(Date)[T.Wed, Oct 29]     0.0452      0.022      2.040      0.054      -0.001       0.091\n",
       "treatment                 -0.0049      0.007     -0.750      0.461      -0.018       0.009\n",
       "==============================================================================\n",
       "Omnibus:                        4.114   Durbin-Watson:                   1.713\n",
       "Prob(Omnibus):                  0.128   Jarque-Bera (JB):                1.796\n",
       "Skew:                           0.000   Prob(JB):                        0.407\n",
       "Kurtosis:                       2.032   Cond. No.                         27.3\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "smf.ols('payments_per_click ~ treatment + C(Date)', users).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have found that your standard errors decreased by about 20\\% -- this is why, although just comparing means *works*, if you have additional variables you should add them as covariates in your analysis. Moreover, in other settings you may find this effect is even larger -- the date indicators we added to our data are perfectly balanced between treatment and control, so we aren't adding a lot of data to the model by adding them as variables. As we'll see in later exercises, adding variables like \"gender\" or \"age\" (which will never be perfectly balanced across treatment and control) will help even more. \n",
    "\n",
    "### Exercise 12\n",
    "\n",
    "Given your results, what would you tell Udacity about their trial?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# It seems like everything is going in the expected direction. However\n",
    "# before rolling out something that affects something as important \n",
    "# as on-boarding, I would run a longer trial to get a little greater \n",
    "# statistical significance..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 13\n",
    "\n",
    "As a last exercise, instead of adding indicators for each date, add indicators for *day of the week* (e.g. Monday, Tuesday, etc.). \n",
    "\n",
    "(This is just for data manipulation practice!)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "users['day_of_week'] = users.Date.str.split(',', expand=True)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>payments_per_click</td> <th>  R-squared:         </th> <td>   0.138</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                    <td>OLS</td>        <th>  Adj. R-squared:    </th> <td>  -0.021</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>              <td>Least Squares</td>   <th>  F-statistic:       </th> <td>  0.8687</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>              <td>Sun, 02 Feb 2020</td>  <th>  Prob (F-statistic):</th>  <td> 0.540</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                  <td>12:38:50</td>      <th>  Log-Likelihood:    </th> <td>  99.073</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>       <td>    46</td>       <th>  AIC:               </th> <td>  -182.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>           <td>    38</td>       <th>  BIC:               </th> <td>  -167.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>               <td>     7</td>       <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>       <td>nonrobust</td>     <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "            <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>             <td>    0.1337</td> <td>    0.013</td> <td>    9.971</td> <td> 0.000</td> <td>    0.107</td> <td>    0.161</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Mon]</th> <td>   -0.0082</td> <td>    0.018</td> <td>   -0.461</td> <td> 0.647</td> <td>   -0.044</td> <td>    0.028</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Sat]</th> <td>   -0.0133</td> <td>    0.017</td> <td>   -0.794</td> <td> 0.432</td> <td>   -0.047</td> <td>    0.021</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Sun]</th> <td>   -0.0144</td> <td>    0.017</td> <td>   -0.865</td> <td> 0.393</td> <td>   -0.048</td> <td>    0.019</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Thu]</th> <td>   -0.0377</td> <td>    0.018</td> <td>   -2.113</td> <td> 0.041</td> <td>   -0.074</td> <td>   -0.002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Tue]</th> <td>   -0.0101</td> <td>    0.018</td> <td>   -0.568</td> <td> 0.574</td> <td>   -0.046</td> <td>    0.026</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Wed]</th> <td>   -0.0254</td> <td>    0.018</td> <td>   -1.425</td> <td> 0.162</td> <td>   -0.062</td> <td>    0.011</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>treatment</th>             <td>   -0.0049</td> <td>    0.009</td> <td>   -0.538</td> <td> 0.594</td> <td>   -0.023</td> <td>    0.014</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 0.703</td> <th>  Durbin-Watson:     </th> <td>   0.986</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.704</td> <th>  Jarque-Bera (JB):  </th> <td>   0.237</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.155</td> <th>  Prob(JB):          </th> <td>   0.888</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.168</td> <th>  Cond. No.          </th> <td>    9.27</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:     payments_per_click   R-squared:                       0.138\n",
       "Model:                            OLS   Adj. R-squared:                 -0.021\n",
       "Method:                 Least Squares   F-statistic:                    0.8687\n",
       "Date:                Sun, 02 Feb 2020   Prob (F-statistic):              0.540\n",
       "Time:                        12:38:50   Log-Likelihood:                 99.073\n",
       "No. Observations:                  46   AIC:                            -182.1\n",
       "Df Residuals:                      38   BIC:                            -167.5\n",
       "Df Model:                           7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=========================================================================================\n",
       "                            coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-----------------------------------------------------------------------------------------\n",
       "Intercept                 0.1337      0.013      9.971      0.000       0.107       0.161\n",
       "C(day_of_week)[T.Mon]    -0.0082      0.018     -0.461      0.647      -0.044       0.028\n",
       "C(day_of_week)[T.Sat]    -0.0133      0.017     -0.794      0.432      -0.047       0.021\n",
       "C(day_of_week)[T.Sun]    -0.0144      0.017     -0.865      0.393      -0.048       0.019\n",
       "C(day_of_week)[T.Thu]    -0.0377      0.018     -2.113      0.041      -0.074      -0.002\n",
       "C(day_of_week)[T.Tue]    -0.0101      0.018     -0.568      0.574      -0.046       0.026\n",
       "C(day_of_week)[T.Wed]    -0.0254      0.018     -1.425      0.162      -0.062       0.011\n",
       "treatment                -0.0049      0.009     -0.538      0.594      -0.023       0.014\n",
       "==============================================================================\n",
       "Omnibus:                        0.703   Durbin-Watson:                   0.986\n",
       "Prob(Omnibus):                  0.704   Jarque-Bera (JB):                0.237\n",
       "Skew:                          -0.155   Prob(JB):                        0.888\n",
       "Kurtosis:                       3.168   Cond. No.                         9.27\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols('payments_per_click ~ treatment + C(day_of_week)', users).fit().summary()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
