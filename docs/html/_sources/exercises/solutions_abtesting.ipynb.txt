{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A/B Testing the Udacity Website\n",
    "\n",
    "In these exercises, we'll be analyzing data on user behavior during an A/B test of the onboarding process for Udacity (Udacity generously provides this data under an Apache open-source license [here](https://www.kaggle.com/tammyrotem/ab-tests-with-python/notebook). Also, if you're interested in learning more on A/B testing, it seems only fair while we use their data to flag they have a full course on the subject [here](https://www.udacity.com/course/ab-testing--ud257). \n",
    "\n",
    "The test [is described as follows](https://www.kaggle.com/tammyrotem/ab-tests-with-python/notebook): \n",
    "\n",
    "At the time of this experiment, Udacity courses currently have two options on the course overview page: \"start free trial\", and \"access course materials\".\n",
    "\n",
    "**Current Conditions Before Change**\n",
    "\n",
    "- If the student clicks \"start free trial\", they will be asked to enter their credit card information, and then they will be enrolled in a free trial for the paid version of the course. After 14 days, they will automatically be charged unless they cancel first.\n",
    "- If the student clicks \"access course materials\", they will be able to view the videos and take the quizzes for free, but they will not receive coaching support or a verified certificate, and they will not submit their final project for feedback.\n",
    "\n",
    "**Description of Experimented Change**\n",
    "\n",
    "- In the experiment, Udacity tested a change where if the student clicked \"start free trial\", they were asked how much time they had available to devote to the course.\n",
    "- If the student indicated 5 or more hours per week, they would be taken through the checkout process as usual. If they indicated fewer than 5 hours per week, a message would appear indicating that Udacity courses usually require a greater time commitment for successful completion, and suggesting that the student might like to access the course materials for free.\n",
    "- At this point, the student would have the option to continue enrolling in the free trial, or access the course materials for free instead. This [screenshot](images/udacity_checkyoureready.png) shows what the experiment looks like.\n",
    "\n",
    "**Udacity's Hope is that...**:\n",
    "\n",
    "> this might set clearer expectations for students upfront, thus reducing the number of frustrated students who left the free trial because they didn't have enough time -- without significantly reducing the number of students to continue past the free trial and eventually complete the course. If this hypothesis held true, Udacity could improve the overall student experience and improve coaches' capacity to support students who are likely to complete the course.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1\n",
    "\n",
    "Begin by importing Udacity's data on user behavior by going to http://www.github/nickeubank/MIDS_Data/ and using the `udacity_AB_testing`folder, or by clicking [here.](https://github.com/nickeubank/MIDS_Data/tree/master/udacity_AB_testing) Note that there are TWO datasets for this test -- one for the control data (users who saw the original design), and one for treatment data (users who saw the experimental design). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "control = pd.read_csv('https://media.githubusercontent.com/media/nickeubank/MIDS_Data/master/udacity_AB_testing/control_data.csv')\n",
    "treat = pd.read_csv('https://media.githubusercontent.com/media/nickeubank/MIDS_Data/master/udacity_AB_testing/experiment_data.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 2\n",
    "\n",
    "Explore the data. Can you identifying the unit of observation of the data (e.g. what is represented by each row)? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Each row is a single day of behavior for each treatment arm. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 3\n",
    "\n",
    "The easiest way to analyze this data is to stack it into a single dataset where each observation is a day-treatment-arm (so you should end up with two rows per day, one for those who are in the treated groups, and one for those who were in the control group). Note that currently nothing in the data identifies whether a given observation is a treatment group observation or a control group observation, so you'll want to make sure to add a \"treatment\" indicator variable.\n",
    "\n",
    "The variables in the data are:\n",
    "\n",
    "- Pageviews: number of unique users visiting homepage\n",
    "- Clicks: number of those users clicking \"Start Free Trial\"\n",
    "- Enrollments: Number of people enrolling in trial\n",
    "- Payments: Number of people who eventually pay for the service"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Pageviews</th>\n",
       "      <th>Clicks</th>\n",
       "      <th>Enrollments</th>\n",
       "      <th>Payments</th>\n",
       "      <th>treatment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sat, Oct 11</td>\n",
       "      <td>7723</td>\n",
       "      <td>687</td>\n",
       "      <td>134.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sun, Oct 12</td>\n",
       "      <td>9102</td>\n",
       "      <td>779</td>\n",
       "      <td>147.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mon, Oct 13</td>\n",
       "      <td>10511</td>\n",
       "      <td>909</td>\n",
       "      <td>167.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tue, Oct 14</td>\n",
       "      <td>9871</td>\n",
       "      <td>836</td>\n",
       "      <td>156.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Wed, Oct 15</td>\n",
       "      <td>10014</td>\n",
       "      <td>837</td>\n",
       "      <td>163.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date  Pageviews  Clicks  Enrollments  Payments  treatment\n",
       "0  Sat, Oct 11       7723     687        134.0      70.0          0\n",
       "1  Sun, Oct 12       9102     779        147.0      70.0          0\n",
       "2  Mon, Oct 13      10511     909        167.0      95.0          0\n",
       "3  Tue, Oct 14       9871     836        156.0     105.0          0\n",
       "4  Wed, Oct 15      10014     837        163.0      64.0          0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "control['treatment'] = 0\n",
    "treat['treatment'] = 1\n",
    "users = pd.concat([control, treat])\n",
    "users.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make sure it worked well!\n",
    "assert len(users) == len(control) + len(treat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 4\n",
    "\n",
    "Whenever you are working with experimental data, the first thing you want to do is verify that users actually were randomly sorted into the two arms of the experiment. In this data, half of users were supposed to be shown the old version of the site and half were supposed to see the new version. \n",
    "\n",
    "`Pageviews` tells you how many unique users visited the welcome site we are experimenting on. `Pageviews` is what is sometimes called an \"invariant\" variable, meaning that it shouldn't vary across treatment arms -- after all, people have to visit the site before they get a chance to see the treatment, so there's no way that being assigned to treatment or control should affect the number of pageviews assigned to each group. \n",
    "\n",
    "This is also what's known as a \"pre-treatment\" variable, because it was determined before users were manipulated in any way. That makes it analogous to gender or age in experiments where you have demographic data -- a person's age and gender are determined before they experience any manipulations, so the value of any invariant / pre-treatment attributes should be the same across the two arms of our experiment. This is what is called \"checking for balance.\" If pre-treatment attributes aren't balanced, then we know our attempt to randomly assign people to different groups failed.\n",
    "\n",
    "To test the quality of the randomization, calculate the average number of pageviews for the treated group and for the control group. Do they look similar? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9315.135135135135"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.loc[users['treatment'] == 1, 'Pageviews'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9339.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.loc[users['treatment'] == 0, 'Pageviews'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 5\n",
    "\n",
    "\"Similar\" is a tricky concept -- obviously, we expect *some* differences across groups. The question is whether the differences between groups are larger than we'd expect to emerge randomly. To evaluate this, let's use a `ttest`. \n",
    "\n",
    "If you're using R, just use `t.test`. \n",
    "\n",
    "If you're using Python, you can use the `ttest` function from scipy, which you can import as `from scipy.stats import ttest_ind`. \n",
    "\n",
    "**Note**: Remember that scipy functions don't accept `pandas` objects, so you have to pass the numpy vectors underlying your data with the `.values` operator (e.g. `df.my_column.values`). \n",
    "\n",
    "Does the difference in `pageviews` look statistically significant?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-0.1417118298287496, pvalue=0.8877034068650902)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats import ttest_ind\n",
    "ttest_ind(users.loc[users['treatment'] == 1, 'Pageviews'].values, users.loc[users['treatment'] == 0, 'Pageviews'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# p-value of 0.8877 -- nope! Not statistically different at all. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 6\n",
    "\n",
    "`Pageviews` is not the only pre-treatment variable in this data. What other measure is pre-treatment? Review the description of the experiment if you're not sure. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clicks. The experiment only changes what happens AFTER people click on \"free trial\", so clicks are \"pre-treatment\","
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 7\n",
    "\n",
    "Check if the other pre-treatment variable is also balanced.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-0.09270642968639531, pvalue=0.9263942642482703)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ttest_ind(users.loc[users['treatment'] == 1, 'Clicks'].values, users.loc[users['treatment'] == 0, 'Clicks'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Yup, good balance! Difference has a p-value of only 0.93!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 8\n",
    "\n",
    "Now that we've established we have good balance (meaning we think randomization was likely successful), we can evaluate the effects of the experiment. Decide on two metrics you want to use to evaluate the success of the trial, and test whether those values are different in the control group and treatment group. Because we've randomized, this is a consistent estimate of the Average Treatment Effect of Udacity's website change. \n",
    "\n",
    "What is the ATE on Enrollments, and what is the ATE on Payments? Did Udacity achieve their goal?\n",
    "\n",
    "**Note:** You may discover some issues with your data. Can you figure out what's going on, and adjust?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Because trials last 2 weeks, you don't get enrollment stats from the last two weeks of data. \n",
    "# So we drop them. \n",
    "users = users[pd.notnull(users.Enrollments)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-1.686512674290538, pvalue=0.09877614030153456)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ttest_ind(users.loc[users['treatment'] == 1, 'Enrollments'].values, users.loc[users['treatment'] == 0, 'Enrollments'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Enrollments fall -- unsurprising given you added a layer before enrollment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-0.5927658110177635, pvalue=0.556372383554715)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ttest_ind(users.loc[users['treatment'] == 1, 'Payments'].values, users.loc[users['treatment'] == 0, 'Payments'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# But payments don't change (or at least the change is very small and definitely not significant) \n",
    "# So fewer people enroll, but the same number end up enrolling, meaning\n",
    "# they are filtering out *just* people who weren't serious!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 9\n",
    "\n",
    "One of the magic things about experiments is that all you have to do is compare averages to get an average treatment effect. However, you *can* do other things to try and increase the statistical power of your experiments, like add controls in a linear regression model. \n",
    "\n",
    "As you likely know, a bivariate regression is exactly equivalent to a t-test, so let's start by re-estimating the effect of treatment on `Payments` using a linear regression. Can you replicate the results from your t-test?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>Payments</td>     <th>  R-squared:         </th> <td>   0.008</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>  -0.015</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>  0.3514</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Fri, 31 Jan 2020</td> <th>  Prob (F-statistic):</th>  <td> 0.556</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>12:51:35</td>     <th>  Log-Likelihood:    </th> <td> -206.20</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    46</td>      <th>  AIC:               </th> <td>   416.4</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    44</td>      <th>  BIC:               </th> <td>   420.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>   88.3913</td> <td>    4.564</td> <td>   19.367</td> <td> 0.000</td> <td>   79.193</td> <td>   97.590</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>treatment</th> <td>   -3.8261</td> <td>    6.455</td> <td>   -0.593</td> <td> 0.556</td> <td>  -16.835</td> <td>    9.182</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 0.399</td> <th>  Durbin-Watson:     </th> <td>   1.328</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.819</td> <th>  Jarque-Bera (JB):  </th> <td>   0.552</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.038</td> <th>  Prob(JB):          </th> <td>   0.759</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.469</td> <th>  Cond. No.          </th> <td>    2.62</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:               Payments   R-squared:                       0.008\n",
       "Model:                            OLS   Adj. R-squared:                 -0.015\n",
       "Method:                 Least Squares   F-statistic:                    0.3514\n",
       "Date:                Fri, 31 Jan 2020   Prob (F-statistic):              0.556\n",
       "Time:                        12:51:35   Log-Likelihood:                -206.20\n",
       "No. Observations:                  46   AIC:                             416.4\n",
       "Df Residuals:                      44   BIC:                             420.1\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept     88.3913      4.564     19.367      0.000      79.193      97.590\n",
       "treatment     -3.8261      6.455     -0.593      0.556     -16.835       9.182\n",
       "==============================================================================\n",
       "Omnibus:                        0.399   Durbin-Watson:                   1.328\n",
       "Prob(Omnibus):                  0.819   Jarque-Bera (JB):                0.552\n",
       "Skew:                          -0.038   Prob(JB):                        0.759\n",
       "Kurtosis:                       2.469   Cond. No.                         2.62\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "smf.ols('Payments ~ treatment', users).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 10\n",
    "\n",
    "Now add indicator variables for the day of each observation. Do the standard errors on your `treatment` variable change? If so, in what direction?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>Payments</td>     <th>  R-squared:         </th> <td>   0.713</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.413</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   2.378</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Fri, 31 Jan 2020</td> <th>  Prob (F-statistic):</th>  <td>0.0232</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>12:51:35</td>     <th>  Log-Likelihood:    </th> <td> -177.66</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    46</td>      <th>  AIC:               </th> <td>   403.3</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    22</td>      <th>  BIC:               </th> <td>   447.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    23</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>              <td>   61.9130</td> <td>   12.022</td> <td>    5.150</td> <td> 0.000</td> <td>   36.980</td> <td>   86.846</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Fri, Oct 24]</th> <td>   48.0000</td> <td>   16.644</td> <td>    2.884</td> <td> 0.009</td> <td>   13.482</td> <td>   82.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Fri, Oct 31]</th> <td>   52.0000</td> <td>   16.644</td> <td>    3.124</td> <td> 0.005</td> <td>   17.482</td> <td>   86.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Mon, Oct 13]</th> <td>   27.0000</td> <td>   16.644</td> <td>    1.622</td> <td> 0.119</td> <td>   -7.518</td> <td>   61.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Mon, Oct 20]</th> <td>   37.5000</td> <td>   16.644</td> <td>    2.253</td> <td> 0.035</td> <td>    2.982</td> <td>   72.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Mon, Oct 27]</th> <td>   61.5000</td> <td>   16.644</td> <td>    3.695</td> <td> 0.001</td> <td>   26.982</td> <td>   96.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sat, Nov 1]</th>  <td>   36.5000</td> <td>   16.644</td> <td>    2.193</td> <td> 0.039</td> <td>    1.982</td> <td>   71.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sat, Oct 11]</th> <td>   -8.0000</td> <td>   16.644</td> <td>   -0.481</td> <td> 0.636</td> <td>  -42.518</td> <td>   26.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sat, Oct 18]</th> <td>    6.0000</td> <td>   16.644</td> <td>    0.360</td> <td> 0.722</td> <td>  -28.518</td> <td>   40.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sat, Oct 25]</th> <td>   44.5000</td> <td>   16.644</td> <td>    2.674</td> <td> 0.014</td> <td>    9.982</td> <td>   79.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sun, Nov 2]</th>  <td>   25.0000</td> <td>   16.644</td> <td>    1.502</td> <td> 0.147</td> <td>   -9.518</td> <td>   59.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sun, Oct 12]</th> <td>   20.5000</td> <td>   16.644</td> <td>    1.232</td> <td> 0.231</td> <td>  -14.018</td> <td>   55.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sun, Oct 19]</th> <td>    8.5000</td> <td>   16.644</td> <td>    0.511</td> <td> 0.615</td> <td>  -26.018</td> <td>   43.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Sun, Oct 26]</th> <td>   42.5000</td> <td>   16.644</td> <td>    2.553</td> <td> 0.018</td> <td>    7.982</td> <td>   77.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Thu, Oct 16]</th> <td>   11.5000</td> <td>   16.644</td> <td>    0.691</td> <td> 0.497</td> <td>  -23.018</td> <td>   46.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Thu, Oct 23]</th> <td>    2.0000</td> <td>   16.644</td> <td>    0.120</td> <td> 0.905</td> <td>  -32.518</td> <td>   36.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Thu, Oct 30]</th> <td>   11.0000</td> <td>   16.644</td> <td>    0.661</td> <td> 0.516</td> <td>  -23.518</td> <td>   45.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Tue, Oct 14]</th> <td>   38.5000</td> <td>   16.644</td> <td>    2.313</td> <td> 0.030</td> <td>    3.982</td> <td>   73.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Tue, Oct 21]</th> <td>   28.0000</td> <td>   16.644</td> <td>    1.682</td> <td> 0.107</td> <td>   -6.518</td> <td>   62.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Tue, Oct 28]</th> <td>   45.5000</td> <td>   16.644</td> <td>    2.734</td> <td> 0.012</td> <td>   10.982</td> <td>   80.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Wed, Oct 15]</th> <td>   19.0000</td> <td>   16.644</td> <td>    1.142</td> <td> 0.266</td> <td>  -15.518</td> <td>   53.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Wed, Oct 22]</th> <td>   21.0000</td> <td>   16.644</td> <td>    1.262</td> <td> 0.220</td> <td>  -13.518</td> <td>   55.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(Date)[T.Wed, Oct 29]</th> <td>   31.0000</td> <td>   16.644</td> <td>    1.863</td> <td> 0.076</td> <td>   -3.518</td> <td>   65.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>treatment</th>              <td>   -3.8261</td> <td>    4.908</td> <td>   -0.780</td> <td> 0.444</td> <td>  -14.005</td> <td>    6.353</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 5.442</td> <th>  Durbin-Watson:     </th> <td>   1.716</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.066</td> <th>  Jarque-Bera (JB):  </th> <td>   2.059</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.000</td> <th>  Prob(JB):          </th> <td>   0.357</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 1.964</td> <th>  Cond. No.          </th> <td>    27.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:               Payments   R-squared:                       0.713\n",
       "Model:                            OLS   Adj. R-squared:                  0.413\n",
       "Method:                 Least Squares   F-statistic:                     2.378\n",
       "Date:                Fri, 31 Jan 2020   Prob (F-statistic):             0.0232\n",
       "Time:                        12:51:35   Log-Likelihood:                -177.66\n",
       "No. Observations:                  46   AIC:                             403.3\n",
       "Df Residuals:                      22   BIC:                             447.2\n",
       "Df Model:                          23                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==========================================================================================\n",
       "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------\n",
       "Intercept                 61.9130     12.022      5.150      0.000      36.980      86.846\n",
       "C(Date)[T.Fri, Oct 24]    48.0000     16.644      2.884      0.009      13.482      82.518\n",
       "C(Date)[T.Fri, Oct 31]    52.0000     16.644      3.124      0.005      17.482      86.518\n",
       "C(Date)[T.Mon, Oct 13]    27.0000     16.644      1.622      0.119      -7.518      61.518\n",
       "C(Date)[T.Mon, Oct 20]    37.5000     16.644      2.253      0.035       2.982      72.018\n",
       "C(Date)[T.Mon, Oct 27]    61.5000     16.644      3.695      0.001      26.982      96.018\n",
       "C(Date)[T.Sat, Nov 1]     36.5000     16.644      2.193      0.039       1.982      71.018\n",
       "C(Date)[T.Sat, Oct 11]    -8.0000     16.644     -0.481      0.636     -42.518      26.518\n",
       "C(Date)[T.Sat, Oct 18]     6.0000     16.644      0.360      0.722     -28.518      40.518\n",
       "C(Date)[T.Sat, Oct 25]    44.5000     16.644      2.674      0.014       9.982      79.018\n",
       "C(Date)[T.Sun, Nov 2]     25.0000     16.644      1.502      0.147      -9.518      59.518\n",
       "C(Date)[T.Sun, Oct 12]    20.5000     16.644      1.232      0.231     -14.018      55.018\n",
       "C(Date)[T.Sun, Oct 19]     8.5000     16.644      0.511      0.615     -26.018      43.018\n",
       "C(Date)[T.Sun, Oct 26]    42.5000     16.644      2.553      0.018       7.982      77.018\n",
       "C(Date)[T.Thu, Oct 16]    11.5000     16.644      0.691      0.497     -23.018      46.018\n",
       "C(Date)[T.Thu, Oct 23]     2.0000     16.644      0.120      0.905     -32.518      36.518\n",
       "C(Date)[T.Thu, Oct 30]    11.0000     16.644      0.661      0.516     -23.518      45.518\n",
       "C(Date)[T.Tue, Oct 14]    38.5000     16.644      2.313      0.030       3.982      73.018\n",
       "C(Date)[T.Tue, Oct 21]    28.0000     16.644      1.682      0.107      -6.518      62.518\n",
       "C(Date)[T.Tue, Oct 28]    45.5000     16.644      2.734      0.012      10.982      80.018\n",
       "C(Date)[T.Wed, Oct 15]    19.0000     16.644      1.142      0.266     -15.518      53.518\n",
       "C(Date)[T.Wed, Oct 22]    21.0000     16.644      1.262      0.220     -13.518      55.518\n",
       "C(Date)[T.Wed, Oct 29]    31.0000     16.644      1.863      0.076      -3.518      65.518\n",
       "treatment                 -3.8261      4.908     -0.780      0.444     -14.005       6.353\n",
       "==============================================================================\n",
       "Omnibus:                        5.442   Durbin-Watson:                   1.716\n",
       "Prob(Omnibus):                  0.066   Jarque-Bera (JB):                2.059\n",
       "Skew:                           0.000   Prob(JB):                        0.357\n",
       "Kurtosis:                       1.964   Cond. No.                         27.3\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols('Payments ~ treatment + C(Date)', users).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 11\n",
    "\n",
    "You should have found that your standard errors decreased by about a third -- this is why, although just comparing means *works*, if you have additional variables you should add them as covariates in your analysis. Moreover, in other settings you may find this effect is even larger -- the date indicators we added to our data are perfectly balanced between treatment and control, so we aren't adding a lot of data to the model by adding them as variables. As we'll see in later exercises, adding variables like \"gender\" or \"age\" (which will never be perfectly balanced across treatment and control) will help even more. \n",
    "\n",
    "As a last exercise, instead of adding indicators for each date, add indicators for *day of the week* (e.g. Monday, Tuesday, etc.). This is just for data manipulation practice!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "users['day_of_week'] = users.Date.str.split(',', expand=True)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Pageviews</th>\n",
       "      <th>Clicks</th>\n",
       "      <th>Enrollments</th>\n",
       "      <th>Payments</th>\n",
       "      <th>treatment</th>\n",
       "      <th>day_of_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Thu, Oct 23</td>\n",
       "      <td>8176</td>\n",
       "      <td>642</td>\n",
       "      <td>122.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Thu</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tue, Oct 14</td>\n",
       "      <td>9867</td>\n",
       "      <td>827</td>\n",
       "      <td>138.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Tue</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Fri, Oct 31</td>\n",
       "      <td>8890</td>\n",
       "      <td>706</td>\n",
       "      <td>174.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Fri</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Fri, Oct 24</td>\n",
       "      <td>9434</td>\n",
       "      <td>673</td>\n",
       "      <td>220.0</td>\n",
       "      <td>122.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Fri</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Wed, Oct 29</td>\n",
       "      <td>9327</td>\n",
       "      <td>739</td>\n",
       "      <td>196.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Wed</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date  Pageviews  Clicks  Enrollments  Payments  treatment  \\\n",
       "12  Thu, Oct 23       8176     642        122.0      68.0          1   \n",
       "3   Tue, Oct 14       9867     827        138.0      92.0          1   \n",
       "20  Fri, Oct 31       8890     706        174.0     101.0          0   \n",
       "13  Fri, Oct 24       9434     673        220.0     122.0          0   \n",
       "18  Wed, Oct 29       9327     739        196.0      86.0          0   \n",
       "\n",
       "   day_of_week  \n",
       "12         Thu  \n",
       "3          Tue  \n",
       "20         Fri  \n",
       "13         Fri  \n",
       "18         Wed  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>Payments</td>     <th>  R-squared:         </th> <td>   0.239</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.098</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   1.700</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Fri, 31 Jan 2020</td> <th>  Prob (F-statistic):</th>  <td> 0.138</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>12:51:35</td>     <th>  Log-Likelihood:    </th> <td> -200.12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    46</td>      <th>  AIC:               </th> <td>   416.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    38</td>      <th>  BIC:               </th> <td>   430.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     7</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "            <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>             <td>   95.2464</td> <td>    8.957</td> <td>   10.634</td> <td> 0.000</td> <td>   77.114</td> <td>  113.379</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Mon]</th> <td>    8.6667</td> <td>   11.914</td> <td>    0.727</td> <td> 0.471</td> <td>  -15.451</td> <td>   32.785</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Sat]</th> <td>  -13.5833</td> <td>   11.144</td> <td>   -1.219</td> <td> 0.230</td> <td>  -36.144</td> <td>    8.977</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Sun]</th> <td>   -9.2083</td> <td>   11.144</td> <td>   -0.826</td> <td> 0.414</td> <td>  -31.769</td> <td>   13.352</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Thu]</th> <td>  -25.1667</td> <td>   11.914</td> <td>   -2.112</td> <td> 0.041</td> <td>  -49.285</td> <td>   -1.049</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Tue]</th> <td>    4.0000</td> <td>   11.914</td> <td>    0.336</td> <td> 0.739</td> <td>  -20.118</td> <td>   28.118</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(day_of_week)[T.Wed]</th> <td>   -9.6667</td> <td>   11.914</td> <td>   -0.811</td> <td> 0.422</td> <td>  -33.785</td> <td>   14.451</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>treatment</th>             <td>   -3.8261</td> <td>    6.085</td> <td>   -0.629</td> <td> 0.533</td> <td>  -16.145</td> <td>    8.492</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 0.759</td> <th>  Durbin-Watson:     </th> <td>   1.207</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.684</td> <th>  Jarque-Bera (JB):  </th> <td>   0.283</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.173</td> <th>  Prob(JB):          </th> <td>   0.868</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.168</td> <th>  Cond. No.          </th> <td>    9.27</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:               Payments   R-squared:                       0.239\n",
       "Model:                            OLS   Adj. R-squared:                  0.098\n",
       "Method:                 Least Squares   F-statistic:                     1.700\n",
       "Date:                Fri, 31 Jan 2020   Prob (F-statistic):              0.138\n",
       "Time:                        12:51:35   Log-Likelihood:                -200.12\n",
       "No. Observations:                  46   AIC:                             416.2\n",
       "Df Residuals:                      38   BIC:                             430.9\n",
       "Df Model:                           7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=========================================================================================\n",
       "                            coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-----------------------------------------------------------------------------------------\n",
       "Intercept                95.2464      8.957     10.634      0.000      77.114     113.379\n",
       "C(day_of_week)[T.Mon]     8.6667     11.914      0.727      0.471     -15.451      32.785\n",
       "C(day_of_week)[T.Sat]   -13.5833     11.144     -1.219      0.230     -36.144       8.977\n",
       "C(day_of_week)[T.Sun]    -9.2083     11.144     -0.826      0.414     -31.769      13.352\n",
       "C(day_of_week)[T.Thu]   -25.1667     11.914     -2.112      0.041     -49.285      -1.049\n",
       "C(day_of_week)[T.Tue]     4.0000     11.914      0.336      0.739     -20.118      28.118\n",
       "C(day_of_week)[T.Wed]    -9.6667     11.914     -0.811      0.422     -33.785      14.451\n",
       "treatment                -3.8261      6.085     -0.629      0.533     -16.145       8.492\n",
       "==============================================================================\n",
       "Omnibus:                        0.759   Durbin-Watson:                   1.207\n",
       "Prob(Omnibus):                  0.684   Jarque-Bera (JB):                0.283\n",
       "Skew:                          -0.173   Prob(JB):                        0.868\n",
       "Kurtosis:                       3.168   Cond. No.                         9.27\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols('Payments ~ treatment + C(day_of_week)', users).fit().summary()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
