{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Big Data Exercises\n",
    "\n",
    "In these exercises we will work on data from a series of global weather monitoring stations used to measure climate trends to examine long-term trends in temperature for your home locality. This data comes from the Global Historical Climatology Network, and is the actual raw data provided by NOAA. The only changes I have made to this data are a few small formatting changes to help meet the learning goals of this exercise. \n",
    "\n",
    "To do these excercises, first please download the data for this exercise [from here](https://www.dropbox.com/s/oq36w90hm9ltgvc/global_climate_data.zip?dl=0). Note this is a big file (this is a big-data exercise, after all), so be patient. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(1)** The data we'll be working with can be found in the file `ghcnd_daily.tar.gz`. It includes daily weather data from thousands of weather stations around the work over many decades. \n",
    "\n",
    "Begin by unzipping the file and checking it's size -- it should come out to be *about* 4gb, but will expand to about 12 gb in RAM, which means there's just no way most students (who usually have, at most, 16gb of RAM) can import this dataset into pandas and manipulate it directly. \n",
    "\n",
    "(Note: what we're doing can be applied to much bigger datasets, but they sometimes takes hours to work with, so we're working with data that's just a *little* big so we can get exercises done in reasonable time).  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(2)** Thankfully, we aren't going to be working with *all* the data today. Instead, everyone should pick two weather stations to examine during this analysis (so each pair should pick 4 -- different weather stations have different data availability, so by grabbing two each hopefully at least 1 will have a long time series available...). \n",
    "\n",
    "To pick your stations, we'll need to open the `ghcnd-stations.txt` file in the directory you've downloaded. It includes both station codes (which is what we'll find in the `ghcnd_daily.csv` data, as well as the name and location of each station). \n",
    "\n",
    "When picking a weather station, make sure to pick one flagged as being in either GSN, HCN, or CRN (these designate more formalized stations that have been around a long time, ensuring you'll get a station with data that has been recorded over a longer period). \n",
    "\n",
    "Note that Station IDs start with the two-letter code of the country in which they are located, and the \"NAME\" column often constains city names. \n",
    "\n",
    "**The `ghcnd-stations.txt` is a \"fixed-width\" dataset,** meaning that instead of putting commas or tabs between observations, all columns have the same width (in terms of number of characters). So to import this data you'll have to (a) read the notes about the data in the project README.txt, and (b) read about how to read in fixed-width data in pandas. When entering column specifications, remember that normal people count from 1 and include end points, while Python counts from 0 and doesn't include end points (so if the readme says data is in columns 10-20, in Python that'd be 9 through 20). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "os.chdir('/users/nick/downloads/global_climate_data')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "columns = [(0, 11),\n",
    "           (12, 20),\n",
    "           (21, 30),\n",
    "           (31, 37),\n",
    "           (38, 40),\n",
    "           (41, 71),\n",
    "           (72, 75),\n",
    "           (76, 79),\n",
    "           (80, 85)]\n",
    "\n",
    "stations = pd.read_fwf('ghcnd-stations.txt', \n",
    "                       colspecs=columns, \n",
    "                       header=None,\n",
    "                       names = [\"ID\", \"LATITUDE\", \"LONGITUDE\", \"ELEVATION\", \n",
    "                                \"STATE\", \"NAME\", \"GSN FLAG\", \"HCN/CRN FLAG\", \n",
    "                                \"WMO ID\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "stations.head()\n",
    "stations = stations[stations['HCN/CRN FLAG'].isin(['HCN', \"CRN\"]) | stations['GSN FLAG'].isin(['GSN'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>ELEVATION</th>\n",
       "      <th>STATE</th>\n",
       "      <th>NAME</th>\n",
       "      <th>GSN FLAG</th>\n",
       "      <th>HCN/CRN FLAG</th>\n",
       "      <th>WMO ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AE000041196</td>\n",
       "      <td>25.3330</td>\n",
       "      <td>55.5170</td>\n",
       "      <td>34.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SHARJAH INTER. AIRP</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41196.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AF000040930</td>\n",
       "      <td>35.3170</td>\n",
       "      <td>69.0170</td>\n",
       "      <td>3366.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NORTH-SALANG</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40930.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AG000060390</td>\n",
       "      <td>36.7167</td>\n",
       "      <td>3.2500</td>\n",
       "      <td>24.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ALGER-DAR EL BEIDA</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>60390.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>AG000060590</td>\n",
       "      <td>30.5667</td>\n",
       "      <td>2.8667</td>\n",
       "      <td>397.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EL-GOLEA</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>60590.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>AG000060611</td>\n",
       "      <td>28.0500</td>\n",
       "      <td>9.6331</td>\n",
       "      <td>561.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IN-AMENAS</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>60611.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             ID  LATITUDE  LONGITUDE  ELEVATION STATE                 NAME  \\\n",
       "2   AE000041196   25.3330    55.5170       34.0   NaN  SHARJAH INTER. AIRP   \n",
       "6   AF000040930   35.3170    69.0170     3366.0   NaN         NORTH-SALANG   \n",
       "10  AG000060390   36.7167     3.2500       24.0   NaN   ALGER-DAR EL BEIDA   \n",
       "11  AG000060590   30.5667     2.8667      397.0   NaN             EL-GOLEA   \n",
       "12  AG000060611   28.0500     9.6331      561.0   NaN            IN-AMENAS   \n",
       "\n",
       "   GSN FLAG HCN/CRN FLAG   WMO ID  \n",
       "2       GSN          NaN  41196.0  \n",
       "6       GSN          NaN  40930.0  \n",
       "10      GSN          NaN  60390.0  \n",
       "11      GSN          NaN  60590.0  \n",
       "12      GSN          NaN  60611.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stations.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>ELEVATION</th>\n",
       "      <th>STATE</th>\n",
       "      <th>NAME</th>\n",
       "      <th>GSN FLAG</th>\n",
       "      <th>HCN/CRN FLAG</th>\n",
       "      <th>WMO ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35873</th>\n",
       "      <td>IN001080500</td>\n",
       "      <td>17.450</td>\n",
       "      <td>78.470</td>\n",
       "      <td>527.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BEGUMPET        OBSY</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43128.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36198</th>\n",
       "      <td>IN003041800</td>\n",
       "      <td>26.100</td>\n",
       "      <td>91.583</td>\n",
       "      <td>54.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GAUHATI</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42410.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36402</th>\n",
       "      <td>IN004091000</td>\n",
       "      <td>24.050</td>\n",
       "      <td>84.067</td>\n",
       "      <td>221.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DALTONGANJ</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42587.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36607</th>\n",
       "      <td>IN005030100</td>\n",
       "      <td>24.200</td>\n",
       "      <td>72.200</td>\n",
       "      <td>136.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DEESA</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42539.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36670</th>\n",
       "      <td>IN005090100</td>\n",
       "      <td>22.367</td>\n",
       "      <td>69.083</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DWARKA</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42731.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36917</th>\n",
       "      <td>IN007101600</td>\n",
       "      <td>31.100</td>\n",
       "      <td>77.167</td>\n",
       "      <td>2202.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SHIMLA</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42083.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36926</th>\n",
       "      <td>IN008010200</td>\n",
       "      <td>34.083</td>\n",
       "      <td>74.833</td>\n",
       "      <td>1587.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SRINAGAR</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42027.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36980</th>\n",
       "      <td>IN009010100</td>\n",
       "      <td>12.967</td>\n",
       "      <td>77.583</td>\n",
       "      <td>921.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BANGALORE</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43295.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37477</th>\n",
       "      <td>IN011020300</td>\n",
       "      <td>19.083</td>\n",
       "      <td>82.033</td>\n",
       "      <td>553.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>JAGDALPUR</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43041.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37513</th>\n",
       "      <td>IN011060800</td>\n",
       "      <td>22.767</td>\n",
       "      <td>81.900</td>\n",
       "      <td>625.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PENDRA ROAD</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42779.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37733</th>\n",
       "      <td>IN011330900</td>\n",
       "      <td>23.850</td>\n",
       "      <td>78.750</td>\n",
       "      <td>551.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SAGAR</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42671.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38003</th>\n",
       "      <td>IN012190100</td>\n",
       "      <td>18.533</td>\n",
       "      <td>73.850</td>\n",
       "      <td>559.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>POONA</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43063.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38119</th>\n",
       "      <td>IN014020800</td>\n",
       "      <td>25.250</td>\n",
       "      <td>91.733</td>\n",
       "      <td>1313.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CHERRAPUNJI</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42515.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38451</th>\n",
       "      <td>IN019070100</td>\n",
       "      <td>28.000</td>\n",
       "      <td>73.300</td>\n",
       "      <td>224.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BIKANER</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42165.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38778</th>\n",
       "      <td>IN020040900</td>\n",
       "      <td>13.000</td>\n",
       "      <td>80.183</td>\n",
       "      <td>16.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MADRAS/MINAMBAKKAM</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43279.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38847</th>\n",
       "      <td>IN020081000</td>\n",
       "      <td>10.233</td>\n",
       "      <td>77.467</td>\n",
       "      <td>2343.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KODAIKANAL</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43339.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38879</th>\n",
       "      <td>IN020100400</td>\n",
       "      <td>9.267</td>\n",
       "      <td>79.300</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PAMBAN</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43363.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39039</th>\n",
       "      <td>IN022021900</td>\n",
       "      <td>28.583</td>\n",
       "      <td>77.200</td>\n",
       "      <td>216.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NEW DELHI/SAFDARJUN</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42182.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39414</th>\n",
       "      <td>IN024050100</td>\n",
       "      <td>27.050</td>\n",
       "      <td>88.267</td>\n",
       "      <td>2128.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DARJEELING</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42295.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39503</th>\n",
       "      <td>IN025010100</td>\n",
       "      <td>8.300</td>\n",
       "      <td>73.000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MINICOY         OBSY</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43369.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39512</th>\n",
       "      <td>IN099999901</td>\n",
       "      <td>11.667</td>\n",
       "      <td>92.717</td>\n",
       "      <td>79.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PORT BLAIR</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43333.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                ID  LATITUDE  LONGITUDE  ELEVATION STATE  \\\n",
       "35873  IN001080500    17.450     78.470      527.0   NaN   \n",
       "36198  IN003041800    26.100     91.583       54.0   NaN   \n",
       "36402  IN004091000    24.050     84.067      221.0   NaN   \n",
       "36607  IN005030100    24.200     72.200      136.0   NaN   \n",
       "36670  IN005090100    22.367     69.083       11.0   NaN   \n",
       "36917  IN007101600    31.100     77.167     2202.0   NaN   \n",
       "36926  IN008010200    34.083     74.833     1587.0   NaN   \n",
       "36980  IN009010100    12.967     77.583      921.0   NaN   \n",
       "37477  IN011020300    19.083     82.033      553.0   NaN   \n",
       "37513  IN011060800    22.767     81.900      625.0   NaN   \n",
       "37733  IN011330900    23.850     78.750      551.0   NaN   \n",
       "38003  IN012190100    18.533     73.850      559.0   NaN   \n",
       "38119  IN014020800    25.250     91.733     1313.0   NaN   \n",
       "38451  IN019070100    28.000     73.300      224.0   NaN   \n",
       "38778  IN020040900    13.000     80.183       16.0   NaN   \n",
       "38847  IN020081000    10.233     77.467     2343.0   NaN   \n",
       "38879  IN020100400     9.267     79.300       11.0   NaN   \n",
       "39039  IN022021900    28.583     77.200      216.0   NaN   \n",
       "39414  IN024050100    27.050     88.267     2128.0   NaN   \n",
       "39503  IN025010100     8.300     73.000        2.0   NaN   \n",
       "39512  IN099999901    11.667     92.717       79.0   NaN   \n",
       "\n",
       "                       NAME GSN FLAG HCN/CRN FLAG   WMO ID  \n",
       "35873  BEGUMPET        OBSY      GSN          NaN  43128.0  \n",
       "36198               GAUHATI      GSN          NaN  42410.0  \n",
       "36402            DALTONGANJ      GSN          NaN  42587.0  \n",
       "36607                 DEESA      GSN          NaN  42539.0  \n",
       "36670                DWARKA      GSN          NaN  42731.0  \n",
       "36917                SHIMLA      GSN          NaN  42083.0  \n",
       "36926              SRINAGAR      GSN          NaN  42027.0  \n",
       "36980             BANGALORE      GSN          NaN  43295.0  \n",
       "37477             JAGDALPUR      GSN          NaN  43041.0  \n",
       "37513           PENDRA ROAD      GSN          NaN  42779.0  \n",
       "37733                 SAGAR      GSN          NaN  42671.0  \n",
       "38003                 POONA      GSN          NaN  43063.0  \n",
       "38119           CHERRAPUNJI      GSN          NaN  42515.0  \n",
       "38451               BIKANER      GSN          NaN  42165.0  \n",
       "38778    MADRAS/MINAMBAKKAM      GSN          NaN  43279.0  \n",
       "38847            KODAIKANAL      GSN          NaN  43339.0  \n",
       "38879                PAMBAN      GSN          NaN  43363.0  \n",
       "39039   NEW DELHI/SAFDARJUN      GSN          NaN  42182.0  \n",
       "39414            DARJEELING      GSN          NaN  42295.0  \n",
       "39503  MINICOY         OBSY      GSN          NaN  43369.0  \n",
       "39512            PORT BLAIR      GSN          NaN  43333.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stations[stations['ID'].str.contains(\"^IN\")] # Let's do one from  New Delhi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>ELEVATION</th>\n",
       "      <th>STATE</th>\n",
       "      <th>NAME</th>\n",
       "      <th>GSN FLAG</th>\n",
       "      <th>HCN/CRN FLAG</th>\n",
       "      <th>WMO ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>-22.100</td>\n",
       "      <td>-65.600</td>\n",
       "      <td>3479.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LA QUIACA OBSERVATO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87007.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>AR000087065</td>\n",
       "      <td>-24.167</td>\n",
       "      <td>-62.900</td>\n",
       "      <td>205.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>RIVADAVIA</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87065.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>AR000087078</td>\n",
       "      <td>-24.700</td>\n",
       "      <td>-60.583</td>\n",
       "      <td>130.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LAS LOMITAS</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87078.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>265</th>\n",
       "      <td>AR000087155</td>\n",
       "      <td>-27.450</td>\n",
       "      <td>-59.050</td>\n",
       "      <td>53.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>RESISTENCIA AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87155.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>AR000087217</td>\n",
       "      <td>-29.383</td>\n",
       "      <td>-66.817</td>\n",
       "      <td>438.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LA RIOJA AERO.</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87217.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>AR000087257</td>\n",
       "      <td>-29.883</td>\n",
       "      <td>-61.950</td>\n",
       "      <td>88.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CERES AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87257.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>AR000087270</td>\n",
       "      <td>-29.183</td>\n",
       "      <td>-59.700</td>\n",
       "      <td>53.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>RECONQUISTA AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87270.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>AR000087344</td>\n",
       "      <td>-31.317</td>\n",
       "      <td>-64.217</td>\n",
       "      <td>489.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CORDOBA AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87344.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>AR000087374</td>\n",
       "      <td>-31.783</td>\n",
       "      <td>-60.483</td>\n",
       "      <td>74.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PARANA AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87374.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>271</th>\n",
       "      <td>AR000087418</td>\n",
       "      <td>-32.833</td>\n",
       "      <td>-68.783</td>\n",
       "      <td>704.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MENDOZA AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87418.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>272</th>\n",
       "      <td>AR000087534</td>\n",
       "      <td>-34.133</td>\n",
       "      <td>-63.367</td>\n",
       "      <td>137.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LABOULAYE AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87534.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>273</th>\n",
       "      <td>AR000087623</td>\n",
       "      <td>-36.567</td>\n",
       "      <td>-64.266</td>\n",
       "      <td>192.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SANTA ROSA AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87623.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274</th>\n",
       "      <td>AR000087692</td>\n",
       "      <td>-37.933</td>\n",
       "      <td>-57.583</td>\n",
       "      <td>22.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MAR DEL PLATA AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87692.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>275</th>\n",
       "      <td>AR000087715</td>\n",
       "      <td>-38.950</td>\n",
       "      <td>-68.133</td>\n",
       "      <td>273.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NEUQUEN AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87715.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>276</th>\n",
       "      <td>AR000087803</td>\n",
       "      <td>-42.933</td>\n",
       "      <td>-71.150</td>\n",
       "      <td>799.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ESQUEL AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87803.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>277</th>\n",
       "      <td>AR000087828</td>\n",
       "      <td>-43.200</td>\n",
       "      <td>-65.266</td>\n",
       "      <td>43.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TRELEW AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87828.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>278</th>\n",
       "      <td>AR000087860</td>\n",
       "      <td>-45.783</td>\n",
       "      <td>-67.500</td>\n",
       "      <td>58.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>COMODORO RIVADAVIA</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87860.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279</th>\n",
       "      <td>AR000087925</td>\n",
       "      <td>-51.617</td>\n",
       "      <td>-69.283</td>\n",
       "      <td>19.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>RIO GALLEGOS AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87925.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280</th>\n",
       "      <td>AR000870470</td>\n",
       "      <td>-24.850</td>\n",
       "      <td>-65.483</td>\n",
       "      <td>1246.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SALTA AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87047.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>281</th>\n",
       "      <td>AR000873050</td>\n",
       "      <td>-30.250</td>\n",
       "      <td>-68.750</td>\n",
       "      <td>1175.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>JACHAL</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87305.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>282</th>\n",
       "      <td>AR000875440</td>\n",
       "      <td>-35.867</td>\n",
       "      <td>-61.900</td>\n",
       "      <td>85.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PEHUAJO AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87544.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>AR000877500</td>\n",
       "      <td>-38.733</td>\n",
       "      <td>-62.167</td>\n",
       "      <td>75.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BAHIA BLANCA AERO</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87750.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>292</th>\n",
       "      <td>ARM00087178</td>\n",
       "      <td>-27.386</td>\n",
       "      <td>-55.971</td>\n",
       "      <td>131.1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>POSADAS</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87178.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>ARM00087289</td>\n",
       "      <td>-29.689</td>\n",
       "      <td>-57.152</td>\n",
       "      <td>70.1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PASO DE LOS LIBRES</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87289.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>311</th>\n",
       "      <td>ARM00087497</td>\n",
       "      <td>-33.010</td>\n",
       "      <td>-58.613</td>\n",
       "      <td>22.9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GUALEGUAYCHU</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87497.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>ARM00087506</td>\n",
       "      <td>-35.494</td>\n",
       "      <td>-69.574</td>\n",
       "      <td>1430.1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MALARGUE</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87506.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>ARM00087593</td>\n",
       "      <td>-34.972</td>\n",
       "      <td>-57.895</td>\n",
       "      <td>21.9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LA PLATA</td>\n",
       "      <td>GSN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87593.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              ID  LATITUDE  LONGITUDE  ELEVATION STATE                 NAME  \\\n",
       "261  AR000087007   -22.100    -65.600     3479.0   NaN  LA QUIACA OBSERVATO   \n",
       "262  AR000087065   -24.167    -62.900      205.0   NaN            RIVADAVIA   \n",
       "263  AR000087078   -24.700    -60.583      130.0   NaN          LAS LOMITAS   \n",
       "265  AR000087155   -27.450    -59.050       53.0   NaN     RESISTENCIA AERO   \n",
       "266  AR000087217   -29.383    -66.817      438.0   NaN       LA RIOJA AERO.   \n",
       "267  AR000087257   -29.883    -61.950       88.0   NaN           CERES AERO   \n",
       "268  AR000087270   -29.183    -59.700       53.0   NaN     RECONQUISTA AERO   \n",
       "269  AR000087344   -31.317    -64.217      489.0   NaN         CORDOBA AERO   \n",
       "270  AR000087374   -31.783    -60.483       74.0   NaN          PARANA AERO   \n",
       "271  AR000087418   -32.833    -68.783      704.0   NaN         MENDOZA AERO   \n",
       "272  AR000087534   -34.133    -63.367      137.0   NaN       LABOULAYE AERO   \n",
       "273  AR000087623   -36.567    -64.266      192.0   NaN      SANTA ROSA AERO   \n",
       "274  AR000087692   -37.933    -57.583       22.0   NaN   MAR DEL PLATA AERO   \n",
       "275  AR000087715   -38.950    -68.133      273.0   NaN         NEUQUEN AERO   \n",
       "276  AR000087803   -42.933    -71.150      799.0   NaN          ESQUEL AERO   \n",
       "277  AR000087828   -43.200    -65.266       43.0   NaN          TRELEW AERO   \n",
       "278  AR000087860   -45.783    -67.500       58.0   NaN   COMODORO RIVADAVIA   \n",
       "279  AR000087925   -51.617    -69.283       19.0   NaN    RIO GALLEGOS AERO   \n",
       "280  AR000870470   -24.850    -65.483     1246.0   NaN           SALTA AERO   \n",
       "281  AR000873050   -30.250    -68.750     1175.0   NaN               JACHAL   \n",
       "282  AR000875440   -35.867    -61.900       85.0   NaN         PEHUAJO AERO   \n",
       "284  AR000877500   -38.733    -62.167       75.0   NaN    BAHIA BLANCA AERO   \n",
       "292  ARM00087178   -27.386    -55.971      131.1   NaN              POSADAS   \n",
       "296  ARM00087289   -29.689    -57.152       70.1   NaN   PASO DE LOS LIBRES   \n",
       "311  ARM00087497   -33.010    -58.613       22.9   NaN         GUALEGUAYCHU   \n",
       "312  ARM00087506   -35.494    -69.574     1430.1   NaN             MALARGUE   \n",
       "320  ARM00087593   -34.972    -57.895       21.9   NaN             LA PLATA   \n",
       "\n",
       "    GSN FLAG HCN/CRN FLAG   WMO ID  \n",
       "261      GSN          NaN  87007.0  \n",
       "262      GSN          NaN  87065.0  \n",
       "263      GSN          NaN  87078.0  \n",
       "265      GSN          NaN  87155.0  \n",
       "266      GSN          NaN  87217.0  \n",
       "267      GSN          NaN  87257.0  \n",
       "268      GSN          NaN  87270.0  \n",
       "269      GSN          NaN  87344.0  \n",
       "270      GSN          NaN  87374.0  \n",
       "271      GSN          NaN  87418.0  \n",
       "272      GSN          NaN  87534.0  \n",
       "273      GSN          NaN  87623.0  \n",
       "274      GSN          NaN  87692.0  \n",
       "275      GSN          NaN  87715.0  \n",
       "276      GSN          NaN  87803.0  \n",
       "277      GSN          NaN  87828.0  \n",
       "278      GSN          NaN  87860.0  \n",
       "279      GSN          NaN  87925.0  \n",
       "280      GSN          NaN  87047.0  \n",
       "281      GSN          NaN  87305.0  \n",
       "282      GSN          NaN  87544.0  \n",
       "284      GSN          NaN  87750.0  \n",
       "292      GSN          NaN  87178.0  \n",
       "296      GSN          NaN  87289.0  \n",
       "311      GSN          NaN  87497.0  \n",
       "312      GSN          NaN  87506.0  \n",
       "320      GSN          NaN  87593.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's do IN022021900. I used to live in Safdarjung Enclave in delhi!\n",
    "# IN007101600 \n",
    "\n",
    "# and one from argentina\n",
    "stations[stations['ID'].str.contains(\"^AR\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ARM00087593 (I also briefly lived in La Plata!)\n",
    "# AR000087007"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>ELEVATION</th>\n",
       "      <th>STATE</th>\n",
       "      <th>NAME</th>\n",
       "      <th>GSN FLAG</th>\n",
       "      <th>HCN/CRN FLAG</th>\n",
       "      <th>WMO ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>89825</th>\n",
       "      <td>USC00050848</td>\n",
       "      <td>39.9919</td>\n",
       "      <td>-105.2667</td>\n",
       "      <td>1671.5</td>\n",
       "      <td>CO</td>\n",
       "      <td>BOULDER</td>\n",
       "      <td>NaN</td>\n",
       "      <td>HCN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                ID  LATITUDE  LONGITUDE  ELEVATION STATE     NAME GSN FLAG  \\\n",
       "89825  USC00050848   39.9919  -105.2667     1671.5    CO  BOULDER      NaN   \n",
       "\n",
       "      HCN/CRN FLAG  WMO ID  \n",
       "89825          HCN     NaN  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stations[stations['ID'] == 'USC00050848']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(3)** Now that we something about the observations we want to work with, we can now turn to our actual weather data. \n",
    "\n",
    "Our daily weather can be found in `ghcnd_daily.csv`, which you get by unzipping `ghcnd_daily.tar.gz`. Note that the README.txt talks about this being a fixed-width file. Since you've already dealt with one fixed-width file, I've just converted this to a CSV, and dropped all the data that isn't \"daily max temperatures\". \n",
    "\n",
    "Let's start with the fun part. **SAVE YOUR NOTEBOOK AND ANY OTHER OPEN FILES!**. Then just try and import the data (`ghcnd_daily.csv`) while watching your Activity Monitor (Mac) or Resource Monitor (Windows) to see what happens.  \n",
    "\n",
    "If you have 8GB of RAM, this should fail miserably. \n",
    "\n",
    "If you have 16GB of RAM, you might just get away with this. But if it *does* load, try sorting the data by year and see how things go. \n",
    "\n",
    "(If you have 32GB of RAM: you're actually probably fine with data this size. Sorry -- datasets big enough to cause big problems for people with 32GB take a long time to chunk on an 8GB computer, and these exercises have to be fast enough to finish in a class period! There are some exercises at the bottom with a REALLY big dataset you can work with.)\n",
    "\n",
    "You may have to kill your kernel, kill Jupyter Lab, and start over when this explodes..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(4)** Now that we know that we can't work with this directly, it's good with these big datasets to just import ~200 lines so you can get a feel for the data. So load *just 200 lines* of `ghcnd_daily.csv`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('/users/nick/dropbox/MIDS_Data_Prep'\n",
    "                 '/ClimateData/ghcnd_daily.csv', \n",
    "                 nrows=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>element</th>\n",
       "      <th>value1</th>\n",
       "      <th>mflag1</th>\n",
       "      <th>qflag1</th>\n",
       "      <th>sflag1</th>\n",
       "      <th>value2</th>\n",
       "      <th>mflag2</th>\n",
       "      <th>...</th>\n",
       "      <th>qflag29</th>\n",
       "      <th>sflag29</th>\n",
       "      <th>value30</th>\n",
       "      <th>mflag30</th>\n",
       "      <th>qflag30</th>\n",
       "      <th>sflag30</th>\n",
       "      <th>value31</th>\n",
       "      <th>mflag31</th>\n",
       "      <th>qflag31</th>\n",
       "      <th>sflag31</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ACW00011604</td>\n",
       "      <td>1949</td>\n",
       "      <td>1</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>289</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>289</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>272</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>272</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ACW00011604</td>\n",
       "      <td>1949</td>\n",
       "      <td>2</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>267</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>278</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-9999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-9999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ACW00011604</td>\n",
       "      <td>1949</td>\n",
       "      <td>3</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>272</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>289</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>278</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>267</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ACW00011604</td>\n",
       "      <td>1949</td>\n",
       "      <td>4</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>278</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>283</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>289</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>-9999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ACW00011604</td>\n",
       "      <td>1949</td>\n",
       "      <td>5</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>283</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>283</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>294</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "      <td>300</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>X</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 128 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id  year  month element  value1  mflag1  qflag1 sflag1  value2  \\\n",
       "0  ACW00011604  1949      1    TMAX     289     NaN     NaN      X     289   \n",
       "1  ACW00011604  1949      2    TMAX     267     NaN     NaN      X     278   \n",
       "2  ACW00011604  1949      3    TMAX     272     NaN     NaN      X     289   \n",
       "3  ACW00011604  1949      4    TMAX     278     NaN     NaN      X     283   \n",
       "4  ACW00011604  1949      5    TMAX     283     NaN     NaN      X     283   \n",
       "\n",
       "   mflag2  ...  qflag29 sflag29  value30  mflag30  qflag30 sflag30  value31  \\\n",
       "0     NaN  ...      NaN       X      272      NaN      NaN       X      272   \n",
       "1     NaN  ...      NaN     NaN    -9999      NaN      NaN     NaN    -9999   \n",
       "2     NaN  ...      NaN       X      278      NaN      NaN       X      267   \n",
       "3     NaN  ...      NaN       X      289      NaN      NaN       X    -9999   \n",
       "4     NaN  ...      NaN       X      294      NaN      NaN       X      300   \n",
       "\n",
       "   mflag31  qflag31 sflag31  \n",
       "0      NaN      NaN       X  \n",
       "1      NaN      NaN     NaN  \n",
       "2      NaN      NaN       X  \n",
       "3      NaN      NaN     NaN  \n",
       "4      NaN      NaN       X  \n",
       "\n",
       "[5 rows x 128 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(5)** Once you have a sense of the data, write code to chunk your data: i.e. code that reads in all blocks of the data that will fit in ram, keeps only the observations for the weather stations you've selected to focus on, and throws away everything else.\n",
    "\n",
    "In addition to your own 4 weather stations, please also include station USC00050848 (a weather station from near my home!) so you can generate results that we can all compare (to check for accuracy). \n",
    "\n",
    "Note you will probably have to play with your chunk sizes (probably while watching your RAM usage?) to find a chunk size that's big enough you aren't running chunks all day, but small enough you can work with it. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_stations = ['USC00050848', 'IN007101600', 'IN022021900', 'ARM00087593', 'AR000087007']\n",
    "\n",
    "# Setup chunking load\n",
    "df_full = pd.read_csv('/users/nick/dropbox/MIDS_Data_Prep'\n",
    "                      '/ClimateData/ghcnd_daily.csv', \n",
    "                      iterator=True,\n",
    "                      chunksize=5000000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (6,10,14,18,22,26,30,34,38,42,46,50,54,58,62,66,70,74,78,82,86,90,94,98,102,106,110,114,118,122,126) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "starting chunk 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (6,7,10,11,14,15,18,19,22,23,26,27,30,31,34,35,38,39,42,43,46,47,50,51,54,55,58,59,62,63,66,67,70,71,74,75,78,79,82,83,86,87,90,91,94,95,98,99,102,103,106,107,110,111,114,115,118,119,122,123,126,127) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "starting chunk 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (5,6,7,9,10,11,13,14,15,17,18,19,21,22,23,25,26,27,29,30,31,33,34,35,37,38,39,41,42,43,45,46,47,49,50,51,53,54,55,57,58,59,61,62,63,65,66,67,69,70,71,73,74,75,77,78,79,81,82,83,85,86,87,89,90,91,93,94,95,97,98,99,101,102,103,105,106,107,109,110,111,113,114,115,117,118,119,121,122,123,125,126,127) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "starting chunk 2\n"
     ]
    }
   ],
   "source": [
    "# OK,small enough for me, but not ridiculously small.   \n",
    "keeping = list()\n",
    "for idx, d in enumerate(df_full):\n",
    "    \n",
    "    print(f'starting chunk {idx}')\n",
    "    \n",
    "    d = d[d['id'].isin(my_stations)]\n",
    "    keeping.append(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_data = pd.concat(keeping)\n",
    "del keeping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>element</th>\n",
       "      <th>value1</th>\n",
       "      <th>mflag1</th>\n",
       "      <th>qflag1</th>\n",
       "      <th>sflag1</th>\n",
       "      <th>value2</th>\n",
       "      <th>mflag2</th>\n",
       "      <th>...</th>\n",
       "      <th>qflag29</th>\n",
       "      <th>sflag29</th>\n",
       "      <th>value30</th>\n",
       "      <th>mflag30</th>\n",
       "      <th>qflag30</th>\n",
       "      <th>sflag30</th>\n",
       "      <th>value31</th>\n",
       "      <th>mflag31</th>\n",
       "      <th>qflag31</th>\n",
       "      <th>sflag31</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>58411</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>1956</td>\n",
       "      <td>4</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>230</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>242</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>171</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>-9999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58412</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>1956</td>\n",
       "      <td>5</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>180</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>172</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>148</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58413</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>1956</td>\n",
       "      <td>6</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>156</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>136</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>-9999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58414</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>1956</td>\n",
       "      <td>7</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>132</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>136</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>128</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>128</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58415</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>1956</td>\n",
       "      <td>8</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>158</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>164</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 128 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  year  month element  value1 mflag1 qflag1 sflag1  value2  \\\n",
       "58411  AR000087007  1956      4    TMAX     230    NaN    NaN      G     242   \n",
       "58412  AR000087007  1956      5    TMAX     180    NaN    NaN      G     172   \n",
       "58413  AR000087007  1956      6    TMAX     156    NaN    NaN      G     136   \n",
       "58414  AR000087007  1956      7    TMAX     132    NaN    NaN      G     136   \n",
       "58415  AR000087007  1956      8    TMAX     138    NaN    NaN      G     138   \n",
       "\n",
       "      mflag2  ... qflag29 sflag29  value30 mflag30 qflag30 sflag30  value31  \\\n",
       "58411    NaN  ...     NaN       G      171     NaN     NaN       G    -9999   \n",
       "58412    NaN  ...     NaN       G      138     NaN     NaN       G      148   \n",
       "58413    NaN  ...     NaN       G      138     NaN     NaN       G    -9999   \n",
       "58414    NaN  ...     NaN       G      128     NaN     NaN       G      128   \n",
       "58415    NaN  ...     NaN       G      158     NaN     NaN       G      164   \n",
       "\n",
       "      mflag31 qflag31 sflag31  \n",
       "58411     NaN     NaN     NaN  \n",
       "58412     NaN     NaN       G  \n",
       "58413     NaN     NaN     NaN  \n",
       "58414     NaN     NaN       G  \n",
       "58415     NaN     NaN       G  \n",
       "\n",
       "[5 rows x 128 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(6)** Now, for each weather station, figure out the *earliest* year with data. Keep `USC00050848` and the one weather station for each member of your team with the best data (i.e. each member of your pair should have picked two weather stations: keep the one from each pair with the best data). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " for AR000087007, earliest year is 1956\n",
      " for ARM00087593, earliest year is 1974\n",
      " for IN007101600, earliest year is 1973\n",
      " for IN022021900, earliest year is 1944\n",
      " for USC00050848, earliest year is 1893\n"
     ]
    }
   ],
   "source": [
    "for name in weather_data.id.unique():\n",
    "    min_year = weather_data.loc[weather_data.id == name, 'year'].min()\n",
    "    print(f' for {name}, earliest year is {min_year}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>element</th>\n",
       "      <th>value1</th>\n",
       "      <th>mflag1</th>\n",
       "      <th>qflag1</th>\n",
       "      <th>sflag1</th>\n",
       "      <th>value2</th>\n",
       "      <th>mflag2</th>\n",
       "      <th>...</th>\n",
       "      <th>qflag29</th>\n",
       "      <th>sflag29</th>\n",
       "      <th>value30</th>\n",
       "      <th>mflag30</th>\n",
       "      <th>qflag30</th>\n",
       "      <th>sflag30</th>\n",
       "      <th>value31</th>\n",
       "      <th>mflag31</th>\n",
       "      <th>qflag31</th>\n",
       "      <th>sflag31</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>58411</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>1956</td>\n",
       "      <td>4</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>230</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>242</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>171</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>-9999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58412</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>1956</td>\n",
       "      <td>5</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>180</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>172</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>148</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58413</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>1956</td>\n",
       "      <td>6</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>156</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>136</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>-9999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58414</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>1956</td>\n",
       "      <td>7</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>132</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>136</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>128</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>128</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58415</th>\n",
       "      <td>AR000087007</td>\n",
       "      <td>1956</td>\n",
       "      <td>8</td>\n",
       "      <td>TMAX</td>\n",
       "      <td>138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>158</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "      <td>164</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 128 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  year  month element  value1 mflag1 qflag1 sflag1  value2  \\\n",
       "58411  AR000087007  1956      4    TMAX     230    NaN    NaN      G     242   \n",
       "58412  AR000087007  1956      5    TMAX     180    NaN    NaN      G     172   \n",
       "58413  AR000087007  1956      6    TMAX     156    NaN    NaN      G     136   \n",
       "58414  AR000087007  1956      7    TMAX     132    NaN    NaN      G     136   \n",
       "58415  AR000087007  1956      8    TMAX     138    NaN    NaN      G     138   \n",
       "\n",
       "      mflag2  ... qflag29 sflag29  value30 mflag30 qflag30 sflag30  value31  \\\n",
       "58411    NaN  ...     NaN       G      171     NaN     NaN       G    -9999   \n",
       "58412    NaN  ...     NaN       G      138     NaN     NaN       G      148   \n",
       "58413    NaN  ...     NaN       G      138     NaN     NaN       G    -9999   \n",
       "58414    NaN  ...     NaN       G      128     NaN     NaN       G      128   \n",
       "58415    NaN  ...     NaN       G      158     NaN     NaN       G      164   \n",
       "\n",
       "      mflag31 qflag31 sflag31  \n",
       "58411     NaN     NaN     NaN  \n",
       "58412     NaN     NaN       G  \n",
       "58413     NaN     NaN     NaN  \n",
       "58414     NaN     NaN       G  \n",
       "58415     NaN     NaN       G  \n",
       "\n",
       "[5 rows x 128 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather_data = weather_data[weather_data.id.isin(['USC00050848', 'IN022021900', 'AR000087007'])].copy()\n",
    "weather_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(7)** Now calculate the average max temp for each weather station / month in the data. Note that in a few weeks, we'll have the skills to do this by reshaping our data so each row is a single day, rather than a month. But for the moment, just sum the columns, watching out for weird values. \n",
    "\n",
    "To sum across the value columns, we can combine: \n",
    "\n",
    "```python\n",
    "weather_data.filter(like='value')\n",
    "```\n",
    "\n",
    "(to just get the columns whose names start with \"value\") with `.mean(axis='columns')` (which averages across columns (along rows) rather than the usual averaging across rows (along columns). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-9999    150\n",
       " 189      39\n",
       " 300      39\n",
       " 200      39\n",
       " 128      38\n",
       "        ... \n",
       " 362       1\n",
       " 249       1\n",
       " 381       1\n",
       " 255       1\n",
       " 404       1\n",
       "Name: value1, Length: 336, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather_data['value1'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First get rid of garbarge entries. \n",
    "import numpy as np\n",
    "for i in range(1, 32):\n",
    "    weather_data[f'value{i}'] = weather_data[f'value{i}'].replace(-9999, np.nan)\n",
    "\n",
    "weather_data['avg'] = weather_data.filter(like='value').mean(axis='columns')\n",
    "weather_data['avg_C'] = weather_data['avg'] / 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(6)** Now for each weather station, generate a separate plot of the daily temperatures over time. You should end up with a plot that looks something like this:\n",
    "\n",
    "![temp_plots_Colorado](../images/temp_plots_Boulder_CO.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Jujuy_Argentina\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/plotnine/ggplot.py:729: PlotnineWarning: Saving 6.4 x 4.8 in image.\n",
      "  from_inches(height, units), units), PlotnineWarning)\n",
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/plotnine/ggplot.py:730: PlotnineWarning: Filename: /users/nick/github/practicaldatascience/source/images/temp_plots_Jujuy_Argentina.png\n",
      "  warn('Filename: {}'.format(filename), PlotnineWarning)\n",
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n",
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/plotnine/ggplot.py:729: PlotnineWarning: Saving 6.4 x 4.8 in image.\n",
      "  from_inches(height, units), units), PlotnineWarning)\n",
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/plotnine/ggplot.py:730: PlotnineWarning: Filename: /users/nick/github/practicaldatascience/source/images/temp_plots_Safdarjung_New_Delhi_India.png\n",
      "  warn('Filename: {}'.format(filename), PlotnineWarning)\n",
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<ggplot: (8790525242737)>\n",
      "Safdarjung_New_Delhi_India\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/plotnine/ggplot.py:729: PlotnineWarning: Saving 6.4 x 4.8 in image.\n",
      "  from_inches(height, units), units), PlotnineWarning)\n",
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/plotnine/ggplot.py:730: PlotnineWarning: Filename: /users/nick/github/practicaldatascience/source/images/temp_plots_Boulder_CO.png\n",
      "  warn('Filename: {}'.format(filename), PlotnineWarning)\n",
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<ggplot: (8790490358045)>\n",
      "Boulder_CO\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<ggplot: (-9223363246329102469)>\n"
     ]
    }
   ],
   "source": [
    "from plotnine import *\n",
    "weather_data['date'] = weather_data['year'] + (weather_data['month']-1) / 12\n",
    "\n",
    "names = {'USC00050848': \"Boulder, CO\",\n",
    "         'IN022021900': 'Safdarjung, New Delhi, India',\n",
    "         'AR000087007': 'Jujuy, Argentina'\n",
    "        }\n",
    "\n",
    "for station in weather_data.id.unique():\n",
    "    g = (ggplot(weather_data[weather_data.id == station], aes(x='date', y='avg_C')) \n",
    "                + geom_line() \n",
    "                + geom_smooth(method='lm', color='red') \n",
    "                + labs(title = f\"Monthly Avg of Daily High Temps, {names[station]}\",\n",
    "                       x = \"Year\",\n",
    "                       y = \"Monthly Average of Daily High in Centigrade\")\n",
    "         )\n",
    "    name_no_comma = names[station].replace(\", \", \"_\").replace(\" \", \"_\")\n",
    "    print(name_no_comma)\n",
    "    g.save(f'/users/nick/github/practicaldatascience/source/images/temp_plots_{name_no_comma}.png')\n",
    "    print(g)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Want More Practice?\n",
    "\n",
    "If you *really* want a challenge, the file `ghcnd_daily_30gb.tar.gz` will decompress into `ghcnd_daily.dat`, the full version of the GHCND daily data. It contains not only daily high temps, but also daily low temps, preciptionation, etc. Moreover, it is still in fixed-width format, and is about 30gb in raw form. \n",
    "\n",
    "Importing and chunking this data (with moderate optimizations) took about 2 hours on my computer. \n",
    "\n",
    "If you're up for it, it's a great dataset to wrestling with data in weird formats and chunking. \n",
    "\n",
    "**Pro-tip:** strings take up *way* more space in RAM than numbers, so some columns can be converted to keep the memory footprint of the data down. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
