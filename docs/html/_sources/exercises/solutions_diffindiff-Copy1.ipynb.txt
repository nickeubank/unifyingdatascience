{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Groupby and Arrest Data\n",
    "\n",
    "In recent years, many US states have decided to legalize the use of marijuana. \n",
    "\n",
    "When these ideas were first proposed, there were many theories about the relationship between crime and the \"War on Drugs\" (the term given to US efforts to arrest drug users and dealers over the past several decades). \n",
    "\n",
    "In this exercise, we're going to test a few of those theories using drug arrest data from the state of California. \n",
    "\n",
    "Though California has passed a number of laws lessening penalities for marijuana possession over the years, arguably the biggest changes were in  2010, when the state changed the penalty for possessing a small amount of marijuana from a criminal crime to a \"civil\" penality (meaning those found guilty only had to pay a fine, not go to jail), though possessing, selling, or producing larger quantities remained illegal. Then in 2016, the state fully legalized marijuana for recreational use, not only making possession of small amounts legal, but also creating a regulatory system for producing marijuana for sale. \n",
    "\n",
    "Proponents of drug legalization have long argued that the war on drugs contributes to violent crime by creating an opportunity for drug dealers and organized crime to sell and distribute drugs, a business which tends to generate violence when gangs battle over territory. According to this theory, with drug legalization, we should see violent crime decrease after legalization in places where drug arrests had previously been common. \n",
    "\n",
    "**To be clear,** this is far from the only argument for drug legalization! It is simply the argument we are well positioned to analyze today. \n",
    "\n",
    "(Students from Practical Data Science: This should sound familiar! Last semester we did this analysis in a very simple, crude manner; in this class we'll do it rigorously with your new found difference-in-differences skills!)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1\n",
    "\n",
    "Download and import California arrest data from [https://www.github.com/nickeubank/MIDS_Data/UDS_arrest_data.csv](https://www.github.com/nickeubank/MIDS_Data/UDS_arrest_data.csv). What is a unit of observation (a single row) in this data? What entities are being tracked, and over what time period?\n",
    "\n",
    "Note that `VIOLENT` is a count of arrests for violent offenses, and `F_DRUGOFF` is a count of felony drug arrests. `total_population` is total population. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "arrests = pd.read_csv(\"https://media.githubusercontent.com/media/nickeubank/MIDS_Data/master/UDS_arrest_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YEAR</th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>VIOLENT</th>\n",
       "      <th>F_DRUGOFF</th>\n",
       "      <th>total_population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1980</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4504</td>\n",
       "      <td>3569</td>\n",
       "      <td>1105379.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1981</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4699</td>\n",
       "      <td>3926</td>\n",
       "      <td>1122759.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1982</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4389</td>\n",
       "      <td>4436</td>\n",
       "      <td>1140139.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1983</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4500</td>\n",
       "      <td>5086</td>\n",
       "      <td>1157519.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1984</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>3714</td>\n",
       "      <td>5878</td>\n",
       "      <td>1174900.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YEAR          COUNTY  VIOLENT  F_DRUGOFF  total_population\n",
       "0  1980  Alameda County     4504       3569         1105379.0\n",
       "1  1981  Alameda County     4699       3926         1122759.3\n",
       "2  1982  Alameda County     4389       4436         1140139.6\n",
       "3  1983  Alameda County     4500       5086         1157519.9\n",
       "4  1984  Alameda County     3714       5878         1174900.2"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arrests.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 2\n",
    "\n",
    "In this analysis, we will split our sample into \"treated\" and \"control\" on the basis of whether a given county had a high average drug arrest rate in the three years before California began drug legalization in 2010. Counties with high drug arrest rates, after all, will be more impacted by drug liberalization policies. \n",
    "\n",
    "Calculate each county's average drug arrest *rate* for the period from 2007-2009. Then calculate the median value across counties, and create an indicator called `treated` for counties with above-median average drug arrest rates during this period. Note that this indicator should be *time-invariant* -- if a county is in the treated group, it should always be identified as being in the treated group. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "arrests['drug_rate'] = arrests.F_DRUGOFF / (arrests.total_population / 100000)\n",
    "arrests['violent_rate'] = arrests.VIOLENT / (arrests.total_population / 100000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "small = arrests[arrests.YEAR.isin([2007, 2008, 2009])]\n",
    "avgs = small.groupby('COUNTY').violent_rate.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "367.16960903173793"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avgs.median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "COUNTY\n",
       "Alameda County      0\n",
       "Alpine County       1\n",
       "Amador County       0\n",
       "Butte County        0\n",
       "Calaveras County    1\n",
       "Name: treated, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "high = (avgs > avgs.median()).astype('int')\n",
    "high.name = 'treated'\n",
    "high.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YEAR</th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>VIOLENT</th>\n",
       "      <th>F_DRUGOFF</th>\n",
       "      <th>total_population</th>\n",
       "      <th>drug_rate</th>\n",
       "      <th>violent_rate</th>\n",
       "      <th>treated</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1980</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4504</td>\n",
       "      <td>3569</td>\n",
       "      <td>1105379.0</td>\n",
       "      <td>322.875683</td>\n",
       "      <td>407.462056</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1981</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4699</td>\n",
       "      <td>3926</td>\n",
       "      <td>1122759.3</td>\n",
       "      <td>349.674236</td>\n",
       "      <td>418.522474</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1982</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4389</td>\n",
       "      <td>4436</td>\n",
       "      <td>1140139.6</td>\n",
       "      <td>389.075162</td>\n",
       "      <td>384.952860</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1983</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4500</td>\n",
       "      <td>5086</td>\n",
       "      <td>1157519.9</td>\n",
       "      <td>439.387694</td>\n",
       "      <td>388.762215</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1984</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>3714</td>\n",
       "      <td>5878</td>\n",
       "      <td>1174900.2</td>\n",
       "      <td>500.297813</td>\n",
       "      <td>316.111956</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YEAR          COUNTY  VIOLENT  F_DRUGOFF  total_population   drug_rate  \\\n",
       "0  1980  Alameda County     4504       3569         1105379.0  322.875683   \n",
       "1  1981  Alameda County     4699       3926         1122759.3  349.674236   \n",
       "2  1982  Alameda County     4389       4436         1140139.6  389.075162   \n",
       "3  1983  Alameda County     4500       5086         1157519.9  439.387694   \n",
       "4  1984  Alameda County     3714       5878         1174900.2  500.297813   \n",
       "\n",
       "   violent_rate  treated  \n",
       "0    407.462056        0  \n",
       "1    418.522474        0  \n",
       "2    384.952860        0  \n",
       "3    388.762215        0  \n",
       "4    316.111956        0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arrests = pd.merge(arrests, high, left_on='COUNTY', right_index=True, \n",
    "                   how='outer', indicator=True,\n",
    "                   validate='m:1')\n",
    "assert (arrests._merge == 'both').all()\n",
    "arrests = arrests.drop('_merge', axis='columns')\n",
    "arrests.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 3\n",
    "\n",
    "Our outcome in this analysis is the violent arrest rate -- if drug liberalization reduces crime overall, we would expect to see this rate fall in counties with high drug arrest rates after liberalization; if not, we would not expect to see any changes. Create a `violent_rate` variable with is violent arrests per 100,000 people. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 4\n",
    "\n",
    "Differences-in-differences get their name from the fact that the estimator, in its most basic implementation, is just the difference between:\n",
    "\n",
    "-  difference in the average change in outcome among eventually-treated units from before to after when treatment is applied, and\n",
    "-  difference in the average change in outcome among never-treated units from before to after when treatment (to the treated units). \n",
    "\n",
    "(Obviously treatment is never a applied to the never-treated units -- when we talk about pre / post, we refer to before and after the point in time in which treatment is applied to the treated units. So if treated units are treated in 2008, then for the never-treated units, we are also comparing outcomes before 2008 to after 2008, even though 2008 has no special significance for the never-treated units). \n",
    "\n",
    "In its most basic implementation, therefore, calculating a difference-in-difference estimate requires calculating just 4 numbers:\n",
    "\n",
    "- $\\bar y_{T=1,Post}$  Avg for Treatment, Post-Treatment\n",
    "- $\\bar y_{T=0,Post}$  Avg for Control, Post-Treatment\n",
    "- $\\bar y_{T=1,Pre}$   Avg for Treatment, Pre-Treatment\n",
    "- $\\bar y_{T=0,Pre}$   Avg for Control, Pre-Treatment\n",
    "\n",
    "The difference-in-differences estimator $\\hat \\delta$  is defined as\n",
    "\n",
    "$$\n",
    "\\hat{\\delta}= (\\bar{y}_{T=1,\\,Post}-\\bar{y}_{T=1,\\,Pre})-(\\bar{y}_{T=0,\\,Post}-\\bar{y}_{T=0,\\,Pre})\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate (a) the change in violent arrest rates for our treated groups from before legalization to after ($\\bar y_{T=1,Post} - \\bar y_{T=1, Pre}$), and (b) our difference in difference estimator $\\hat\\delta$ by calculating these four values. Does doing your difference-in-difference estimate tell you something different from what you'd learn if you had just done a pre-post comparison?\n",
    "\n",
    "For the `Pre` period, consider the three years before liberalization begins in 2010 (e.g. 2007-2009). For the `Post` period, consider the three years after final legalization took place (2016-2018). We will ignore the middle period in which marijuana was decriminalized but not yet legal. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 5\n",
    "\n",
    "Now calculate $\\hat\\delta$ using a regression with an indicator for post-2010, an indicator for treated, and an interaction of the two. Use only the same set of years you used above. How does your estimate compare to the estimate you calculated in Exercise 4?\n",
    "\n",
    "Note: You need to cluster your standard errors by county, since we expect counties (over time) to be subject to common fluctuations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>violent_rate</td>   <th>  R-squared:         </th> <td>   0.480</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.475</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   51.48</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 25 Feb 2020</td> <th>  Prob (F-statistic):</th> <td>3.13e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>17:49:10</td>     <th>  Log-Likelihood:    </th> <td> -2023.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   348</td>      <th>  AIC:               </th> <td>   4056.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   344</td>      <th>  BIC:               </th> <td>   4071.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>       <td>cluster</td>     <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "          <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>         <td>  285.7453</td> <td>    9.088</td> <td>   31.443</td> <td> 0.000</td> <td>  267.548</td> <td>  303.943</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>post_2010</th>         <td>   -0.6812</td> <td>   10.511</td> <td>   -0.065</td> <td> 0.949</td> <td>  -21.730</td> <td>   20.367</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>treated</th>           <td>  174.9023</td> <td>   14.404</td> <td>   12.143</td> <td> 0.000</td> <td>  146.060</td> <td>  203.745</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>post_2010:treated</th> <td>  -44.8188</td> <td>   17.930</td> <td>   -2.500</td> <td> 0.015</td> <td>  -80.722</td> <td>   -8.915</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>63.141</td> <th>  Durbin-Watson:     </th> <td>   0.891</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 135.772</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.932</td> <th>  Prob(JB):          </th> <td>3.29e-30</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.426</td> <th>  Cond. No.          </th> <td>    6.85</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors are robust to cluster correlation (cluster)"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:           violent_rate   R-squared:                       0.480\n",
       "Model:                            OLS   Adj. R-squared:                  0.475\n",
       "Method:                 Least Squares   F-statistic:                     51.48\n",
       "Date:                Tue, 25 Feb 2020   Prob (F-statistic):           3.13e-16\n",
       "Time:                        17:49:10   Log-Likelihood:                -2023.8\n",
       "No. Observations:                 348   AIC:                             4056.\n",
       "Df Residuals:                     344   BIC:                             4071.\n",
       "Df Model:                           3                                         \n",
       "Covariance Type:              cluster                                         \n",
       "=====================================================================================\n",
       "                        coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------------\n",
       "Intercept           285.7453      9.088     31.443      0.000     267.548     303.943\n",
       "post_2010            -0.6812     10.511     -0.065      0.949     -21.730      20.367\n",
       "treated             174.9023     14.404     12.143      0.000     146.060     203.745\n",
       "post_2010:treated   -44.8188     17.930     -2.500      0.015     -80.722      -8.915\n",
       "==============================================================================\n",
       "Omnibus:                       63.141   Durbin-Watson:                   0.891\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              135.772\n",
       "Skew:                           0.932   Prob(JB):                     3.29e-30\n",
       "Kurtosis:                       5.426   Cond. No.                         6.85\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors are robust to cluster correlation (cluster)\n",
       "\"\"\""
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arrests['post_2010'] = (arrests.YEAR >= 2010).astype('int')\n",
    "arrests_sub = arrests[arrests.YEAR.isin([2007, 2008, 2009, 2016, 2017, 2018])]\n",
    "\n",
    "import statsmodels.formula.api as smf\n",
    "m = smf.ols('violent_rate ~ post_2010 * treated', arrests_sub).fit()\n",
    "m.get_robustcov_results(cov_type='cluster',\n",
    "                        groups=arrests_sub.COUNTY).summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 6\n",
    "\n",
    "In the preceding exercise, we did a simple pre-post / treated-control comparison. But one important limitation of these designs is that they do not allow us to test for *parallel trends*. \n",
    "\n",
    "**Plot** a difference-in-difference model using data from 2000-2009 (inclusive) and from 2016-2018 (inclusive). Note this will have four different geometric components: a time trend for treated counties pre-2010, a time trend for control counties pre-2010, a time trend for treated counties post-2016 (include 2016), and a time trend for control counties post-2016 (include 2016). \n",
    "\n",
    "Do you see evidence of parallel trends for these two datasets? Does that make you feel more or less confident in your diff-in-diff estimates?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (-9223363249357043375)>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from plotnine import *\n",
    "\n",
    "arrests_sub2 = arrests[((2000 <= arrests.YEAR) & (arrests.YEAR <= 2009)) | \n",
    "                       (2016 <= arrests.YEAR)]\n",
    "(ggplot(arrests_sub2, aes(y='violent_rate', x='YEAR', color='treated')) + \n",
    "         geom_smooth(method='lm', data=arrests_sub2[(arrests_sub2.YEAR <= 2009) & \n",
    "                                                     (arrests_sub2.treated == 1)]) +\n",
    "         geom_smooth(method='lm', data=arrests_sub2[(arrests_sub2.YEAR <= 2009) & \n",
    "                                                     (arrests_sub2.treated == 0)]) +\n",
    "         geom_smooth(method='lm', data=arrests_sub2[(arrests_sub2.YEAR > 2010) & \n",
    "                                                     (arrests_sub2.treated == 1)]) +\n",
    "         geom_smooth(method='lm', data=arrests_sub2[(arrests_sub2.YEAR > 2010) & \n",
    "                                                     (arrests_sub2.treated == 0)])\n",
    " )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 7\n",
    "\n",
    "While we can estimate the model described above precisely as a regression, it's actually much easier to estimate a more flexible model by running the regression we ran in Exercise 5 but with both `county` and `year` fixed effects. Use `PanelOLS` (or `lfe` in R) to estimate this fixed effects regression. \n",
    "\n",
    "With all these additional fixed effects, do you find evidence that marijuana legalization reduced violent crime?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:           violent_rate   R-squared:                        0.0532\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.0423\n",
      "No. Observations:                 754   R-squared (Within):               0.1382\n",
      "Date:                Tue, Feb 25 2020   R-squared (Overall):             -0.0381\n",
      "Time:                        17:49:12   Log-likelihood                   -4091.4\n",
      "Cov. Estimator:            Unadjusted                                           \n",
      "                                        F-statistic:                      38.379\n",
      "Entities:                          58   P-value                           0.0000\n",
      "Avg Obs:                       13.000   Distribution:                   F(1,683)\n",
      "Min Obs:                       13.000                                           \n",
      "Max Obs:                       13.000   F-statistic (robust):             38.379\n",
      "                                        P-value                           0.0000\n",
      "Time periods:                      13   Distribution:                   F(1,683)\n",
      "Avg Obs:                       58.000                                           \n",
      "Min Obs:                       58.000                                           \n",
      "Max Obs:                       58.000                                           \n",
      "                                                                                \n",
      "                                 Parameter Estimates                                 \n",
      "=====================================================================================\n",
      "                   Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "-------------------------------------------------------------------------------------\n",
      "treated:post_2010    -61.890     9.9903    -6.1951     0.0000     -81.506     -42.275\n",
      "=====================================================================================\n",
      "\n",
      "F-test for Poolability: 43.740\n",
      "P-value: 0.0000\n",
      "Distribution: F(69,683)\n",
      "\n",
      "Included effects: Entity, Time\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/linearmodels/panel/model.py:1316: AbsorbingEffectWarning: \n",
      "Variables have been fully absorbed and have removed from the regression:\n",
      "\n",
      "treated, post_2010\n",
      "\n",
      "  AbsorbingEffectWarning)\n"
     ]
    }
   ],
   "source": [
    "from linearmodels import PanelOLS\n",
    "\n",
    "arrests_for_panelols = arrests_sub2.set_index(['COUNTY', 'YEAR'])\n",
    "\n",
    "# model with state fixed effect\n",
    "mod = PanelOLS.from_formula('violent_rate ~ treated * post_2010 + TimeEffects + EntityEffects',\n",
    "                            data=arrests_for_panelols,\n",
    "                            drop_absorbed=True)\n",
    "print(mod.fit())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
