{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Interpreting Indicator Variables\n",
    "\n",
    "\n",
    "In this exercise we'll work with a (somewhat canonical) dataset on the prices, mileages, weights, and other characteristics of 74 automobiles. These data originally came from the April 1979 issue of Consumer Reports and from the United States Government EPA statistics on fuel consumption; they were compiled and published by Chambers et al. (1983).\n",
    "\n",
    "To get the data, follow [this link](https://github.com/nickeubank/MIDS_Data/blob/master/automobile_dataset.dta?raw=true) or go to [http://www.github.com/nickeubank/MIDS_Data](http://www.github.com/nickeubank/MIDS_Data) and download the `automobile_dataset.dta` file. This is a canonical example dataset used in coding examples all over the internet, and the codebook is roughly:\n",
    "\n",
    "```\n",
    "make            Make and Model\n",
    "price           Price\n",
    "mpg             Mileage (mpg)\n",
    "rep78           Repair Record 1978\n",
    "headroom        Headroom (in.)\n",
    "trunk           Trunk space (cu. ft.)\n",
    "weight          Weight (lbs.)\n",
    "length          Length (in.)\n",
    "turn            Turn Circle (ft.)\n",
    "displacement    Displacement (cu. in.)\n",
    "gear_ratio      Gear Ratio\n",
    "foreign         Car type\n",
    "```\n",
    "\n",
    "\n",
    "## Indicator Variables and Omitted Variable Bias\n",
    "\n",
    "### Exercise 1\n",
    "\n",
    "Create a new variable named `guzzler` that takes the value of 1 if the car's miles per gallon (`mpg`) is less than 18 and takes value 0 otherwise (\"guzzler\" is a term for a car that consumes gas very quickly, or \"guzzles gas\"). Regress `price` on `guzzler` and interpret the coefficients. Do gas guzzlers cost more than the other cars? How much more?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>49</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>make</th>\n",
       "      <td>Pont. Le Mans</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>4723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mpg</th>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rep78</th>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>headroom</th>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trunk</th>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weight</th>\n",
       "      <td>3200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>length</th>\n",
       "      <td>199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>turn</th>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>displacement</th>\n",
       "      <td>231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gear_ratio</th>\n",
       "      <td>2.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>foreign</th>\n",
       "      <td>Domestic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         49\n",
       "make          Pont. Le Mans\n",
       "price                  4723\n",
       "mpg                      19\n",
       "rep78                   3.0\n",
       "headroom                3.5\n",
       "trunk                    17\n",
       "weight                 3200\n",
       "length                  199\n",
       "turn                     40\n",
       "displacement            231\n",
       "gear_ratio             2.93\n",
       "foreign            Domestic"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "cars = pd.read_stata(\n",
    "    \"https://github.com/nickeubank/MIDS_Data/\"\n",
    "    \"blob/master/automobile_dataset.dta?raw=true\"\n",
    ")\n",
    "cars.sample().T\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.379</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.370</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   43.90</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 28 Feb 2023</td> <th>  Prob (F-statistic):</th> <td>5.38e-09</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:49:05</td>     <th>  Log-Likelihood:    </th> <td> -678.10</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    74</td>      <th>  AIC:               </th> <td>   1360.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    72</td>      <th>  BIC:               </th> <td>   1365.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td> 5143.0893</td> <td>  312.807</td> <td>   16.442</td> <td> 0.000</td> <td> 4519.521</td> <td> 5766.658</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler</th>   <td> 4202.2440</td> <td>  634.243</td> <td>    6.626</td> <td> 0.000</td> <td> 2937.904</td> <td> 5466.584</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>37.244</td> <th>  Durbin-Watson:     </th> <td>   1.348</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 111.225</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.565</td> <th>  Prob(JB):          </th> <td>7.04e-25</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 8.126</td> <th>  Cond. No.          </th> <td>    2.50</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.379\n",
       "Model:                            OLS   Adj. R-squared:                  0.370\n",
       "Method:                 Least Squares   F-statistic:                     43.90\n",
       "Date:                Tue, 28 Feb 2023   Prob (F-statistic):           5.38e-09\n",
       "Time:                        13:49:05   Log-Likelihood:                -678.10\n",
       "No. Observations:                  74   AIC:                             1360.\n",
       "Df Residuals:                      72   BIC:                             1365.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept   5143.0893    312.807     16.442      0.000    4519.521    5766.658\n",
       "guzzler     4202.2440    634.243      6.626      0.000    2937.904    5466.584\n",
       "==============================================================================\n",
       "Omnibus:                       37.244   Durbin-Watson:                   1.348\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              111.225\n",
       "Skew:                           1.565   Prob(JB):                     7.04e-25\n",
       "Kurtosis:                       8.126   Cond. No.                         2.50\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cars[\"guzzler\"] = (cars.mpg < 18).astype(\"int\")\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "smf.ols(\"price ~ guzzler\", cars).fit().summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4,202 dollars more on average.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 2\n",
    "\n",
    "Create a scatter plot of `price` against `weight` and color code your markers by the value of `guzzler` (red for `guzzler` = 1 and green for `guzzler` = 0). \n",
    "\n",
    "Based on the graph you just created, do you think **not** controlling for `weight` might lead to omitted variable bias in the regression in Exercise 1? What is the direction of the bias?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"altair-viz-bfc997aefa3a47b4b72e41f444f2c27a\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n",
       "  (function(spec, embedOpt){\n",
       "    let outputDiv = document.currentScript.previousElementSibling;\n",
       "    if (outputDiv.id !== \"altair-viz-bfc997aefa3a47b4b72e41f444f2c27a\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-bfc997aefa3a47b4b72e41f444f2c27a\");\n",
       "    }\n",
       "    const paths = {\n",
       "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
       "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
       "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.17.0?noext\",\n",
       "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
       "    };\n",
       "\n",
       "    function maybeLoadScript(lib, version) {\n",
       "      var key = `${lib.replace(\"-\", \"\")}_version`;\n",
       "      return (VEGA_DEBUG[key] == version) ?\n",
       "        Promise.resolve(paths[lib]) :\n",
       "        new Promise(function(resolve, reject) {\n",
       "          var s = document.createElement('script');\n",
       "          document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "          s.async = true;\n",
       "          s.onload = () => {\n",
       "            VEGA_DEBUG[key] = version;\n",
       "            return resolve(paths[lib]);\n",
       "          };\n",
       "          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
       "          s.src = paths[lib];\n",
       "        });\n",
       "    }\n",
       "\n",
       "    function showError(err) {\n",
       "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
       "      throw err;\n",
       "    }\n",
       "\n",
       "    function displayChart(vegaEmbed) {\n",
       "      vegaEmbed(outputDiv, spec, embedOpt)\n",
       "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
       "    }\n",
       "\n",
       "    if(typeof define === \"function\" && define.amd) {\n",
       "      requirejs.config({paths});\n",
       "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
       "    } else {\n",
       "      maybeLoadScript(\"vega\", \"5\")\n",
       "        .then(() => maybeLoadScript(\"vega-lite\", \"4.17.0\"))\n",
       "        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n",
       "        .catch(showError)\n",
       "        .then(() => displayChart(vegaEmbed));\n",
       "    }\n",
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-87f4eff7caa8e106f2a44e4147b83052\"}, \"mark\": \"point\", \"encoding\": {\"color\": {\"field\": \"guzzler\", \"type\": \"nominal\"}, \"x\": {\"field\": \"weight\", \"scale\": {\"zero\": false}, \"type\": \"quantitative\"}, \"y\": {\"field\": \"price\", \"scale\": {\"zero\": false}, \"type\": \"quantitative\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.17.0.json\", \"datasets\": {\"data-87f4eff7caa8e106f2a44e4147b83052\": [{\"make\": \"AMC Concord\", \"price\": 4099, \"mpg\": 22, \"rep78\": 3.0, \"headroom\": 2.5, \"trunk\": 11, \"weight\": 2930, \"length\": 186, \"turn\": 40, \"displacement\": 121, \"gear_ratio\": 3.5799999237060547, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"AMC Pacer\", \"price\": 4749, \"mpg\": 17, \"rep78\": 3.0, \"headroom\": 3.0, \"trunk\": 11, \"weight\": 3350, \"length\": 173, \"turn\": 40, \"displacement\": 258, \"gear_ratio\": 2.5299999713897705, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"AMC Spirit\", \"price\": 3799, \"mpg\": 22, \"rep78\": null, \"headroom\": 3.0, \"trunk\": 12, \"weight\": 2640, \"length\": 168, \"turn\": 35, \"displacement\": 121, \"gear_ratio\": 3.0799999237060547, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Buick Century\", \"price\": 4816, \"mpg\": 20, \"rep78\": 3.0, \"headroom\": 4.5, \"trunk\": 16, \"weight\": 3250, \"length\": 196, \"turn\": 40, \"displacement\": 196, \"gear_ratio\": 2.930000066757202, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Buick Electra\", \"price\": 7827, \"mpg\": 15, \"rep78\": 4.0, \"headroom\": 4.0, \"trunk\": 20, \"weight\": 4080, \"length\": 222, \"turn\": 43, \"displacement\": 350, \"gear_ratio\": 2.4100000858306885, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Buick LeSabre\", \"price\": 5788, \"mpg\": 18, \"rep78\": 3.0, \"headroom\": 4.0, \"trunk\": 21, \"weight\": 3670, \"length\": 218, \"turn\": 43, \"displacement\": 231, \"gear_ratio\": 2.7300000190734863, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Buick Opel\", \"price\": 4453, \"mpg\": 26, \"rep78\": null, \"headroom\": 3.0, \"trunk\": 10, \"weight\": 2230, \"length\": 170, \"turn\": 34, \"displacement\": 304, \"gear_ratio\": 2.869999885559082, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Buick Regal\", \"price\": 5189, \"mpg\": 20, \"rep78\": 3.0, \"headroom\": 2.0, \"trunk\": 16, \"weight\": 3280, \"length\": 200, \"turn\": 42, \"displacement\": 196, \"gear_ratio\": 2.930000066757202, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Buick Riviera\", \"price\": 10372, \"mpg\": 16, \"rep78\": 3.0, \"headroom\": 3.5, \"trunk\": 17, \"weight\": 3880, \"length\": 207, \"turn\": 43, \"displacement\": 231, \"gear_ratio\": 2.930000066757202, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Buick Skylark\", \"price\": 4082, \"mpg\": 19, \"rep78\": 3.0, \"headroom\": 3.5, \"trunk\": 13, \"weight\": 3400, \"length\": 200, \"turn\": 42, \"displacement\": 231, \"gear_ratio\": 3.0799999237060547, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Cad. Deville\", \"price\": 11385, \"mpg\": 14, \"rep78\": 3.0, \"headroom\": 4.0, \"trunk\": 20, \"weight\": 4330, \"length\": 221, \"turn\": 44, \"displacement\": 425, \"gear_ratio\": 2.2799999713897705, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Cad. Eldorado\", \"price\": 14500, \"mpg\": 14, \"rep78\": 2.0, \"headroom\": 3.5, \"trunk\": 16, \"weight\": 3900, \"length\": 204, \"turn\": 43, \"displacement\": 350, \"gear_ratio\": 2.190000057220459, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Cad. Seville\", \"price\": 15906, \"mpg\": 21, \"rep78\": 3.0, \"headroom\": 3.0, \"trunk\": 13, \"weight\": 4290, \"length\": 204, \"turn\": 45, \"displacement\": 350, \"gear_ratio\": 2.240000009536743, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Chev. Chevette\", \"price\": 3299, \"mpg\": 29, \"rep78\": 3.0, \"headroom\": 2.5, \"trunk\": 9, \"weight\": 2110, \"length\": 163, \"turn\": 34, \"displacement\": 231, \"gear_ratio\": 2.930000066757202, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Chev. Impala\", \"price\": 5705, \"mpg\": 16, \"rep78\": 4.0, \"headroom\": 4.0, \"trunk\": 20, \"weight\": 3690, \"length\": 212, \"turn\": 43, \"displacement\": 250, \"gear_ratio\": 2.559999942779541, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Chev. Malibu\", \"price\": 4504, \"mpg\": 22, \"rep78\": 3.0, \"headroom\": 3.5, \"trunk\": 17, \"weight\": 3180, \"length\": 193, \"turn\": 31, \"displacement\": 200, \"gear_ratio\": 2.7300000190734863, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Chev. Monte Carlo\", \"price\": 5104, \"mpg\": 22, \"rep78\": 2.0, \"headroom\": 2.0, \"trunk\": 16, \"weight\": 3220, \"length\": 200, \"turn\": 41, \"displacement\": 200, \"gear_ratio\": 2.7300000190734863, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Chev. Monza\", \"price\": 3667, \"mpg\": 24, \"rep78\": 2.0, \"headroom\": 2.0, \"trunk\": 7, \"weight\": 2750, \"length\": 179, \"turn\": 40, \"displacement\": 151, \"gear_ratio\": 2.7300000190734863, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Chev. Nova\", \"price\": 3955, \"mpg\": 19, \"rep78\": 3.0, \"headroom\": 3.5, \"trunk\": 13, \"weight\": 3430, \"length\": 197, \"turn\": 43, \"displacement\": 250, \"gear_ratio\": 2.559999942779541, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Dodge Colt\", \"price\": 3984, \"mpg\": 30, \"rep78\": 5.0, \"headroom\": 2.0, \"trunk\": 8, \"weight\": 2120, \"length\": 163, \"turn\": 35, \"displacement\": 98, \"gear_ratio\": 3.5399999618530273, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Dodge Diplomat\", \"price\": 4010, \"mpg\": 18, \"rep78\": 2.0, \"headroom\": 4.0, \"trunk\": 17, \"weight\": 3600, \"length\": 206, \"turn\": 46, \"displacement\": 318, \"gear_ratio\": 2.4700000286102295, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Dodge Magnum\", \"price\": 5886, \"mpg\": 16, \"rep78\": 2.0, \"headroom\": 4.0, \"trunk\": 17, \"weight\": 3600, \"length\": 206, \"turn\": 46, \"displacement\": 318, \"gear_ratio\": 2.4700000286102295, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Dodge St. Regis\", \"price\": 6342, \"mpg\": 17, \"rep78\": 2.0, \"headroom\": 4.5, \"trunk\": 21, \"weight\": 3740, \"length\": 220, \"turn\": 46, \"displacement\": 225, \"gear_ratio\": 2.940000057220459, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Ford Fiesta\", \"price\": 4389, \"mpg\": 28, \"rep78\": 4.0, \"headroom\": 1.5, \"trunk\": 9, \"weight\": 1800, \"length\": 147, \"turn\": 33, \"displacement\": 98, \"gear_ratio\": 3.1500000953674316, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Ford Mustang\", \"price\": 4187, \"mpg\": 21, \"rep78\": 3.0, \"headroom\": 2.0, \"trunk\": 10, \"weight\": 2650, \"length\": 179, \"turn\": 43, \"displacement\": 140, \"gear_ratio\": 3.0799999237060547, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Linc. Continental\", \"price\": 11497, \"mpg\": 12, \"rep78\": 3.0, \"headroom\": 3.5, \"trunk\": 22, \"weight\": 4840, \"length\": 233, \"turn\": 51, \"displacement\": 400, \"gear_ratio\": 2.4700000286102295, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Linc. Mark V\", \"price\": 13594, \"mpg\": 12, \"rep78\": 3.0, \"headroom\": 2.5, \"trunk\": 18, \"weight\": 4720, \"length\": 230, \"turn\": 48, \"displacement\": 400, \"gear_ratio\": 2.4700000286102295, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Linc. Versailles\", \"price\": 13466, \"mpg\": 14, \"rep78\": 3.0, \"headroom\": 3.5, \"trunk\": 15, \"weight\": 3830, \"length\": 201, \"turn\": 41, \"displacement\": 302, \"gear_ratio\": 2.4700000286102295, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Merc. Bobcat\", \"price\": 3829, \"mpg\": 22, \"rep78\": 4.0, \"headroom\": 3.0, \"trunk\": 9, \"weight\": 2580, \"length\": 169, \"turn\": 39, \"displacement\": 140, \"gear_ratio\": 2.7300000190734863, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Merc. Cougar\", \"price\": 5379, \"mpg\": 14, \"rep78\": 4.0, \"headroom\": 3.5, \"trunk\": 16, \"weight\": 4060, \"length\": 221, \"turn\": 48, \"displacement\": 302, \"gear_ratio\": 2.75, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Merc. Marquis\", \"price\": 6165, \"mpg\": 15, \"rep78\": 3.0, \"headroom\": 3.5, \"trunk\": 23, \"weight\": 3720, \"length\": 212, \"turn\": 44, \"displacement\": 302, \"gear_ratio\": 2.259999990463257, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Merc. Monarch\", \"price\": 4516, \"mpg\": 18, \"rep78\": 3.0, \"headroom\": 3.0, \"trunk\": 15, \"weight\": 3370, \"length\": 198, \"turn\": 41, \"displacement\": 250, \"gear_ratio\": 2.430000066757202, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Merc. XR-7\", \"price\": 6303, \"mpg\": 14, \"rep78\": 4.0, \"headroom\": 3.0, \"trunk\": 16, \"weight\": 4130, \"length\": 217, \"turn\": 45, \"displacement\": 302, \"gear_ratio\": 2.75, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Merc. Zephyr\", \"price\": 3291, \"mpg\": 20, \"rep78\": 3.0, \"headroom\": 3.5, \"trunk\": 17, \"weight\": 2830, \"length\": 195, \"turn\": 43, \"displacement\": 140, \"gear_ratio\": 3.0799999237060547, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Olds 98\", \"price\": 8814, \"mpg\": 21, \"rep78\": 4.0, \"headroom\": 4.0, \"trunk\": 20, \"weight\": 4060, \"length\": 220, \"turn\": 43, \"displacement\": 350, \"gear_ratio\": 2.4100000858306885, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Olds Cutl Supr\", \"price\": 5172, \"mpg\": 19, \"rep78\": 3.0, \"headroom\": 2.0, \"trunk\": 16, \"weight\": 3310, \"length\": 198, \"turn\": 42, \"displacement\": 231, \"gear_ratio\": 2.930000066757202, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Olds Cutlass\", \"price\": 4733, \"mpg\": 19, \"rep78\": 3.0, \"headroom\": 4.5, \"trunk\": 16, \"weight\": 3300, \"length\": 198, \"turn\": 42, \"displacement\": 231, \"gear_ratio\": 2.930000066757202, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Olds Delta 88\", \"price\": 4890, \"mpg\": 18, \"rep78\": 4.0, \"headroom\": 4.0, \"trunk\": 20, \"weight\": 3690, \"length\": 218, \"turn\": 42, \"displacement\": 231, \"gear_ratio\": 2.7300000190734863, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Olds Omega\", \"price\": 4181, \"mpg\": 19, \"rep78\": 3.0, \"headroom\": 4.5, \"trunk\": 14, \"weight\": 3370, \"length\": 200, \"turn\": 43, \"displacement\": 231, \"gear_ratio\": 3.0799999237060547, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Olds Starfire\", \"price\": 4195, \"mpg\": 24, \"rep78\": 1.0, \"headroom\": 2.0, \"trunk\": 10, \"weight\": 2730, \"length\": 180, \"turn\": 40, \"displacement\": 151, \"gear_ratio\": 2.7300000190734863, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Olds Toronado\", \"price\": 10371, \"mpg\": 16, \"rep78\": 3.0, \"headroom\": 3.5, \"trunk\": 17, \"weight\": 4030, \"length\": 206, \"turn\": 43, \"displacement\": 350, \"gear_ratio\": 2.4100000858306885, \"foreign\": \"Domestic\", \"guzzler\": 1}, {\"make\": \"Plym. Arrow\", \"price\": 4647, \"mpg\": 28, \"rep78\": 3.0, \"headroom\": 2.0, \"trunk\": 11, \"weight\": 3260, \"length\": 170, \"turn\": 37, \"displacement\": 156, \"gear_ratio\": 3.049999952316284, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Plym. Champ\", \"price\": 4425, \"mpg\": 34, \"rep78\": 5.0, \"headroom\": 2.5, \"trunk\": 11, \"weight\": 1800, \"length\": 157, \"turn\": 37, \"displacement\": 86, \"gear_ratio\": 2.9700000286102295, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Plym. Horizon\", \"price\": 4482, \"mpg\": 25, \"rep78\": 3.0, \"headroom\": 4.0, \"trunk\": 17, \"weight\": 2200, \"length\": 165, \"turn\": 36, \"displacement\": 105, \"gear_ratio\": 3.369999885559082, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Plym. Sapporo\", \"price\": 6486, \"mpg\": 26, \"rep78\": null, \"headroom\": 1.5, \"trunk\": 8, \"weight\": 2520, \"length\": 182, \"turn\": 38, \"displacement\": 119, \"gear_ratio\": 3.5399999618530273, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Plym. Volare\", \"price\": 4060, \"mpg\": 18, \"rep78\": 2.0, \"headroom\": 5.0, \"trunk\": 16, \"weight\": 3330, \"length\": 201, \"turn\": 44, \"displacement\": 225, \"gear_ratio\": 3.2300000190734863, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Pont. Catalina\", \"price\": 5798, \"mpg\": 18, \"rep78\": 4.0, \"headroom\": 4.0, \"trunk\": 20, \"weight\": 3700, \"length\": 214, \"turn\": 42, \"displacement\": 231, \"gear_ratio\": 2.7300000190734863, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Pont. Firebird\", \"price\": 4934, \"mpg\": 18, \"rep78\": 1.0, \"headroom\": 1.5, \"trunk\": 7, \"weight\": 3470, \"length\": 198, \"turn\": 42, \"displacement\": 231, \"gear_ratio\": 3.0799999237060547, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Pont. Grand Prix\", \"price\": 5222, \"mpg\": 19, \"rep78\": 3.0, \"headroom\": 2.0, \"trunk\": 16, \"weight\": 3210, \"length\": 201, \"turn\": 45, \"displacement\": 231, \"gear_ratio\": 2.930000066757202, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Pont. Le Mans\", \"price\": 4723, \"mpg\": 19, \"rep78\": 3.0, \"headroom\": 3.5, \"trunk\": 17, \"weight\": 3200, \"length\": 199, \"turn\": 40, \"displacement\": 231, \"gear_ratio\": 2.930000066757202, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Pont. Phoenix\", \"price\": 4424, \"mpg\": 19, \"rep78\": null, \"headroom\": 3.5, \"trunk\": 13, \"weight\": 3420, \"length\": 203, \"turn\": 43, \"displacement\": 231, \"gear_ratio\": 3.0799999237060547, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Pont. Sunbird\", \"price\": 4172, \"mpg\": 24, \"rep78\": 2.0, \"headroom\": 2.0, \"trunk\": 7, \"weight\": 2690, \"length\": 179, \"turn\": 41, \"displacement\": 151, \"gear_ratio\": 2.7300000190734863, \"foreign\": \"Domestic\", \"guzzler\": 0}, {\"make\": \"Audi 5000\", \"price\": 9690, \"mpg\": 17, \"rep78\": 5.0, \"headroom\": 3.0, \"trunk\": 15, \"weight\": 2830, \"length\": 189, \"turn\": 37, \"displacement\": 131, \"gear_ratio\": 3.200000047683716, \"foreign\": \"Foreign\", \"guzzler\": 1}, {\"make\": \"Audi Fox\", \"price\": 6295, \"mpg\": 23, \"rep78\": 3.0, \"headroom\": 2.5, \"trunk\": 11, \"weight\": 2070, \"length\": 174, \"turn\": 36, \"displacement\": 97, \"gear_ratio\": 3.700000047683716, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"BMW 320i\", \"price\": 9735, \"mpg\": 25, \"rep78\": 4.0, \"headroom\": 2.5, \"trunk\": 12, \"weight\": 2650, \"length\": 177, \"turn\": 34, \"displacement\": 121, \"gear_ratio\": 3.640000104904175, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Datsun 200\", \"price\": 6229, \"mpg\": 23, \"rep78\": 4.0, \"headroom\": 1.5, \"trunk\": 6, \"weight\": 2370, \"length\": 170, \"turn\": 35, \"displacement\": 119, \"gear_ratio\": 3.890000104904175, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Datsun 210\", \"price\": 4589, \"mpg\": 35, \"rep78\": 5.0, \"headroom\": 2.0, \"trunk\": 8, \"weight\": 2020, \"length\": 165, \"turn\": 32, \"displacement\": 85, \"gear_ratio\": 3.700000047683716, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Datsun 510\", \"price\": 5079, \"mpg\": 24, \"rep78\": 4.0, \"headroom\": 2.5, \"trunk\": 8, \"weight\": 2280, \"length\": 170, \"turn\": 34, \"displacement\": 119, \"gear_ratio\": 3.5399999618530273, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Datsun 810\", \"price\": 8129, \"mpg\": 21, \"rep78\": 4.0, \"headroom\": 2.5, \"trunk\": 8, \"weight\": 2750, \"length\": 184, \"turn\": 38, \"displacement\": 146, \"gear_ratio\": 3.549999952316284, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Fiat Strada\", \"price\": 4296, \"mpg\": 21, \"rep78\": 3.0, \"headroom\": 2.5, \"trunk\": 16, \"weight\": 2130, \"length\": 161, \"turn\": 36, \"displacement\": 105, \"gear_ratio\": 3.369999885559082, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Honda Accord\", \"price\": 5799, \"mpg\": 25, \"rep78\": 5.0, \"headroom\": 3.0, \"trunk\": 10, \"weight\": 2240, \"length\": 172, \"turn\": 36, \"displacement\": 107, \"gear_ratio\": 3.049999952316284, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Honda Civic\", \"price\": 4499, \"mpg\": 28, \"rep78\": 4.0, \"headroom\": 2.5, \"trunk\": 5, \"weight\": 1760, \"length\": 149, \"turn\": 34, \"displacement\": 91, \"gear_ratio\": 3.299999952316284, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Mazda GLC\", \"price\": 3995, \"mpg\": 30, \"rep78\": 4.0, \"headroom\": 3.5, \"trunk\": 11, \"weight\": 1980, \"length\": 154, \"turn\": 33, \"displacement\": 86, \"gear_ratio\": 3.7300000190734863, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Peugeot 604\", \"price\": 12990, \"mpg\": 14, \"rep78\": null, \"headroom\": 3.5, \"trunk\": 14, \"weight\": 3420, \"length\": 192, \"turn\": 38, \"displacement\": 163, \"gear_ratio\": 3.5799999237060547, \"foreign\": \"Foreign\", \"guzzler\": 1}, {\"make\": \"Renault Le Car\", \"price\": 3895, \"mpg\": 26, \"rep78\": 3.0, \"headroom\": 3.0, \"trunk\": 10, \"weight\": 1830, \"length\": 142, \"turn\": 34, \"displacement\": 79, \"gear_ratio\": 3.7200000286102295, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Subaru\", \"price\": 3798, \"mpg\": 35, \"rep78\": 5.0, \"headroom\": 2.5, \"trunk\": 11, \"weight\": 2050, \"length\": 164, \"turn\": 36, \"displacement\": 97, \"gear_ratio\": 3.809999942779541, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Toyota Celica\", \"price\": 5899, \"mpg\": 18, \"rep78\": 5.0, \"headroom\": 2.5, \"trunk\": 14, \"weight\": 2410, \"length\": 174, \"turn\": 36, \"displacement\": 134, \"gear_ratio\": 3.059999942779541, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Toyota Corolla\", \"price\": 3748, \"mpg\": 31, \"rep78\": 5.0, \"headroom\": 3.0, \"trunk\": 9, \"weight\": 2200, \"length\": 165, \"turn\": 35, \"displacement\": 97, \"gear_ratio\": 3.2100000381469727, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Toyota Corona\", \"price\": 5719, \"mpg\": 18, \"rep78\": 5.0, \"headroom\": 2.0, \"trunk\": 11, \"weight\": 2670, \"length\": 175, \"turn\": 36, \"displacement\": 134, \"gear_ratio\": 3.049999952316284, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"VW Dasher\", \"price\": 7140, \"mpg\": 23, \"rep78\": 4.0, \"headroom\": 2.5, \"trunk\": 12, \"weight\": 2160, \"length\": 172, \"turn\": 36, \"displacement\": 97, \"gear_ratio\": 3.740000009536743, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"VW Diesel\", \"price\": 5397, \"mpg\": 41, \"rep78\": 5.0, \"headroom\": 3.0, \"trunk\": 15, \"weight\": 2040, \"length\": 155, \"turn\": 35, \"displacement\": 90, \"gear_ratio\": 3.7799999713897705, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"VW Rabbit\", \"price\": 4697, \"mpg\": 25, \"rep78\": 4.0, \"headroom\": 3.0, \"trunk\": 15, \"weight\": 1930, \"length\": 155, \"turn\": 35, \"displacement\": 89, \"gear_ratio\": 3.7799999713897705, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"VW Scirocco\", \"price\": 6850, \"mpg\": 25, \"rep78\": 4.0, \"headroom\": 2.0, \"trunk\": 16, \"weight\": 1990, \"length\": 156, \"turn\": 36, \"displacement\": 97, \"gear_ratio\": 3.7799999713897705, \"foreign\": \"Foreign\", \"guzzler\": 0}, {\"make\": \"Volvo 260\", \"price\": 11995, \"mpg\": 17, \"rep78\": 5.0, \"headroom\": 2.5, \"trunk\": 14, \"weight\": 3170, \"length\": 193, \"turn\": 37, \"displacement\": 163, \"gear_ratio\": 2.9800000190734863, \"foreign\": \"Foreign\", \"guzzler\": 1}]}}, {\"mode\": \"vega-lite\"});\n",
       "</script>"
      ],
      "text/plain": [
       "alt.Chart(...)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import altair as alt\n",
    "\n",
    "alt.Chart(cars).encode(\n",
    "    x=alt.X(\"weight\", scale=alt.Scale(zero=False)),\n",
    "    y=alt.Y(\"price\", scale=alt.Scale(zero=False)),\n",
    "    color=\"guzzler:N\",\n",
    ").mark_point()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3\n",
    "\n",
    "Regress `price` on `guzzler`, `weight`, `foreign`, `headroom`, and `displacement`. Interpret the coefficients. Do the regression results confirm your guess in Q3?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.596</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.566</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   20.04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 28 Feb 2023</td> <th>  Prob (F-statistic):</th> <td>3.14e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:49:05</td>     <th>  Log-Likelihood:    </th> <td> -662.20</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    74</td>      <th>  AIC:               </th> <td>   1336.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    68</td>      <th>  BIC:               </th> <td>   1350.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     5</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>          <td> -782.5353</td> <td> 1612.628</td> <td>   -0.485</td> <td> 0.629</td> <td>-4000.484</td> <td> 2435.414</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]</th> <td> 3278.9827</td> <td>  671.826</td> <td>    4.881</td> <td> 0.000</td> <td> 1938.375</td> <td> 4619.591</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler</th>            <td> 1977.1796</td> <td>  711.055</td> <td>    2.781</td> <td> 0.007</td> <td>  558.291</td> <td> 3396.068</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>weight</th>             <td>    1.9634</td> <td>    0.702</td> <td>    2.797</td> <td> 0.007</td> <td>    0.563</td> <td>    3.364</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>headroom</th>           <td> -736.7997</td> <td>  309.009</td> <td>   -2.384</td> <td> 0.020</td> <td>-1353.418</td> <td> -120.182</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>displacement</th>       <td>    8.9667</td> <td>    5.819</td> <td>    1.541</td> <td> 0.128</td> <td>   -2.646</td> <td>   20.579</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>22.179</td> <th>  Durbin-Watson:     </th> <td>   1.409</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  37.284</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.118</td> <th>  Prob(JB):          </th> <td>8.01e-09</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.663</td> <th>  Cond. No.          </th> <td>2.36e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 2.36e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.596\n",
       "Model:                            OLS   Adj. R-squared:                  0.566\n",
       "Method:                 Least Squares   F-statistic:                     20.04\n",
       "Date:                Tue, 28 Feb 2023   Prob (F-statistic):           3.14e-12\n",
       "Time:                        13:49:05   Log-Likelihood:                -662.20\n",
       "No. Observations:                  74   AIC:                             1336.\n",
       "Df Residuals:                      68   BIC:                             1350.\n",
       "Df Model:                           5                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "Intercept           -782.5353   1612.628     -0.485      0.629   -4000.484    2435.414\n",
       "foreign[T.Foreign]  3278.9827    671.826      4.881      0.000    1938.375    4619.591\n",
       "guzzler             1977.1796    711.055      2.781      0.007     558.291    3396.068\n",
       "weight                 1.9634      0.702      2.797      0.007       0.563       3.364\n",
       "headroom            -736.7997    309.009     -2.384      0.020   -1353.418    -120.182\n",
       "displacement           8.9667      5.819      1.541      0.128      -2.646      20.579\n",
       "==============================================================================\n",
       "Omnibus:                       22.179   Durbin-Watson:                   1.409\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               37.284\n",
       "Skew:                           1.118   Prob(JB):                     8.01e-09\n",
       "Kurtosis:                       5.663   Cond. No.                     2.36e+04\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 2.36e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols(\n",
    "    \"price ~ guzzler + weight + foreign + headroom + displacement\", cars\n",
    ").fit().summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# After taking into account weight and other factors,\n",
    "# guzzlers are no only about 2,000 more expensive because,\n",
    "# as we see, as weight increases, so does prices (price increases by 2 dollars\n",
    "# for ).\n",
    "\n",
    "# This does show that weight and being a guzzler were positively correlated,\n",
    "# and the \"guzzler\" price difference in our first regression was capturing\n",
    "# the actual \"guzzler\" difference, but also the fact that bigger cars\n",
    "# are more expensive AND tend to be guzzlers.\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 4\n",
    "\n",
    "Variable `rep78` indicates the car's repair record. The variable is poorly documented (we don't know that the value means) but take our word for it that the values from 1-5 indicate \"very poor\", \"poor\", \"acceptable\", \"good\", and \"very good\" record, respectively. \n",
    "\n",
    "Regress `price` on indicators for the different categories of `rep78`. Also control for `headroom`, `weight`, `foreign`, and `displacement`. Interpret the coefficients on the indicator for `rep78 == 3`.\n",
    "\n",
    "(Note: You can use the `C()` method for creating indicator variables, but your answers will only be right if the omitted category is `rep78 == 1`).\n",
    "\n",
    "(Note: If you create indicators manually, beware how Python deals with equality tests with missing values (e.g., `np.nan == 1`), or you may inadvertently \"create\" data out of thin air!)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.593</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.531</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   9.557</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 28 Feb 2023</td> <th>  Prob (F-statistic):</th> <td>8.11e-09</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:49:05</td>     <th>  Log-Likelihood:    </th> <td> -616.77</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    69</td>      <th>  AIC:               </th> <td>   1254.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    59</td>      <th>  BIC:               </th> <td>   1276.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     9</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>          <td>-1852.4340</td> <td> 2284.628</td> <td>   -0.811</td> <td> 0.421</td> <td>-6423.964</td> <td> 2719.096</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(rep78)[T.2.0]</th>    <td>  951.3308</td> <td> 1676.704</td> <td>    0.567</td> <td> 0.573</td> <td>-2403.746</td> <td> 4306.408</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(rep78)[T.3.0]</th>    <td> 1352.9162</td> <td> 1539.781</td> <td>    0.879</td> <td> 0.383</td> <td>-1728.179</td> <td> 4434.011</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(rep78)[T.4.0]</th>    <td>  994.5742</td> <td> 1609.415</td> <td>    0.618</td> <td> 0.539</td> <td>-2225.857</td> <td> 4215.006</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(rep78)[T.5.0]</th>    <td> 1325.1545</td> <td> 1705.943</td> <td>    0.777</td> <td> 0.440</td> <td>-2088.429</td> <td> 4738.738</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]</th> <td> 3240.0049</td> <td>  807.012</td> <td>    4.015</td> <td> 0.000</td> <td> 1625.177</td> <td> 4854.833</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler</th>            <td> 1644.4650</td> <td>  769.925</td> <td>    2.136</td> <td> 0.037</td> <td>  103.848</td> <td> 3185.082</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>weight</th>             <td>    1.7544</td> <td>    0.883</td> <td>    1.988</td> <td> 0.051</td> <td>   -0.012</td> <td>    3.520</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>headroom</th>           <td> -755.1823</td> <td>  341.695</td> <td>   -2.210</td> <td> 0.031</td> <td>-1438.912</td> <td>  -71.452</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>displacement</th>       <td>   12.0412</td> <td>    7.472</td> <td>    1.612</td> <td> 0.112</td> <td>   -2.910</td> <td>   26.992</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>21.610</td> <th>  Durbin-Watson:     </th> <td>   1.430</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  33.697</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.181</td> <th>  Prob(JB):          </th> <td>4.82e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.478</td> <th>  Cond. No.          </th> <td>4.54e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 4.54e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.593\n",
       "Model:                            OLS   Adj. R-squared:                  0.531\n",
       "Method:                 Least Squares   F-statistic:                     9.557\n",
       "Date:                Tue, 28 Feb 2023   Prob (F-statistic):           8.11e-09\n",
       "Time:                        13:49:05   Log-Likelihood:                -616.77\n",
       "No. Observations:                  69   AIC:                             1254.\n",
       "Df Residuals:                      59   BIC:                             1276.\n",
       "Df Model:                           9                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "Intercept          -1852.4340   2284.628     -0.811      0.421   -6423.964    2719.096\n",
       "C(rep78)[T.2.0]      951.3308   1676.704      0.567      0.573   -2403.746    4306.408\n",
       "C(rep78)[T.3.0]     1352.9162   1539.781      0.879      0.383   -1728.179    4434.011\n",
       "C(rep78)[T.4.0]      994.5742   1609.415      0.618      0.539   -2225.857    4215.006\n",
       "C(rep78)[T.5.0]     1325.1545   1705.943      0.777      0.440   -2088.429    4738.738\n",
       "foreign[T.Foreign]  3240.0049    807.012      4.015      0.000    1625.177    4854.833\n",
       "guzzler             1644.4650    769.925      2.136      0.037     103.848    3185.082\n",
       "weight                 1.7544      0.883      1.988      0.051      -0.012       3.520\n",
       "headroom            -755.1823    341.695     -2.210      0.031   -1438.912     -71.452\n",
       "displacement          12.0412      7.472      1.612      0.112      -2.910      26.992\n",
       "==============================================================================\n",
       "Omnibus:                       21.610   Durbin-Watson:                   1.430\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               33.697\n",
       "Skew:                           1.181   Prob(JB):                     4.82e-08\n",
       "Kurtosis:                       5.478   Cond. No.                     4.54e+04\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 4.54e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols(\n",
    "    \"price ~ C(rep78) + guzzler + weight + foreign + headroom + displacement\", cars\n",
    ").fit().summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The coefficient on rep78 == 3 (C(rep78)[T.3.0])\n",
    "# says that an \"acceptable\" car is worth about 1,353 dollars\n",
    "# more than a \"very poor\" quality car, after controlling for\n",
    "# other attributes.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interaction Effects\n",
    "\n",
    "### Exercise 5\n",
    "\n",
    "You suspect that the effect of `guzzler` on `price` may be conditioned by whether or not the car is manufactured abroad. Regress `price` on `guzzler`, `foreign` **and their interaction,** controlling for `headroom`, `weight` and `displacement`. Without using mathematical language, explain to your grandma what the coefficient on the interaction term means."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.415</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.390</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   16.53</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 28 Feb 2023</td> <th>  Prob (F-statistic):</th> <td>3.20e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:49:12</td>     <th>  Log-Likelihood:    </th> <td> -675.89</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    74</td>      <th>  AIC:               </th> <td>   1360.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    70</td>      <th>  BIC:               </th> <td>   1369.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "               <td></td>                 <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                  <td> 4925.0000</td> <td>  378.835</td> <td>   13.000</td> <td> 0.000</td> <td> 4169.438</td> <td> 5680.562</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]</th>         <td>  642.7895</td> <td>  650.380</td> <td>    0.988</td> <td> 0.326</td> <td> -654.352</td> <td> 1939.931</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler</th>                    <td> 3977.7333</td> <td>  705.352</td> <td>    5.639</td> <td> 0.000</td> <td> 2570.953</td> <td> 5384.513</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler:foreign[T.Foreign]</th> <td> 2012.8105</td> <td> 1595.941</td> <td>    1.261</td> <td> 0.211</td> <td>-1170.193</td> <td> 5195.814</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>47.269</td> <th>  Durbin-Watson:     </th> <td>   1.353</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 182.153</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.940</td> <th>  Prob(JB):          </th> <td>2.79e-40</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 9.635</td> <th>  Cond. No.          </th> <td>    6.73</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.415\n",
       "Model:                            OLS   Adj. R-squared:                  0.390\n",
       "Method:                 Least Squares   F-statistic:                     16.53\n",
       "Date:                Tue, 28 Feb 2023   Prob (F-statistic):           3.20e-08\n",
       "Time:                        13:49:12   Log-Likelihood:                -675.89\n",
       "No. Observations:                  74   AIC:                             1360.\n",
       "Df Residuals:                      70   BIC:                             1369.\n",
       "Df Model:                           3                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================================\n",
       "                                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------------------\n",
       "Intercept                   4925.0000    378.835     13.000      0.000    4169.438    5680.562\n",
       "foreign[T.Foreign]           642.7895    650.380      0.988      0.326    -654.352    1939.931\n",
       "guzzler                     3977.7333    705.352      5.639      0.000    2570.953    5384.513\n",
       "guzzler:foreign[T.Foreign]  2012.8105   1595.941      1.261      0.211   -1170.193    5195.814\n",
       "==============================================================================\n",
       "Omnibus:                       47.269   Durbin-Watson:                   1.353\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              182.153\n",
       "Skew:                           1.940   Prob(JB):                     2.79e-40\n",
       "Kurtosis:                       9.635   Cond. No.                         6.73\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = smf.ols(\n",
    "    \"price ~ guzzler * foreign\", cars\n",
    ").fit()\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.619</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.585</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   18.15</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 01 Mar 2022</td> <th>  Prob (F-statistic):</th> <td>2.21e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>10:18:55</td>     <th>  Log-Likelihood:    </th> <td> -660.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    74</td>      <th>  AIC:               </th> <td>   1334.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    67</td>      <th>  BIC:               </th> <td>   1350.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "               <td></td>                 <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                  <td> -391.7038</td> <td> 1588.834</td> <td>   -0.247</td> <td> 0.806</td> <td>-3563.030</td> <td> 2779.622</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]</th>         <td> 2929.3402</td> <td>  679.319</td> <td>    4.312</td> <td> 0.000</td> <td> 1573.413</td> <td> 4285.267</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler</th>                    <td> 1354.9011</td> <td>  760.244</td> <td>    1.782</td> <td> 0.079</td> <td> -162.552</td> <td> 2872.354</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler:foreign[T.Foreign]</th> <td> 2797.6787</td> <td> 1381.501</td> <td>    2.025</td> <td> 0.047</td> <td>   40.190</td> <td> 5555.167</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>weight</th>                     <td>    1.6417</td> <td>    0.705</td> <td>    2.330</td> <td> 0.023</td> <td>    0.235</td> <td>    3.048</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>headroom</th>                   <td> -736.8717</td> <td>  302.195</td> <td>   -2.438</td> <td> 0.017</td> <td>-1340.056</td> <td> -133.688</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>displacement</th>               <td>   12.6296</td> <td>    5.972</td> <td>    2.115</td> <td> 0.038</td> <td>    0.710</td> <td>   24.549</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>26.353</td> <th>  Durbin-Watson:     </th> <td>   1.421</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  46.874</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.311</td> <th>  Prob(JB):          </th> <td>6.63e-11</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.885</td> <th>  Cond. No.          </th> <td>2.39e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 2.39e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.619\n",
       "Model:                            OLS   Adj. R-squared:                  0.585\n",
       "Method:                 Least Squares   F-statistic:                     18.15\n",
       "Date:                Tue, 01 Mar 2022   Prob (F-statistic):           2.21e-12\n",
       "Time:                        10:18:55   Log-Likelihood:                -660.00\n",
       "No. Observations:                  74   AIC:                             1334.\n",
       "Df Residuals:                      67   BIC:                             1350.\n",
       "Df Model:                           6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================================\n",
       "                                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------------------\n",
       "Intercept                   -391.7038   1588.834     -0.247      0.806   -3563.030    2779.622\n",
       "foreign[T.Foreign]          2929.3402    679.319      4.312      0.000    1573.413    4285.267\n",
       "guzzler                     1354.9011    760.244      1.782      0.079    -162.552    2872.354\n",
       "guzzler:foreign[T.Foreign]  2797.6787   1381.501      2.025      0.047      40.190    5555.167\n",
       "weight                         1.6417      0.705      2.330      0.023       0.235       3.048\n",
       "headroom                    -736.8717    302.195     -2.438      0.017   -1340.056    -133.688\n",
       "displacement                  12.6296      5.972      2.115      0.038       0.710      24.549\n",
       "==============================================================================\n",
       "Omnibus:                       26.353   Durbin-Watson:                   1.421\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               46.874\n",
       "Skew:                           1.311   Prob(JB):                     6.63e-11\n",
       "Kurtosis:                       5.885   Cond. No.                     2.39e+04\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 2.39e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = smf.ols(\n",
    "    \"price ~ guzzler * foreign + weight + headroom + displacement\", cars\n",
    ").fit()\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# (My grandmother passed away a long time ago, so I'll have to tell my mom...)\n",
    "# Hi Mom! How are you doing?\n",
    "# I know this is gonna sound silly, but I wanted to let you know that according\n",
    "# to an admittedly dated database on car prices,\n",
    "# gas guzzlers cost quite a bit more when the car is foreign than when\n",
    "# they're domestic.\n",
    "#\n",
    "# Or, to be more precise: guzzlers cost more than non-gas guzzlers around the world,\n",
    "# but this difference between guzzlers and non-guzzlers is about 2,797 dollars\n",
    "# greater for foreign cars than domestic cars.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 6\n",
    "\n",
    "What is the price difference between a foreign guzzler and a foreign non-guzzler?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "$4152.58\n"
     ]
    }
   ],
   "source": [
    "print(f\"${model.params['guzzler:foreign[T.Foreign]'] + model.params['guzzler']:.2f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 7\n",
    "\n",
    "What is the price difference between a domestic non-guzzler and a foreign non-guzzler?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "$2929.34\n"
     ]
    }
   ],
   "source": [
    "print(f\"${model.params['foreign[T.Foreign]']:.2f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 8\n",
    "\n",
    "Regress `price` on `foreign`, `mpg` and their interaction, controlling for `headroom`, `weight` and `displacement`. Interpret the coefficients of the main independent variables. Explain in layman terms the coefficient on the interaction term."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.599</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.564</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   16.71</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 01 Mar 2022</td> <th>  Prob (F-statistic):</th> <td>1.12e-11</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>10:18:55</td>     <th>  Log-Likelihood:    </th> <td> -661.86</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    74</td>      <th>  AIC:               </th> <td>   1338.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    67</td>      <th>  BIC:               </th> <td>   1354.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>              <td>-1.232e+04</td> <td> 4465.992</td> <td>   -2.758</td> <td> 0.007</td> <td>-2.12e+04</td> <td>-3404.206</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]</th>     <td> 1.176e+04</td> <td> 2796.011</td> <td>    4.208</td> <td> 0.000</td> <td> 6184.000</td> <td> 1.73e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>mpg</th>                    <td>  259.8139</td> <td>  109.998</td> <td>    2.362</td> <td> 0.021</td> <td>   40.257</td> <td>  479.371</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]:mpg</th> <td> -314.4806</td> <td>  109.360</td> <td>   -2.876</td> <td> 0.005</td> <td> -532.764</td> <td>  -96.197</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>weight</th>                 <td>    3.4327</td> <td>    0.856</td> <td>    4.008</td> <td> 0.000</td> <td>    1.723</td> <td>    5.142</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>headroom</th>               <td> -484.5821</td> <td>  319.958</td> <td>   -1.515</td> <td> 0.135</td> <td>-1123.222</td> <td>  154.058</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>displacement</th>           <td>   14.4670</td> <td>    5.839</td> <td>    2.478</td> <td> 0.016</td> <td>    2.813</td> <td>   26.121</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>22.563</td> <th>  Durbin-Watson:     </th> <td>   1.442</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  33.595</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.228</td> <th>  Prob(JB):          </th> <td>5.07e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.204</td> <th>  Cond. No.          </th> <td>6.89e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 6.89e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.599\n",
       "Model:                            OLS   Adj. R-squared:                  0.564\n",
       "Method:                 Least Squares   F-statistic:                     16.71\n",
       "Date:                Tue, 01 Mar 2022   Prob (F-statistic):           1.12e-11\n",
       "Time:                        10:18:55   Log-Likelihood:                -661.86\n",
       "No. Observations:                  74   AIC:                             1338.\n",
       "Df Residuals:                      67   BIC:                             1354.\n",
       "Df Model:                           6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==========================================================================================\n",
       "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------\n",
       "Intercept              -1.232e+04   4465.992     -2.758      0.007   -2.12e+04   -3404.206\n",
       "foreign[T.Foreign]      1.176e+04   2796.011      4.208      0.000    6184.000    1.73e+04\n",
       "mpg                      259.8139    109.998      2.362      0.021      40.257     479.371\n",
       "foreign[T.Foreign]:mpg  -314.4806    109.360     -2.876      0.005    -532.764     -96.197\n",
       "weight                     3.4327      0.856      4.008      0.000       1.723       5.142\n",
       "headroom                -484.5821    319.958     -1.515      0.135   -1123.222     154.058\n",
       "displacement              14.4670      5.839      2.478      0.016       2.813      26.121\n",
       "==============================================================================\n",
       "Omnibus:                       22.563   Durbin-Watson:                   1.442\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               33.595\n",
       "Skew:                           1.228   Prob(JB):                     5.07e-08\n",
       "Kurtosis:                       5.204   Cond. No.                     6.89e+04\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 6.89e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m2 = smf.ols(\"price ~ foreign * mpg + weight + headroom + displacement\", cars).fit()\n",
    "m2.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "$259.81 per mpg\n"
     ]
    }
   ],
   "source": [
    "# For domestic cars, prices go up with the car's miles per gallon\n",
    "# by:\n",
    "\n",
    "print(f\"${m2.params['mpg']:.2f} per mpg\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "$-314.48 per mpg\n"
     ]
    }
   ],
   "source": [
    "# But the \"price premium\" for milage is\n",
    "\n",
    "print(f\"${m2.params['foreign[T.Foreign]:mpg']:.2f} per mpg\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "$-54.67 per mpg\n"
     ]
    }
   ],
   "source": [
    "# lower for foreign cars than domestic cars.\n",
    "# That means that for every additional mpg, the price of a\n",
    "# foreign car changes by:\n",
    "\n",
    "print(f\"${m2.params['foreign[T.Foreign]:mpg'] + m2.params['mpg']:.2f} per mpg\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  },
  "vscode": {
   "interpreter": {
    "hash": "718fed28bf9f8c7851519acf2fb923cd655120b36de3b67253eeb0428bd33d2d"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
