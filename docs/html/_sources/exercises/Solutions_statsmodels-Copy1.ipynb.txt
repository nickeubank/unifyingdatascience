{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Maternal Smoking and Birth Weight\n",
    "\n",
    "\n",
    "For these exercises, we will borrow some data and exercises from another [MIDS course on Statistical Modeling](https://ids-702-f19.github.io/Course-Website/hw/hw-02.html):\n",
    "\n",
    "These days, it is widely understood that mothers who smoke during pregnancy risk exposing their babies to many health problems. This was not common knowledge fifty years ago. One of the first studies that addressed the issue of pregnancy and smoking was the Child Health and Development Studies, a comprehensive study of all babies born between 1960 and 1967 at the Kaiser Foundation Hospital in Oakland, CA. The original reference for the study is Yerushalmy (1964, American Journal of Obstetrics and Gynecology, pp. 505-518). The data and a summary of the study are in Nolan and Speed (2000, Stat Labs, Chapter 10) and can be found at [the book’s website.](https://www.stat.berkeley.edu/users/statlabs/)\n",
    "\n",
    "There were about 15,000 families in the study. We will only analyze a subset of the data, in particular 1236 male single births where the baby lived at least 28 days. The researchers interviewed mothers early in their pregnancy to collect information on socioeconomic and demographic characteristics, including an indicator of whether the mother smoked during pregnancy. The variables in the dataset are described in the [code book here](https://ids-702-f19.github.io/Course-Website/hw/hw-02.html). In this exercise, we will attempt to use this data to answer the following questions:\n",
    "\n",
    "1. Do mothers who smoke tend to give birth to babies with lower weights than mothers who do not smoke?\n",
    "2. What is a likely range for the difference in birth weights for smokers and non-smokers?\n",
    "3. Is there any evidence that the association between smoking and birth weight differs by mother’s race? If so, characterize those differences.\n",
    "4. Are there other interesting associations with birth weight that are worth mentioning?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(1)** Load the data \"smoking.csv\", which includes information on both biometrics of infants at birth, and information on mothers (variables prefixed with the letter \"m\"), from [this MIDS repo](https://github.com/nickeubank/MIDS_Data). (Yup, I'm giving you CLEAN DATA! I think this is the only time I've done this in this course! Enjoy it. :))."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "smoking_and_bw = pd.read_csv('https://media.githubusercontent.com/media/nickeubank/MIDS_Data/master/smoking.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>gestation</th>\n",
       "      <th>bwt.oz</th>\n",
       "      <th>parity</th>\n",
       "      <th>mrace</th>\n",
       "      <th>mage</th>\n",
       "      <th>med</th>\n",
       "      <th>mht</th>\n",
       "      <th>mpregwt</th>\n",
       "      <th>inc</th>\n",
       "      <th>smoke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4604</td>\n",
       "      <td>1598</td>\n",
       "      <td>148</td>\n",
       "      <td>116</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>66</td>\n",
       "      <td>135</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7435</td>\n",
       "      <td>1527</td>\n",
       "      <td>181</td>\n",
       "      <td>110</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>64</td>\n",
       "      <td>133</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7722</td>\n",
       "      <td>1563</td>\n",
       "      <td>204</td>\n",
       "      <td>55</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>35</td>\n",
       "      <td>3</td>\n",
       "      <td>65</td>\n",
       "      <td>140</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2026</td>\n",
       "      <td>1503</td>\n",
       "      <td>225</td>\n",
       "      <td>132</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>67</td>\n",
       "      <td>148</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3553</td>\n",
       "      <td>1638</td>\n",
       "      <td>233</td>\n",
       "      <td>105</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>34</td>\n",
       "      <td>3</td>\n",
       "      <td>61</td>\n",
       "      <td>130</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id  date  gestation  bwt.oz  parity  mrace  mage  med  mht  mpregwt  inc  \\\n",
       "0  4604  1598        148     116       7      7    28    1   66      135    2   \n",
       "1  7435  1527        181     110       7      7    27    1   64      133    1   \n",
       "2  7722  1563        204      55      11      7    35    3   65      140    6   \n",
       "3  2026  1503        225     132       4      7    28    2   67      148    3   \n",
       "4  3553  1638        233     105       4      7    34    3   61      130    3   \n",
       "\n",
       "   smoke  \n",
       "0      0  \n",
       "1      0  \n",
       "2      0  \n",
       "3      0  \n",
       "4      0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smoking_and_bw.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    466\n",
       "1    403\n",
       "Name: smoke, dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smoking_and_bw.smoke.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(2)** Start by plotting the relationship between infant weight at birth and gestation (length of pregnancy (in days) at time of birth) for both children who smoke and those who do not. Limit attention to children who reach at least 225 days of gestation (there aren't really any observations for parents who smoke for less than that, so we don't get common support). Does it seem like birthweights tend to be lower for the children of parents who smoke at a given gestational period?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "smoking_and_bw['smoke'] = pd.Categorical(smoking_and_bw['smoke'])\n",
    "import plotnine as p9\n",
    "g = (p9.ggplot(smoking_and_bw[smoking_and_bw.gestation > 225], p9.aes(x='gestation', y='bwt.oz',\n",
    "               group='smoke', color='smoke')\n",
    "              )\n",
    "     + p9.geom_point()\n",
    "     + p9.geom_smooth(method='lm')\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<ggplot: (8787045126583)>\n"
     ]
    }
   ],
   "source": [
    "print(g)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yup. Those linear models cross out past 315 days or so, but there's basically no data there, so doesn't mean much. Through the bulk of the distribution the children of smoking mothers weigh less. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(3)** Now check this relationship using `statsmodels`. Regress birthweight on gestational period and whether the infant's mother smoked. \n",
    "\n",
    "NOTE: you may hit a problem because of the name of one of your columns. You should probably be able to guess the problem given your experience with Python. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>bwt_oz</td>      <th>  R-squared:         </th> <td>   0.207</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.205</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   113.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 23 Oct 2019</td> <th>  Prob (F-statistic):</th> <td>2.15e-44</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:08:39</td>     <th>  Log-Likelihood:    </th> <td> -3645.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   869</td>      <th>  AIC:               </th> <td>   7298.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   866</td>      <th>  BIC:               </th> <td>   7312.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>  <td>   -0.0627</td> <td>    9.764</td> <td>   -0.006</td> <td> 0.995</td> <td>  -19.226</td> <td>   19.100</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>smoke[T.1]</th> <td>   -8.2049</td> <td>    1.096</td> <td>   -7.483</td> <td> 0.000</td> <td>  -10.357</td> <td>   -6.053</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>gestation</th>  <td>    0.4389</td> <td>    0.035</td> <td>   12.594</td> <td> 0.000</td> <td>    0.370</td> <td>    0.507</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 8.028</td> <th>  Durbin-Watson:     </th> <td>   1.944</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.018</td> <th>  Jarque-Bera (JB):  </th> <td>   9.319</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.141</td> <th>  Prob(JB):          </th> <td> 0.00947</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.421</td> <th>  Cond. No.          </th> <td>4.99e+03</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 4.99e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 bwt_oz   R-squared:                       0.207\n",
       "Model:                            OLS   Adj. R-squared:                  0.205\n",
       "Method:                 Least Squares   F-statistic:                     113.2\n",
       "Date:                Wed, 23 Oct 2019   Prob (F-statistic):           2.15e-44\n",
       "Time:                        20:08:39   Log-Likelihood:                -3645.8\n",
       "No. Observations:                 869   AIC:                             7298.\n",
       "Df Residuals:                     866   BIC:                             7312.\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept     -0.0627      9.764     -0.006      0.995     -19.226      19.100\n",
       "smoke[T.1]    -8.2049      1.096     -7.483      0.000     -10.357      -6.053\n",
       "gestation      0.4389      0.035     12.594      0.000       0.370       0.507\n",
       "==============================================================================\n",
       "Omnibus:                        8.028   Durbin-Watson:                   1.944\n",
       "Prob(Omnibus):                  0.018   Jarque-Bera (JB):                9.319\n",
       "Skew:                           0.141   Prob(JB):                      0.00947\n",
       "Kurtosis:                       3.421   Cond. No.                     4.99e+03\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 4.99e+03. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf \n",
    "smoking_and_bw = smoking_and_bw.rename({'bwt.oz': 'bwt_oz'}, axis='columns')\n",
    "s_and_bw_model = smf.ols('bwt_oz ~ gestation + smoke', smoking_and_bw).fit()\n",
    "s_and_bw_model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(4)** Now let's expand our model to also take into account mothers' pregnancy weight and race (make sure to treat race as a categorical variable!)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>bwt_oz</td>      <th>  R-squared:         </th> <td>   0.254</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.243</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   24.27</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 23 Oct 2019</td> <th>  Prob (F-statistic):</th> <td>4.88e-47</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:08:39</td>     <th>  Log-Likelihood:    </th> <td> -3619.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   869</td>      <th>  AIC:               </th> <td>   7265.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   856</td>      <th>  BIC:               </th> <td>   7327.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    12</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>           <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>     <td>   -5.0981</td> <td>   10.174</td> <td>   -0.501</td> <td> 0.616</td> <td>  -25.067</td> <td>   14.871</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>smoke[T.1]</th>    <td>   -8.2449</td> <td>    1.088</td> <td>   -7.577</td> <td> 0.000</td> <td>  -10.381</td> <td>   -6.109</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(mrace)[T.1]</th> <td>   -1.8575</td> <td>    2.808</td> <td>   -0.662</td> <td> 0.508</td> <td>   -7.369</td> <td>    3.654</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(mrace)[T.2]</th> <td>   -5.8558</td> <td>    3.791</td> <td>   -1.545</td> <td> 0.123</td> <td>  -13.296</td> <td>    1.584</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(mrace)[T.3]</th> <td>   -0.4178</td> <td>    2.506</td> <td>   -0.167</td> <td> 0.868</td> <td>   -5.335</td> <td>    4.500</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(mrace)[T.4]</th> <td>    0.8841</td> <td>    2.501</td> <td>    0.354</td> <td> 0.724</td> <td>   -4.024</td> <td>    5.792</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(mrace)[T.5]</th> <td>   -0.6958</td> <td>    1.787</td> <td>   -0.389</td> <td> 0.697</td> <td>   -4.204</td> <td>    2.812</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(mrace)[T.6]</th> <td>    3.9708</td> <td>    3.270</td> <td>    1.214</td> <td> 0.225</td> <td>   -2.448</td> <td>   10.389</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(mrace)[T.7]</th> <td>   -6.3358</td> <td>    1.488</td> <td>   -4.258</td> <td> 0.000</td> <td>   -9.256</td> <td>   -3.415</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(mrace)[T.8]</th> <td>   -7.5262</td> <td>    2.879</td> <td>   -2.614</td> <td> 0.009</td> <td>  -13.176</td> <td>   -1.876</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(mrace)[T.9]</th> <td>   -2.0752</td> <td>    4.145</td> <td>   -0.501</td> <td> 0.617</td> <td>  -10.211</td> <td>    6.061</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>gestation</th>     <td>    0.3979</td> <td>    0.035</td> <td>   11.422</td> <td> 0.000</td> <td>    0.330</td> <td>    0.466</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>mpregwt</th>       <td>    0.1414</td> <td>    0.027</td> <td>    5.260</td> <td> 0.000</td> <td>    0.089</td> <td>    0.194</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 9.682</td> <th>  Durbin-Watson:     </th> <td>   1.958</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.008</td> <th>  Jarque-Bera (JB):  </th> <td>  13.156</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.104</td> <th>  Prob(JB):          </th> <td> 0.00139</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.566</td> <th>  Cond. No.          </th> <td>5.89e+03</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 5.89e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 bwt_oz   R-squared:                       0.254\n",
       "Model:                            OLS   Adj. R-squared:                  0.243\n",
       "Method:                 Least Squares   F-statistic:                     24.27\n",
       "Date:                Wed, 23 Oct 2019   Prob (F-statistic):           4.88e-47\n",
       "Time:                        20:08:39   Log-Likelihood:                -3619.5\n",
       "No. Observations:                 869   AIC:                             7265.\n",
       "Df Residuals:                     856   BIC:                             7327.\n",
       "Df Model:                          12                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=================================================================================\n",
       "                    coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------\n",
       "Intercept        -5.0981     10.174     -0.501      0.616     -25.067      14.871\n",
       "smoke[T.1]       -8.2449      1.088     -7.577      0.000     -10.381      -6.109\n",
       "C(mrace)[T.1]    -1.8575      2.808     -0.662      0.508      -7.369       3.654\n",
       "C(mrace)[T.2]    -5.8558      3.791     -1.545      0.123     -13.296       1.584\n",
       "C(mrace)[T.3]    -0.4178      2.506     -0.167      0.868      -5.335       4.500\n",
       "C(mrace)[T.4]     0.8841      2.501      0.354      0.724      -4.024       5.792\n",
       "C(mrace)[T.5]    -0.6958      1.787     -0.389      0.697      -4.204       2.812\n",
       "C(mrace)[T.6]     3.9708      3.270      1.214      0.225      -2.448      10.389\n",
       "C(mrace)[T.7]    -6.3358      1.488     -4.258      0.000      -9.256      -3.415\n",
       "C(mrace)[T.8]    -7.5262      2.879     -2.614      0.009     -13.176      -1.876\n",
       "C(mrace)[T.9]    -2.0752      4.145     -0.501      0.617     -10.211       6.061\n",
       "gestation         0.3979      0.035     11.422      0.000       0.330       0.466\n",
       "mpregwt           0.1414      0.027      5.260      0.000       0.089       0.194\n",
       "==============================================================================\n",
       "Omnibus:                        9.682   Durbin-Watson:                   1.958\n",
       "Prob(Omnibus):                  0.008   Jarque-Bera (JB):               13.156\n",
       "Skew:                           0.104   Prob(JB):                      0.00139\n",
       "Kurtosis:                       3.566   Cond. No.                     5.89e+03\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 5.89e+03. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_and_bw_model2 = smf.ols('bwt_oz ~ gestation + smoke + mpregwt + C(mrace)', \n",
    "                         smoking_and_bw).fit()\n",
    "s_and_bw_model2.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(5)** Now let's test for whether there is an interaction between the mother's race and the effect of smoking. \n",
    "\n",
    "Note that race is coded as follows:\n",
    "\n",
    "```\n",
    "mrace    mother’s race or ethnicity\n",
    "         0-5= white\n",
    "         6  = mexican\n",
    "         7 = black\n",
    "         8 = asian\n",
    "         9 = mix\n",
    "         99 = unknown\n",
    "```\n",
    "\n",
    "As most variation in this data is between \"white\" and other categories, first recode race to be an indicator for white and non-white for easier interpretation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>bwt_oz</td>      <th>  R-squared:         </th> <td>   0.242</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.238</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   55.23</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 23 Oct 2019</td> <th>  Prob (F-statistic):</th> <td>7.75e-50</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:08:39</td>     <th>  Log-Likelihood:    </th> <td> -3626.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   869</td>      <th>  AIC:               </th> <td>   7264.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   863</td>      <th>  BIC:               </th> <td>   7293.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     5</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "              <td></td>                 <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                 <td>  -10.2941</td> <td>    9.969</td> <td>   -1.033</td> <td> 0.302</td> <td>  -29.861</td> <td>    9.273</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>smoke[T.1]</th>                <td>   -9.6867</td> <td>    2.080</td> <td>   -4.657</td> <td> 0.000</td> <td>  -13.769</td> <td>   -5.604</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(white)[T.True]:smoke[0]</th> <td>    4.0964</td> <td>    1.587</td> <td>    2.581</td> <td> 0.010</td> <td>    0.981</td> <td>    7.212</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(white)[T.True]:smoke[1]</th> <td>    5.8065</td> <td>    1.873</td> <td>    3.101</td> <td> 0.002</td> <td>    2.131</td> <td>    9.482</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>gestation</th>                 <td>    0.4031</td> <td>    0.035</td> <td>   11.569</td> <td> 0.000</td> <td>    0.335</td> <td>    0.472</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>mpregwt</th>                   <td>    0.1348</td> <td>    0.026</td> <td>    5.202</td> <td> 0.000</td> <td>    0.084</td> <td>    0.186</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 9.527</td> <th>  Durbin-Watson:     </th> <td>   1.949</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.009</td> <th>  Jarque-Bera (JB):  </th> <td>  13.142</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.093</td> <th>  Prob(JB):          </th> <td> 0.00140</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.573</td> <th>  Cond. No.          </th> <td>5.73e+03</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 5.73e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 bwt_oz   R-squared:                       0.242\n",
       "Model:                            OLS   Adj. R-squared:                  0.238\n",
       "Method:                 Least Squares   F-statistic:                     55.23\n",
       "Date:                Wed, 23 Oct 2019   Prob (F-statistic):           7.75e-50\n",
       "Time:                        20:08:39   Log-Likelihood:                -3626.1\n",
       "No. Observations:                 869   AIC:                             7264.\n",
       "Df Residuals:                     863   BIC:                             7293.\n",
       "Df Model:                           5                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=============================================================================================\n",
       "                                coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------------\n",
       "Intercept                   -10.2941      9.969     -1.033      0.302     -29.861       9.273\n",
       "smoke[T.1]                   -9.6867      2.080     -4.657      0.000     -13.769      -5.604\n",
       "C(white)[T.True]:smoke[0]     4.0964      1.587      2.581      0.010       0.981       7.212\n",
       "C(white)[T.True]:smoke[1]     5.8065      1.873      3.101      0.002       2.131       9.482\n",
       "gestation                     0.4031      0.035     11.569      0.000       0.335       0.472\n",
       "mpregwt                       0.1348      0.026      5.202      0.000       0.084       0.186\n",
       "==============================================================================\n",
       "Omnibus:                        9.527   Durbin-Watson:                   1.949\n",
       "Prob(Omnibus):                  0.009   Jarque-Bera (JB):               13.142\n",
       "Skew:                           0.093   Prob(JB):                      0.00140\n",
       "Kurtosis:                       3.573   Cond. No.                     5.73e+03\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 5.73e+03. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smoking_and_bw['white'] = ((smoking_and_bw['mrace'] >= 0) & \n",
    "                           (smoking_and_bw['mrace'] < 6)\n",
    "                          )\n",
    "\n",
    "s_and_bw_model3 = smf.ols('bwt_oz ~ gestation + smoke + mpregwt + C(white):smoke', \n",
    "                         smoking_and_bw).fit()\n",
    "s_and_bw_model3.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(6)** Using [post-regression test syntax](https://www.statsmodels.org/stable/generated/statsmodels.regression.linear_model.OLSResults.t_test.html) (not by running a new regression on a subpopulation), recover the coefficient and t-statistic for whether smoking reduces birth weight for white mothers. How does this coefficient compare to that for non-white mothers?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "                             Test for Constraints                             \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "c0            -3.8802      1.580     -2.455      0.014      -6.982      -0.778\n",
       "=============================================================================="
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hypotheses = 'smoke[T.1] + C(white)[T.True]:smoke[1] = 0'\n",
    "t_test = s_and_bw_model3.t_test(hypotheses)\n",
    "t_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The reduction in birth weight associated with smoking for white mothers appears to be about 40% that of the penalty of black mothers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(7)** Now let's use this model to predict some values. Let's generate some hypothetical newborns:\n",
    "\n",
    "```python\n",
    "newborns = pd.DataFrame({'smoke': [True, True, False, False], \n",
    "                         'white': [True, False, True, False],\n",
    "                         'gestation': [253, 300, 248, 287],\n",
    "                         'mpregwt': [132, 129, 140, 139]})\n",
    "```\n",
    "\n",
    "Using the model you ran above with gestation, smoke, mpregwt, white, and the interaction of white and smoke, predict birth weights for these newborns. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "newborns = pd.DataFrame({'smoke': [True, True, False, False], \n",
    "                         'white': [True, False, True, False],\n",
    "                         'gestation': [253, 300, 248, 287],\n",
    "                         'mpregwt': [132, 129, 140, 139]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    105.603327\n",
       "1    118.338956\n",
       "2    112.642490\n",
       "3    124.132854\n",
       "dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_and_bw_model3.predict(newborns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(8)** Now, using statsmodels, evaluate the impact of smoking on the likelihood a child is born prematurely (where \"premature\" is defined as gestation of less than 252 days)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'date', 'gestation', 'bwt_oz', 'parity', 'mrace', 'mage', 'med',\n",
       "       'mht', 'mpregwt', 'inc', 'smoke', 'white', 'premature'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smoking_and_bw['premature'] = (smoking_and_bw['gestation'] < 252).astype('int')\n",
    "smoking_and_bw.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.187899\n",
      "         Iterations 7\n"
     ]
    }
   ],
   "source": [
    "premature_fit = smf.logit('premature ~ smoke + white + mpregwt', \n",
    "                          smoking_and_bw).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Logit Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>premature</td>    <th>  No. Observations:  </th>  <td>   869</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                 <td>Logit</td>      <th>  Df Residuals:      </th>  <td>   865</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                 <td>MLE</td>       <th>  Df Model:          </th>  <td>     3</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Wed, 23 Oct 2019</td> <th>  Pseudo R-squ.:     </th>  <td>0.04614</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>20:08:39</td>     <th>  Log-Likelihood:    </th> <td> -163.28</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>converged:</th>             <td>True</td>       <th>  LL-Null:           </th> <td> -171.18</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>  LLR p-value:       </th> <td>0.001248</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>           <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>     <td>   -1.5353</td> <td>    1.024</td> <td>   -1.499</td> <td> 0.134</td> <td>   -3.542</td> <td>    0.472</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>smoke[T.1]</th>    <td>    0.4253</td> <td>    0.320</td> <td>    1.331</td> <td> 0.183</td> <td>   -0.201</td> <td>    1.052</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>white[T.True]</th> <td>   -1.2247</td> <td>    0.320</td> <td>   -3.833</td> <td> 0.000</td> <td>   -1.851</td> <td>   -0.598</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>mpregwt</th>       <td>   -0.0070</td> <td>    0.008</td> <td>   -0.907</td> <td> 0.364</td> <td>   -0.022</td> <td>    0.008</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                           Logit Regression Results                           \n",
       "==============================================================================\n",
       "Dep. Variable:              premature   No. Observations:                  869\n",
       "Model:                          Logit   Df Residuals:                      865\n",
       "Method:                           MLE   Df Model:                            3\n",
       "Date:                Wed, 23 Oct 2019   Pseudo R-squ.:                 0.04614\n",
       "Time:                        20:08:39   Log-Likelihood:                -163.28\n",
       "converged:                       True   LL-Null:                       -171.18\n",
       "Covariance Type:            nonrobust   LLR p-value:                  0.001248\n",
       "=================================================================================\n",
       "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------\n",
       "Intercept        -1.5353      1.024     -1.499      0.134      -3.542       0.472\n",
       "smoke[T.1]        0.4253      0.320      1.331      0.183      -0.201       1.052\n",
       "white[T.True]    -1.2247      0.320     -3.833      0.000      -1.851      -0.598\n",
       "mpregwt          -0.0070      0.008     -0.907      0.364      -0.022       0.008\n",
       "=================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "premature_fit.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Weighting\n",
    "\n",
    "In our merging exercises, we ran a difference-in-difference analysis on crime in California counties to see if, following drug legalization, there was a larger decline in violent crime in counties that had previously also had high drug arrest rates (to test the idea that violence was being generated by the drug trade, and that legalization would decrease this violence). \n",
    "\n",
    "In those analyses, we treated counties as equally-weighted units of analysis. If we think that each county is a single \"community\", and we think community is shaped at the level of communities (particularly when our community division is related to administrative boundaries that impact policing and government services, and is the case with counties), then this is reasonable. But one might think that crime is determined at the individual level, or maybe neighborhood level, and so big counties should \"count more\" in our analysis.  \n",
    "\n",
    "Here, let's use weighted least squares to weight observations based on population. This will allow bigger counties to influence our estimates more. \n",
    "\n",
    "**(1)** To begin, download our data on California arrest rates and population from [github](https://github.com/nickeubank/MIDS_Data/blob/master/arrest_rates_and_population.parquet). You will see I've reshaped the data to long format for convenience. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "arrests = pd.read_parquet('/users/nick/github/MIDS_data/arrest_rates_and_population.parquet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>variable</th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>year</th>\n",
       "      <th>drug_arrest_rate</th>\n",
       "      <th>total_population</th>\n",
       "      <th>violent_arrest_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Lassen County</td>\n",
       "      <td>2018</td>\n",
       "      <td>0.001303</td>\n",
       "      <td>31470.0</td>\n",
       "      <td>0.003654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>Tuolumne County</td>\n",
       "      <td>2009</td>\n",
       "      <td>0.003748</td>\n",
       "      <td>55761.0</td>\n",
       "      <td>0.002869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Amador County</td>\n",
       "      <td>2018</td>\n",
       "      <td>0.000831</td>\n",
       "      <td>37306.0</td>\n",
       "      <td>0.001930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Los Angeles County</td>\n",
       "      <td>2009</td>\n",
       "      <td>0.003290</td>\n",
       "      <td>9785295.0</td>\n",
       "      <td>0.003609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Amador County</td>\n",
       "      <td>2009</td>\n",
       "      <td>0.002655</td>\n",
       "      <td>38039.0</td>\n",
       "      <td>0.002629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Marin County</td>\n",
       "      <td>2009</td>\n",
       "      <td>0.001840</td>\n",
       "      <td>246711.0</td>\n",
       "      <td>0.002027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>Solano County</td>\n",
       "      <td>2018</td>\n",
       "      <td>0.001113</td>\n",
       "      <td>434981.0</td>\n",
       "      <td>0.003439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>Santa Clara County</td>\n",
       "      <td>2018</td>\n",
       "      <td>0.000460</td>\n",
       "      <td>1911226.0</td>\n",
       "      <td>0.002180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Merced County</td>\n",
       "      <td>2018</td>\n",
       "      <td>0.000621</td>\n",
       "      <td>267390.0</td>\n",
       "      <td>0.003848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>Sacramento County</td>\n",
       "      <td>2018</td>\n",
       "      <td>0.000948</td>\n",
       "      <td>1495400.0</td>\n",
       "      <td>0.003400</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "variable              COUNTY  year  drug_arrest_rate  total_population  \\\n",
       "35             Lassen County  2018          0.001303           31470.0   \n",
       "108          Tuolumne County  2009          0.003748           55761.0   \n",
       "5              Amador County  2018          0.000831           37306.0   \n",
       "36        Los Angeles County  2009          0.003290         9785295.0   \n",
       "4              Amador County  2009          0.002655           38039.0   \n",
       "40              Marin County  2009          0.001840          246711.0   \n",
       "95             Solano County  2018          0.001113          434981.0   \n",
       "85        Santa Clara County  2018          0.000460         1911226.0   \n",
       "47             Merced County  2018          0.000621          267390.0   \n",
       "67         Sacramento County  2018          0.000948         1495400.0   \n",
       "\n",
       "variable  violent_arrest_rate  \n",
       "35                   0.003654  \n",
       "108                  0.002869  \n",
       "5                    0.001930  \n",
       "36                   0.003609  \n",
       "4                    0.002629  \n",
       "40                   0.002027  \n",
       "95                   0.003439  \n",
       "85                   0.002180  \n",
       "47                   0.003848  \n",
       "67                   0.003400  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arrests.sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(2)** To run our difference-in-difference in a regression framework, we need both an indicator variable for observations that occur after legalization (i.e. year == 2018), and an indicator for the population we consider treated (those who had high drug arrest rates in 2008). Re-create those here. \n",
    "\n",
    "*Note:* if you want, you can also use the 2009 drug arrest rates as a continuous variable. This is a kind of \"generalized difference-in-difference\", in which we're just doing the continuous analogue of the thing we do when we split the sample into \"high\" and \"low\" 2009 arrest rates. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Legalization indicator. \n",
    "arrests['after_legalization'] = (arrests.year == 2018)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make a \"drug arrest rate in 2009\" variable\n",
    "arrests.loc[arrests.year == 2018, 'drug_arrest_rate'] = np.nan \n",
    "arrests['drug_arrest_rate'] = arrests.groupby('COUNTY')[['drug_arrest_rate']].transform(max)\n",
    "arrests = arrests.rename({'drug_arrest_rate': 'drug_arrest_rate_2009'}, axis='columns')\n",
    "arrests['high_2009_drug_arrest_rate'] = arrests['drug_arrest_rate_2009'] > arrests['drug_arrest_rate_2009'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>variable</th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>year</th>\n",
       "      <th>drug_arrest_rate_2009</th>\n",
       "      <th>total_population</th>\n",
       "      <th>violent_arrest_rate</th>\n",
       "      <th>after_legalization</th>\n",
       "      <th>high_2009_drug_arrest_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alameda County</td>\n",
       "      <td>2009</td>\n",
       "      <td>0.003946</td>\n",
       "      <td>1457095.0</td>\n",
       "      <td>0.002963</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alameda County</td>\n",
       "      <td>2018</td>\n",
       "      <td>0.003946</td>\n",
       "      <td>1629615.0</td>\n",
       "      <td>0.002536</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alpine County</td>\n",
       "      <td>2009</td>\n",
       "      <td>0.001735</td>\n",
       "      <td>1153.0</td>\n",
       "      <td>0.006938</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Alpine County</td>\n",
       "      <td>2018</td>\n",
       "      <td>0.001735</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.004156</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Amador County</td>\n",
       "      <td>2009</td>\n",
       "      <td>0.002655</td>\n",
       "      <td>38039.0</td>\n",
       "      <td>0.002629</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "variable          COUNTY  year  drug_arrest_rate_2009  total_population  \\\n",
       "0         Alameda County  2009               0.003946         1457095.0   \n",
       "1         Alameda County  2018               0.003946         1629615.0   \n",
       "2          Alpine County  2009               0.001735            1153.0   \n",
       "3          Alpine County  2018               0.001735            1203.0   \n",
       "4          Amador County  2009               0.002655           38039.0   \n",
       "\n",
       "variable  violent_arrest_rate  after_legalization  high_2009_drug_arrest_rate  \n",
       "0                    0.002963               False                        True  \n",
       "1                    0.002536                True                        True  \n",
       "2                    0.006938               False                       False  \n",
       "3                    0.004156                True                       False  \n",
       "4                    0.002629               False                       False  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arrests.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(3)** Now regression the violent arrest rate on your two indicators and their interaction. The coefficient on the interaction is your \"difference-in-difference\" estimate! If you go back to your old homeworks, you should find the coefficient is exactly what you calculated. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>violent_arrest_rate</td> <th>  R-squared:         </th> <td>   0.100</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                    <td>OLS</td>         <th>  Adj. R-squared:    </th> <td>   0.076</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>              <td>Least Squares</td>    <th>  F-statistic:       </th> <td>   4.166</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>              <td>Wed, 23 Oct 2019</td>   <th>  Prob (F-statistic):</th>  <td>0.00773</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                  <td>20:08:39</td>       <th>  Log-Likelihood:    </th> <td>  630.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>       <td>   116</td>        <th>  AIC:               </th> <td>  -1252.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>           <td>   112</td>        <th>  BIC:               </th> <td>  -1241.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>               <td>     3</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>       <td>nonrobust</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                                <td></td>                                   <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                                                     <td>    0.0034</td> <td>    0.000</td> <td>   18.669</td> <td> 0.000</td> <td>    0.003</td> <td>    0.004</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>high_2009_drug_arrest_rate[T.True]</th>                            <td>    0.0008</td> <td>    0.000</td> <td>    2.679</td> <td> 0.008</td> <td>    0.000</td> <td>    0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>after_legalization[T.True]</th>                                    <td>   -0.0002</td> <td>    0.000</td> <td>   -0.716</td> <td> 0.475</td> <td>   -0.001</td> <td>    0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>after_legalization[T.True]:high_2009_drug_arrest_rate[T.True]</th> <td>   -0.0002</td> <td>    0.000</td> <td>   -0.604</td> <td> 0.547</td> <td>   -0.001</td> <td>    0.001</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>24.084</td> <th>  Durbin-Watson:     </th> <td>   1.239</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  33.273</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.057</td> <th>  Prob(JB):          </th> <td>5.95e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.554</td> <th>  Cond. No.          </th> <td>    6.40</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                             OLS Regression Results                            \n",
       "===============================================================================\n",
       "Dep. Variable:     violent_arrest_rate   R-squared:                       0.100\n",
       "Model:                             OLS   Adj. R-squared:                  0.076\n",
       "Method:                  Least Squares   F-statistic:                     4.166\n",
       "Date:                 Wed, 23 Oct 2019   Prob (F-statistic):            0.00773\n",
       "Time:                         20:08:39   Log-Likelihood:                 630.00\n",
       "No. Observations:                  116   AIC:                            -1252.\n",
       "Df Residuals:                      112   BIC:                            -1241.\n",
       "Df Model:                            3                                         \n",
       "Covariance Type:             nonrobust                                         \n",
       "=================================================================================================================================\n",
       "                                                                    coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------------------------------------------------\n",
       "Intercept                                                         0.0034      0.000     18.669      0.000       0.003       0.004\n",
       "high_2009_drug_arrest_rate[T.True]                                0.0008      0.000      2.679      0.008       0.000       0.001\n",
       "after_legalization[T.True]                                       -0.0002      0.000     -0.716      0.475      -0.001       0.000\n",
       "after_legalization[T.True]:high_2009_drug_arrest_rate[T.True]    -0.0002      0.000     -0.604      0.547      -0.001       0.001\n",
       "==============================================================================\n",
       "Omnibus:                       24.084   Durbin-Watson:                   1.239\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               33.273\n",
       "Skew:                           1.057   Prob(JB):                     5.95e-08\n",
       "Kurtosis:                       4.554   Cond. No.                         6.40\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Here's with the discrete split of the sample\n",
    "arrest_model = smf.ols('violent_arrest_rate ~ high_2009_drug_arrest_rate + after_legalization + after_legalization:high_2009_drug_arrest_rate', \n",
    "                       arrests).fit()\n",
    "arrest_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>violent_arrest_rate</td> <th>  R-squared:         </th> <td>   0.067</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                    <td>OLS</td>         <th>  Adj. R-squared:    </th> <td>   0.042</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>              <td>Least Squares</td>    <th>  F-statistic:       </th> <td>   2.674</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>              <td>Wed, 23 Oct 2019</td>   <th>  Prob (F-statistic):</th>  <td>0.0508</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                  <td>20:08:39</td>       <th>  Log-Likelihood:    </th> <td>  627.87</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>       <td>   116</td>        <th>  AIC:               </th> <td>  -1248.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>           <td>   112</td>        <th>  BIC:               </th> <td>  -1237.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>               <td>     3</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>       <td>nonrobust</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                          <td></td>                            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                                        <td>    0.0029</td> <td>    0.000</td> <td>    8.367</td> <td> 0.000</td> <td>    0.002</td> <td>    0.004</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>after_legalization[T.True]</th>                       <td>    0.0003</td> <td>    0.000</td> <td>    0.599</td> <td> 0.551</td> <td>   -0.001</td> <td>    0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>drug_arrest_rate_2009</th>                            <td>    0.2409</td> <td>    0.100</td> <td>    2.399</td> <td> 0.018</td> <td>    0.042</td> <td>    0.440</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>after_legalization[T.True]:drug_arrest_rate_2009</th> <td>   -0.1818</td> <td>    0.142</td> <td>   -1.280</td> <td> 0.203</td> <td>   -0.463</td> <td>    0.100</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>19.333</td> <th>  Durbin-Watson:     </th> <td>   1.161</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  23.764</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.941</td> <th>  Prob(JB):          </th> <td>6.92e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.174</td> <th>  Cond. No.          </th> <td>1.82e+03</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.82e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                             OLS Regression Results                            \n",
       "===============================================================================\n",
       "Dep. Variable:     violent_arrest_rate   R-squared:                       0.067\n",
       "Model:                             OLS   Adj. R-squared:                  0.042\n",
       "Method:                  Least Squares   F-statistic:                     2.674\n",
       "Date:                 Wed, 23 Oct 2019   Prob (F-statistic):             0.0508\n",
       "Time:                         20:08:39   Log-Likelihood:                 627.87\n",
       "No. Observations:                  116   AIC:                            -1248.\n",
       "Df Residuals:                      112   BIC:                            -1237.\n",
       "Df Model:                            3                                         \n",
       "Covariance Type:             nonrobust                                         \n",
       "====================================================================================================================\n",
       "                                                       coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------------------------------------\n",
       "Intercept                                            0.0029      0.000      8.367      0.000       0.002       0.004\n",
       "after_legalization[T.True]                           0.0003      0.000      0.599      0.551      -0.001       0.001\n",
       "drug_arrest_rate_2009                                0.2409      0.100      2.399      0.018       0.042       0.440\n",
       "after_legalization[T.True]:drug_arrest_rate_2009    -0.1818      0.142     -1.280      0.203      -0.463       0.100\n",
       "==============================================================================\n",
       "Omnibus:                       19.333   Durbin-Watson:                   1.161\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               23.764\n",
       "Skew:                           0.941   Prob(JB):                     6.92e-06\n",
       "Kurtosis:                       4.174   Cond. No.                     1.82e+03\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 1.82e+03. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# And here's with the the continuous variable\n",
    "# Note that interpretation of the magnitude of that coefficient is a little harder,\n",
    "# as you have to evaluate it at reasonable values of drug_arrest_rate_2009. \n",
    "arrest_model = smf.ols('violent_arrest_rate ~ drug_arrest_rate_2009 + after_legalization + after_legalization:drug_arrest_rate_2009', \n",
    "                       arrests).fit()\n",
    "arrest_model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(4)** Now let's do the same analysis, but this time using county population as a weight in a Weighted Least Squares regression (`smf.wls`). Just pass the keyword argument `weights` a vector fo weights (in this case, `arrests['total_population']`). Note that the weights argument is outside of the formula, so you have to pass an actual vector of values, not just the name of a column. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>WLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>violent_arrest_rate</td> <th>  R-squared:         </th> <td>   0.396</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                    <td>WLS</td>         <th>  Adj. R-squared:    </th> <td>   0.380</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>              <td>Least Squares</td>    <th>  F-statistic:       </th> <td>   24.52</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>              <td>Wed, 23 Oct 2019</td>   <th>  Prob (F-statistic):</th> <td>2.86e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                  <td>20:08:39</td>       <th>  Log-Likelihood:    </th> <td>  608.13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>       <td>   116</td>        <th>  AIC:               </th> <td>  -1208.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>           <td>   112</td>        <th>  BIC:               </th> <td>  -1197.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>               <td>     3</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>       <td>nonrobust</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                                <td></td>                                   <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                                                     <td>    0.0028</td> <td>    0.000</td> <td>   21.484</td> <td> 0.000</td> <td>    0.003</td> <td>    0.003</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>high_2009_drug_arrest_rate[T.True]</th>                            <td>    0.0011</td> <td>    0.000</td> <td>    5.938</td> <td> 0.000</td> <td>    0.001</td> <td>    0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>after_legalization[T.True]</th>                                    <td>   -0.0004</td> <td>    0.000</td> <td>   -1.972</td> <td> 0.051</td> <td>   -0.001</td> <td> 1.76e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>after_legalization[T.True]:high_2009_drug_arrest_rate[T.True]</th> <td>   -0.0003</td> <td>    0.000</td> <td>   -1.171</td> <td> 0.244</td> <td>   -0.001</td> <td>    0.000</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 6.397</td> <th>  Durbin-Watson:     </th> <td>   1.073</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.041</td> <th>  Jarque-Bera (JB):  </th> <td>  10.179</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.125</td> <th>  Prob(JB):          </th> <td> 0.00616</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.429</td> <th>  Cond. No.          </th> <td>    7.31</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                             WLS Regression Results                            \n",
       "===============================================================================\n",
       "Dep. Variable:     violent_arrest_rate   R-squared:                       0.396\n",
       "Model:                             WLS   Adj. R-squared:                  0.380\n",
       "Method:                  Least Squares   F-statistic:                     24.52\n",
       "Date:                 Wed, 23 Oct 2019   Prob (F-statistic):           2.86e-12\n",
       "Time:                         20:08:39   Log-Likelihood:                 608.13\n",
       "No. Observations:                  116   AIC:                            -1208.\n",
       "Df Residuals:                      112   BIC:                            -1197.\n",
       "Df Model:                            3                                         \n",
       "Covariance Type:             nonrobust                                         \n",
       "=================================================================================================================================\n",
       "                                                                    coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------------------------------------------------\n",
       "Intercept                                                         0.0028      0.000     21.484      0.000       0.003       0.003\n",
       "high_2009_drug_arrest_rate[T.True]                                0.0011      0.000      5.938      0.000       0.001       0.001\n",
       "after_legalization[T.True]                                       -0.0004      0.000     -1.972      0.051      -0.001    1.76e-06\n",
       "after_legalization[T.True]:high_2009_drug_arrest_rate[T.True]    -0.0003      0.000     -1.171      0.244      -0.001       0.000\n",
       "==============================================================================\n",
       "Omnibus:                        6.397   Durbin-Watson:                   1.073\n",
       "Prob(Omnibus):                  0.041   Jarque-Bera (JB):               10.179\n",
       "Skew:                           0.125   Prob(JB):                      0.00616\n",
       "Kurtosis:                       4.429   Cond. No.                         7.31\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weighted_arrest_model = smf.wls('violent_arrest_rate ~ high_2009_drug_arrest_rate'\n",
    "                                '+ after_legalization + after_legalization:high_2009_drug_arrest_rate', \n",
    "                                data=arrests, weights=arrests['total_population'])\n",
    "weighted_arrest_model.fit().summary()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
