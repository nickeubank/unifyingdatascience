{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Traffic Death Analysis\n",
    "\n",
    "In this exercise, we will be analyzing the effect of alcohol taxes on traffic death in the United States.  The data set used in this exercise, `fatalities.csv`, is a state-year panel dataset (meaning it includes data on multiple states, and the data includes several years of data for each state. The data contains 336 observations on 34 variables. The variables used in the exercise are defined as follows:\n",
    "\n",
    "`state`: factor variable indicating states\n",
    "\n",
    "`year`: factor variable indicating years\n",
    "\n",
    "`beertax`: numeric variable, Tax on the case of beer\n",
    "\n",
    "In these exercises, we'll be looking at how beer taxes (which are believed to reduce alcohol consumption, potentially reducing drunk driving deaths) impact car accident fatality rates. \n",
    "\n",
    "More specifically, though, we'll be approaching our estimation of the impact of beer taxes in a few different ways in an effort to give you more of an intuitive sense of what happens when you add fixed effects to a regression. \n",
    "\n",
    "## Exercise 1\n",
    "\n",
    "Download and load the data from [this link](https://media.githubusercontent.com/media/nickeubank/MIDS_Data/master/us_driving_fatalities.csv), or by going to [www.github.com/nickeubank/MIDS_Data/](www.github.com/nickeubank/MIDS_Data/) and downloading the `us_driving_fatalities.csv` dataset. \n",
    "\n",
    "How many states does this dataset contain? What's the time frame of this dataset? (From which year to which year). And what constitutes a single observation (i.e. what is the unit of analysis for each row of the data?)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\n",
    "    \"https://media.githubusercontent.com/media/nickeubank/MIDS_Data/master/us_driving_fatalities.csv\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>state</th>\n",
       "      <th>year</th>\n",
       "      <th>spirits</th>\n",
       "      <th>unemp</th>\n",
       "      <th>income</th>\n",
       "      <th>emppop</th>\n",
       "      <th>beertax</th>\n",
       "      <th>baptist</th>\n",
       "      <th>mormon</th>\n",
       "      <th>...</th>\n",
       "      <th>nfatal2124</th>\n",
       "      <th>afatal</th>\n",
       "      <th>pop</th>\n",
       "      <th>pop1517</th>\n",
       "      <th>pop1820</th>\n",
       "      <th>pop2124</th>\n",
       "      <th>milestot</th>\n",
       "      <th>unempus</th>\n",
       "      <th>emppopus</th>\n",
       "      <th>gsp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>al</td>\n",
       "      <td>1982</td>\n",
       "      <td>1.37</td>\n",
       "      <td>14.4</td>\n",
       "      <td>10544.152344</td>\n",
       "      <td>50.692039</td>\n",
       "      <td>1.539379</td>\n",
       "      <td>30.355700</td>\n",
       "      <td>0.32829</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>309.437988</td>\n",
       "      <td>3942002.25</td>\n",
       "      <td>208999.593750</td>\n",
       "      <td>221553.43750</td>\n",
       "      <td>290000.06250</td>\n",
       "      <td>28516.0</td>\n",
       "      <td>9.7</td>\n",
       "      <td>57.799999</td>\n",
       "      <td>-0.022125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>al</td>\n",
       "      <td>1983</td>\n",
       "      <td>1.36</td>\n",
       "      <td>13.7</td>\n",
       "      <td>10732.797852</td>\n",
       "      <td>52.147030</td>\n",
       "      <td>1.788991</td>\n",
       "      <td>30.333599</td>\n",
       "      <td>0.34341</td>\n",
       "      <td>...</td>\n",
       "      <td>35</td>\n",
       "      <td>341.834015</td>\n",
       "      <td>3960008.00</td>\n",
       "      <td>202000.078125</td>\n",
       "      <td>219125.46875</td>\n",
       "      <td>290000.15625</td>\n",
       "      <td>31032.0</td>\n",
       "      <td>9.6</td>\n",
       "      <td>57.900002</td>\n",
       "      <td>0.046558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>al</td>\n",
       "      <td>1984</td>\n",
       "      <td>1.32</td>\n",
       "      <td>11.1</td>\n",
       "      <td>11108.791016</td>\n",
       "      <td>54.168087</td>\n",
       "      <td>1.714286</td>\n",
       "      <td>30.311501</td>\n",
       "      <td>0.35924</td>\n",
       "      <td>...</td>\n",
       "      <td>34</td>\n",
       "      <td>304.872009</td>\n",
       "      <td>3988991.75</td>\n",
       "      <td>196999.968750</td>\n",
       "      <td>216724.09375</td>\n",
       "      <td>288000.15625</td>\n",
       "      <td>32961.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>59.500004</td>\n",
       "      <td>0.062798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>al</td>\n",
       "      <td>1985</td>\n",
       "      <td>1.28</td>\n",
       "      <td>8.9</td>\n",
       "      <td>11332.626953</td>\n",
       "      <td>55.271137</td>\n",
       "      <td>1.652542</td>\n",
       "      <td>30.289499</td>\n",
       "      <td>0.37579</td>\n",
       "      <td>...</td>\n",
       "      <td>45</td>\n",
       "      <td>276.742004</td>\n",
       "      <td>4021007.75</td>\n",
       "      <td>194999.734375</td>\n",
       "      <td>214349.03125</td>\n",
       "      <td>284000.31250</td>\n",
       "      <td>35091.0</td>\n",
       "      <td>7.2</td>\n",
       "      <td>60.100002</td>\n",
       "      <td>0.027490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>al</td>\n",
       "      <td>1986</td>\n",
       "      <td>1.23</td>\n",
       "      <td>9.8</td>\n",
       "      <td>11661.506836</td>\n",
       "      <td>56.514496</td>\n",
       "      <td>1.609907</td>\n",
       "      <td>30.267401</td>\n",
       "      <td>0.39311</td>\n",
       "      <td>...</td>\n",
       "      <td>29</td>\n",
       "      <td>360.716003</td>\n",
       "      <td>4049993.75</td>\n",
       "      <td>203999.890625</td>\n",
       "      <td>212000.00000</td>\n",
       "      <td>263000.28125</td>\n",
       "      <td>36259.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>60.700001</td>\n",
       "      <td>0.032143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0 state  year  spirits  unemp        income     emppop   beertax  \\\n",
       "0           1    al  1982     1.37   14.4  10544.152344  50.692039  1.539379   \n",
       "1           2    al  1983     1.36   13.7  10732.797852  52.147030  1.788991   \n",
       "2           3    al  1984     1.32   11.1  11108.791016  54.168087  1.714286   \n",
       "3           4    al  1985     1.28    8.9  11332.626953  55.271137  1.652542   \n",
       "4           5    al  1986     1.23    9.8  11661.506836  56.514496  1.609907   \n",
       "\n",
       "     baptist   mormon  ...  nfatal2124      afatal         pop        pop1517  \\\n",
       "0  30.355700  0.32829  ...          32  309.437988  3942002.25  208999.593750   \n",
       "1  30.333599  0.34341  ...          35  341.834015  3960008.00  202000.078125   \n",
       "2  30.311501  0.35924  ...          34  304.872009  3988991.75  196999.968750   \n",
       "3  30.289499  0.37579  ...          45  276.742004  4021007.75  194999.734375   \n",
       "4  30.267401  0.39311  ...          29  360.716003  4049993.75  203999.890625   \n",
       "\n",
       "        pop1820       pop2124 milestot  unempus   emppopus       gsp  \n",
       "0  221553.43750  290000.06250  28516.0      9.7  57.799999 -0.022125  \n",
       "1  219125.46875  290000.15625  31032.0      9.6  57.900002  0.046558  \n",
       "2  216724.09375  288000.15625  32961.0      7.5  59.500004  0.062798  \n",
       "3  214349.03125  284000.31250  35091.0      7.2  60.100002  0.027490  \n",
       "4  212000.00000  263000.28125  36259.0      7.0  60.700001  0.032143  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.state.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1982"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.year.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1988"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.year.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make sure all same min and max\n",
    "assert (df.groupby(\"state\").year.min() == df.year.min()).all()\n",
    "assert (df.groupby(\"state\").year.max() == df.year.max()).all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# So 48 states, running from 1982 to 1988\n",
    "# One row is one state-year."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 2\n",
    "\n",
    "We use the fatality rate per 10,000 as the dependent variable. Construct this variable. Name it as `fat_rate`.  Hint: You can compute it using total fatalities(`fatal`) and population (`pop`). Note that because `pop` is often the name of a method in Python, you may have to navigate around some issues. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"fat_rate\"] = (df.fatal / df[\"pop\"]) * 10000"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 3\n",
    "\n",
    "Draw a scatter plot using `beertax` as the x-axis, and `fat_rate` as the y-axis. Draw a fitted line showing the correlation between these two variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x16c6a9b40>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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PL5HozoYSU5OxqhRo7BhwwaP2zds2IAbb7zR733GjRvnc/znn3+O0aNHIykpKWxjjQZqXk9/ysvLYbPZtB5eXOD7M/z4/vyRIAiYPXs21qxZg02bNiEnJyfoffgelabm9fQnLt+juqXOamT16tVCUlKSsHLlSqGyslL47W9/K6SnpwvHjx8XBEEQnn32WeHhhx92H//dd98JaWlpwty5c4XKykph5cqVQlJSkvC3v/1Nr1/BUJS+nq+//rqwdu1a4ciRI0JFRYXw7LPPCgCE4uJivX4FQ2loaBDKy8uF8vJyAYDwn//5n0J5eblw4sQJQRD4/lRK6evJ92dgs2bNEiwWi1BaWirY7Xb3V1NTk/sYvkflU/N68j3aLuqDEUEQhDfffFPo27evkJycLIwcOdKjjOqRRx4Rbr31Vo/jS0tLhREjRgjJyclCv379hGXLlkV4xMam5PVctGiRMGDAACElJUXo1q2bMH78eOGTTz7RYdTGJJbteX898sgjgiDw/amU0teT78/A/L2WAIRVq1a5j+F7VD41ryffo+1MgnAl84iIiIhIB1GdM0JERETRj8EIERER6YrBCBEREemKwQgRERHpisEIERER6YrBCBEREemKwQgRERHpisEIERER6YrBCBEREemKwQgRERHpisEIERER6YrBCBEREenq/wNAd8ZC744F8gAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# fit a model\n",
    "from numpy.polynomial.polynomial import polyfit\n",
    "\n",
    "b, m = polyfit(df[\"beertax\"], df[\"fat_rate\"], 1)\n",
    "\n",
    "# scatterplot with fitted line\n",
    "plt.scatter(\"beertax\", \"fat_rate\", data=df)\n",
    "plt.plot(df[\"beertax\"], b + m * df[\"beertax\"], \"-\", c=\"black\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 4\n",
    "\n",
    "Fit a simple OLS regression. This is what is called a \"pooled\" regression because we're \"pooling\" observations from different years into a single regression. What do your results imply about the relationship between Beer Taxes and fatalities?\n",
    "\n",
    "\\begin{align*}\n",
    "FatalityRate_i = \\beta_0 + \\beta_1 \\times BeerTax_i \\quad (1982 or 1988 \\text{ data}), \\\\\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>fat_rate</td>     <th>  R-squared:         </th> <td>   0.093</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.091</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   34.39</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 04 Mar 2023</td> <th>  Prob (F-statistic):</th> <td>1.08e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:52:53</td>     <th>  Log-Likelihood:    </th> <td> -271.04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   336</td>      <th>  AIC:               </th> <td>   546.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   334</td>      <th>  BIC:               </th> <td>   553.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>    1.8533</td> <td>    0.044</td> <td>   42.539</td> <td> 0.000</td> <td>    1.768</td> <td>    1.939</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beertax</th>   <td>    0.3646</td> <td>    0.062</td> <td>    5.865</td> <td> 0.000</td> <td>    0.242</td> <td>    0.487</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>66.653</td> <th>  Durbin-Watson:     </th> <td>   0.465</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 112.734</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.134</td> <th>  Prob(JB):          </th> <td>3.31e-25</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.707</td> <th>  Cond. No.          </th> <td>    2.76</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:               fat_rate   R-squared:                       0.093\n",
       "Model:                            OLS   Adj. R-squared:                  0.091\n",
       "Method:                 Least Squares   F-statistic:                     34.39\n",
       "Date:                Sat, 04 Mar 2023   Prob (F-statistic):           1.08e-08\n",
       "Time:                        13:52:53   Log-Likelihood:                -271.04\n",
       "No. Observations:                 336   AIC:                             546.1\n",
       "Df Residuals:                     334   BIC:                             553.7\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept      1.8533      0.044     42.539      0.000       1.768       1.939\n",
       "beertax        0.3646      0.062      5.865      0.000       0.242       0.487\n",
       "==============================================================================\n",
       "Omnibus:                       66.653   Durbin-Watson:                   0.465\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              112.734\n",
       "Skew:                           1.134   Prob(JB):                     3.31e-25\n",
       "Kurtosis:                       4.707   Cond. No.                         2.76\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "\n",
    "smf.ols(\"fat_rate ~ beertax\", df).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 5\n",
    "\n",
    "Now estimate your model again, this time adding state fixed effects (using the `C()` notation and your normal linear model machinery). What does this result imply about the relationship between beer taxes and fatalities?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>fat_rate</td>     <th>  R-squared:         </th> <td>   0.905</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.889</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   56.97</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 04 Mar 2023</td> <th>  Prob (F-statistic):</th> <td>1.96e-120</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:52:53</td>     <th>  Log-Likelihood:    </th> <td>  107.97</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   336</td>      <th>  AIC:               </th> <td>  -117.9</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   287</td>      <th>  BIC:               </th> <td>   69.09</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    48</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>           <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>      <td>    3.4776</td> <td>    0.313</td> <td>   11.098</td> <td> 0.000</td> <td>    2.861</td> <td>    4.094</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ar]</th> <td>   -0.6550</td> <td>    0.219</td> <td>   -2.990</td> <td> 0.003</td> <td>   -1.086</td> <td>   -0.224</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.az]</th> <td>   -0.5677</td> <td>    0.267</td> <td>   -2.129</td> <td> 0.034</td> <td>   -1.093</td> <td>   -0.043</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ca]</th> <td>   -1.5095</td> <td>    0.304</td> <td>   -4.960</td> <td> 0.000</td> <td>   -2.109</td> <td>   -0.910</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.co]</th> <td>   -1.4843</td> <td>    0.287</td> <td>   -5.165</td> <td> 0.000</td> <td>   -2.050</td> <td>   -0.919</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ct]</th> <td>   -1.8623</td> <td>    0.281</td> <td>   -6.638</td> <td> 0.000</td> <td>   -2.414</td> <td>   -1.310</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.de]</th> <td>   -1.3076</td> <td>    0.294</td> <td>   -4.448</td> <td> 0.000</td> <td>   -1.886</td> <td>   -0.729</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.fl]</th> <td>   -0.2681</td> <td>    0.139</td> <td>   -1.924</td> <td> 0.055</td> <td>   -0.542</td> <td>    0.006</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ga]</th> <td>    0.5246</td> <td>    0.184</td> <td>    2.852</td> <td> 0.005</td> <td>    0.163</td> <td>    0.887</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ia]</th> <td>   -1.5439</td> <td>    0.253</td> <td>   -6.092</td> <td> 0.000</td> <td>   -2.043</td> <td>   -1.045</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.id]</th> <td>   -0.6690</td> <td>    0.258</td> <td>   -2.593</td> <td> 0.010</td> <td>   -1.177</td> <td>   -0.161</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.il]</th> <td>   -1.9616</td> <td>    0.291</td> <td>   -6.730</td> <td> 0.000</td> <td>   -2.535</td> <td>   -1.388</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.in]</th> <td>   -1.4615</td> <td>    0.273</td> <td>   -5.363</td> <td> 0.000</td> <td>   -1.998</td> <td>   -0.925</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ks]</th> <td>   -1.2232</td> <td>    0.245</td> <td>   -4.984</td> <td> 0.000</td> <td>   -1.706</td> <td>   -0.740</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ky]</th> <td>   -1.2175</td> <td>    0.287</td> <td>   -4.240</td> <td> 0.000</td> <td>   -1.783</td> <td>   -0.652</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.la]</th> <td>   -0.8471</td> <td>    0.189</td> <td>   -4.490</td> <td> 0.000</td> <td>   -1.218</td> <td>   -0.476</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ma]</th> <td>   -2.1097</td> <td>    0.276</td> <td>   -7.641</td> <td> 0.000</td> <td>   -2.653</td> <td>   -1.566</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.md]</th> <td>   -1.7064</td> <td>    0.283</td> <td>   -6.025</td> <td> 0.000</td> <td>   -2.264</td> <td>   -1.149</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.me]</th> <td>   -1.1079</td> <td>    0.191</td> <td>   -5.797</td> <td> 0.000</td> <td>   -1.484</td> <td>   -0.732</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.mi]</th> <td>   -1.4845</td> <td>    0.236</td> <td>   -6.290</td> <td> 0.000</td> <td>   -1.949</td> <td>   -1.020</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.mn]</th> <td>   -1.8972</td> <td>    0.265</td> <td>   -7.157</td> <td> 0.000</td> <td>   -2.419</td> <td>   -1.375</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.mo]</th> <td>   -1.2963</td> <td>    0.267</td> <td>   -4.861</td> <td> 0.000</td> <td>   -1.821</td> <td>   -0.771</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ms]</th> <td>   -0.0291</td> <td>    0.148</td> <td>   -0.196</td> <td> 0.845</td> <td>   -0.321</td> <td>    0.263</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.mt]</th> <td>   -0.3604</td> <td>    0.264</td> <td>   -1.365</td> <td> 0.173</td> <td>   -0.880</td> <td>    0.159</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nc]</th> <td>   -0.2905</td> <td>    0.120</td> <td>   -2.424</td> <td> 0.016</td> <td>   -0.526</td> <td>   -0.055</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nd]</th> <td>   -1.6234</td> <td>    0.254</td> <td>   -6.396</td> <td> 0.000</td> <td>   -2.123</td> <td>   -1.124</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ne]</th> <td>   -1.5222</td> <td>    0.249</td> <td>   -6.106</td> <td> 0.000</td> <td>   -2.013</td> <td>   -1.032</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nh]</th> <td>   -1.2545</td> <td>    0.210</td> <td>   -5.983</td> <td> 0.000</td> <td>   -1.667</td> <td>   -0.842</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nj]</th> <td>   -2.1057</td> <td>    0.307</td> <td>   -6.855</td> <td> 0.000</td> <td>   -2.710</td> <td>   -1.501</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nm]</th> <td>    0.4264</td> <td>    0.254</td> <td>    1.677</td> <td> 0.095</td> <td>   -0.074</td> <td>    0.927</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nv]</th> <td>   -0.6008</td> <td>    0.286</td> <td>   -2.101</td> <td> 0.037</td> <td>   -1.164</td> <td>   -0.038</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ny]</th> <td>   -2.1867</td> <td>    0.299</td> <td>   -7.316</td> <td> 0.000</td> <td>   -2.775</td> <td>   -1.598</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.oh]</th> <td>   -1.6744</td> <td>    0.254</td> <td>   -6.597</td> <td> 0.000</td> <td>   -2.174</td> <td>   -1.175</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ok]</th> <td>   -0.5451</td> <td>    0.169</td> <td>   -3.223</td> <td> 0.001</td> <td>   -0.878</td> <td>   -0.212</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.or]</th> <td>   -1.1680</td> <td>    0.286</td> <td>   -4.088</td> <td> 0.000</td> <td>   -1.730</td> <td>   -0.606</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.pa]</th> <td>   -1.7675</td> <td>    0.276</td> <td>   -6.402</td> <td> 0.000</td> <td>   -2.311</td> <td>   -1.224</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ri]</th> <td>   -2.2651</td> <td>    0.294</td> <td>   -7.711</td> <td> 0.000</td> <td>   -2.843</td> <td>   -1.687</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.sc]</th> <td>    0.5572</td> <td>    0.110</td> <td>    5.065</td> <td> 0.000</td> <td>    0.341</td> <td>    0.774</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.sd]</th> <td>   -1.0037</td> <td>    0.210</td> <td>   -4.788</td> <td> 0.000</td> <td>   -1.416</td> <td>   -0.591</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.tn]</th> <td>   -0.8757</td> <td>    0.268</td> <td>   -3.267</td> <td> 0.001</td> <td>   -1.403</td> <td>   -0.348</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.tx]</th> <td>   -0.9175</td> <td>    0.246</td> <td>   -3.736</td> <td> 0.000</td> <td>   -1.401</td> <td>   -0.434</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ut]</th> <td>   -1.1640</td> <td>    0.196</td> <td>   -5.926</td> <td> 0.000</td> <td>   -1.551</td> <td>   -0.777</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.va]</th> <td>   -1.2902</td> <td>    0.204</td> <td>   -6.320</td> <td> 0.000</td> <td>   -1.692</td> <td>   -0.888</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.vt]</th> <td>   -0.9660</td> <td>    0.211</td> <td>   -4.576</td> <td> 0.000</td> <td>   -1.382</td> <td>   -0.550</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.wa]</th> <td>   -1.6595</td> <td>    0.283</td> <td>   -5.854</td> <td> 0.000</td> <td>   -2.217</td> <td>   -1.102</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.wi]</th> <td>   -1.7593</td> <td>    0.294</td> <td>   -5.985</td> <td> 0.000</td> <td>   -2.338</td> <td>   -1.181</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.wv]</th> <td>   -0.8968</td> <td>    0.247</td> <td>   -3.636</td> <td> 0.000</td> <td>   -1.382</td> <td>   -0.411</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.wy]</th> <td>   -0.2285</td> <td>    0.313</td> <td>   -0.730</td> <td> 0.466</td> <td>   -0.844</td> <td>    0.387</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beertax</th>        <td>   -0.6559</td> <td>    0.188</td> <td>   -3.491</td> <td> 0.001</td> <td>   -1.026</td> <td>   -0.286</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>53.045</td> <th>  Durbin-Watson:     </th> <td>   1.517</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 219.863</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.585</td> <th>  Prob(JB):          </th> <td>1.81e-48</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.786</td> <th>  Cond. No.          </th> <td>    187.</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:               fat_rate   R-squared:                       0.905\n",
       "Model:                            OLS   Adj. R-squared:                  0.889\n",
       "Method:                 Least Squares   F-statistic:                     56.97\n",
       "Date:                Sat, 04 Mar 2023   Prob (F-statistic):          1.96e-120\n",
       "Time:                        13:52:53   Log-Likelihood:                 107.97\n",
       "No. Observations:                 336   AIC:                            -117.9\n",
       "Df Residuals:                     287   BIC:                             69.09\n",
       "Df Model:                          48                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
       "Intercept          3.4776      0.313     11.098      0.000       2.861       4.094\n",
       "C(state)[T.ar]    -0.6550      0.219     -2.990      0.003      -1.086      -0.224\n",
       "C(state)[T.az]    -0.5677      0.267     -2.129      0.034      -1.093      -0.043\n",
       "C(state)[T.ca]    -1.5095      0.304     -4.960      0.000      -2.109      -0.910\n",
       "C(state)[T.co]    -1.4843      0.287     -5.165      0.000      -2.050      -0.919\n",
       "C(state)[T.ct]    -1.8623      0.281     -6.638      0.000      -2.414      -1.310\n",
       "C(state)[T.de]    -1.3076      0.294     -4.448      0.000      -1.886      -0.729\n",
       "C(state)[T.fl]    -0.2681      0.139     -1.924      0.055      -0.542       0.006\n",
       "C(state)[T.ga]     0.5246      0.184      2.852      0.005       0.163       0.887\n",
       "C(state)[T.ia]    -1.5439      0.253     -6.092      0.000      -2.043      -1.045\n",
       "C(state)[T.id]    -0.6690      0.258     -2.593      0.010      -1.177      -0.161\n",
       "C(state)[T.il]    -1.9616      0.291     -6.730      0.000      -2.535      -1.388\n",
       "C(state)[T.in]    -1.4615      0.273     -5.363      0.000      -1.998      -0.925\n",
       "C(state)[T.ks]    -1.2232      0.245     -4.984      0.000      -1.706      -0.740\n",
       "C(state)[T.ky]    -1.2175      0.287     -4.240      0.000      -1.783      -0.652\n",
       "C(state)[T.la]    -0.8471      0.189     -4.490      0.000      -1.218      -0.476\n",
       "C(state)[T.ma]    -2.1097      0.276     -7.641      0.000      -2.653      -1.566\n",
       "C(state)[T.md]    -1.7064      0.283     -6.025      0.000      -2.264      -1.149\n",
       "C(state)[T.me]    -1.1079      0.191     -5.797      0.000      -1.484      -0.732\n",
       "C(state)[T.mi]    -1.4845      0.236     -6.290      0.000      -1.949      -1.020\n",
       "C(state)[T.mn]    -1.8972      0.265     -7.157      0.000      -2.419      -1.375\n",
       "C(state)[T.mo]    -1.2963      0.267     -4.861      0.000      -1.821      -0.771\n",
       "C(state)[T.ms]    -0.0291      0.148     -0.196      0.845      -0.321       0.263\n",
       "C(state)[T.mt]    -0.3604      0.264     -1.365      0.173      -0.880       0.159\n",
       "C(state)[T.nc]    -0.2905      0.120     -2.424      0.016      -0.526      -0.055\n",
       "C(state)[T.nd]    -1.6234      0.254     -6.396      0.000      -2.123      -1.124\n",
       "C(state)[T.ne]    -1.5222      0.249     -6.106      0.000      -2.013      -1.032\n",
       "C(state)[T.nh]    -1.2545      0.210     -5.983      0.000      -1.667      -0.842\n",
       "C(state)[T.nj]    -2.1057      0.307     -6.855      0.000      -2.710      -1.501\n",
       "C(state)[T.nm]     0.4264      0.254      1.677      0.095      -0.074       0.927\n",
       "C(state)[T.nv]    -0.6008      0.286     -2.101      0.037      -1.164      -0.038\n",
       "C(state)[T.ny]    -2.1867      0.299     -7.316      0.000      -2.775      -1.598\n",
       "C(state)[T.oh]    -1.6744      0.254     -6.597      0.000      -2.174      -1.175\n",
       "C(state)[T.ok]    -0.5451      0.169     -3.223      0.001      -0.878      -0.212\n",
       "C(state)[T.or]    -1.1680      0.286     -4.088      0.000      -1.730      -0.606\n",
       "C(state)[T.pa]    -1.7675      0.276     -6.402      0.000      -2.311      -1.224\n",
       "C(state)[T.ri]    -2.2651      0.294     -7.711      0.000      -2.843      -1.687\n",
       "C(state)[T.sc]     0.5572      0.110      5.065      0.000       0.341       0.774\n",
       "C(state)[T.sd]    -1.0037      0.210     -4.788      0.000      -1.416      -0.591\n",
       "C(state)[T.tn]    -0.8757      0.268     -3.267      0.001      -1.403      -0.348\n",
       "C(state)[T.tx]    -0.9175      0.246     -3.736      0.000      -1.401      -0.434\n",
       "C(state)[T.ut]    -1.1640      0.196     -5.926      0.000      -1.551      -0.777\n",
       "C(state)[T.va]    -1.2902      0.204     -6.320      0.000      -1.692      -0.888\n",
       "C(state)[T.vt]    -0.9660      0.211     -4.576      0.000      -1.382      -0.550\n",
       "C(state)[T.wa]    -1.6595      0.283     -5.854      0.000      -2.217      -1.102\n",
       "C(state)[T.wi]    -1.7593      0.294     -5.985      0.000      -2.338      -1.181\n",
       "C(state)[T.wv]    -0.8968      0.247     -3.636      0.000      -1.382      -0.411\n",
       "C(state)[T.wy]    -0.2285      0.313     -0.730      0.466      -0.844       0.387\n",
       "beertax           -0.6559      0.188     -3.491      0.001      -1.026      -0.286\n",
       "==============================================================================\n",
       "Omnibus:                       53.045   Durbin-Watson:                   1.517\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              219.863\n",
       "Skew:                           0.585   Prob(JB):                     1.81e-48\n",
       "Kurtosis:                       6.786   Cond. No.                         187.\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols(\"fat_rate ~ beertax + C(state)\", df).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 6\n",
    "\n",
    "Explain whey your results in Exercises 4 (without fixed effects) and Exercise 5 (with state fixed effects) look so different. What does this imply about states with high beer taxes?"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fixed Effects by Demeaning\n",
    "\n",
    "Rather than just add indicator variables, we'll now use a different strategy for estimating fixed effects called an \"entity-demeaning.\" This method is more computationally efficient, and can also help you understand how fixed effects work. \n",
    "\n",
    "Let's begin by assuming we want to estimate the following fixed-effect model:\n",
    "\n",
    "\\begin{align}\n",
    "FatalityRate_{it} = \\alpha + \\beta BeerTax_{it} + \\Psi Z_i + \\epsilon_{it} \\tag{1}\n",
    "\\end{align}\n",
    "\n",
    "Where $FatalityRate_{it}$ is the fatality rate of state $i$ in year $t$, $\\beta BeerTax_{it}$ is the beer tax of state $i$ in year $t$. $Z_i$ is a state fixed effect.\n",
    "\n",
    "Rather than adding indicator variables, however, we'll use entity-demean as follows: \n",
    "\n",
    "First, we take the average on both sides of the regression. Here $n$ is the number of periods. \n",
    "\n",
    "\\begin{align*}\n",
    "\\frac{1}{n} \\sum_{i=1}^n FatalityRate_{it} =&  \\,\\alpha+ \\beta_1 \\frac{1}{n} \\sum_{i=1}^n BeerTax_{it} + \\Psi \\frac{1}{n} \\sum_{i=1}^n Z_i + \\frac{1}{n} \\sum_{i=1}^n \\epsilon_{it} \\\\\n",
    "\\overline{FatalityRate}_i =& \\,\\alpha+ \\beta_1 \\overline{BeerTax}_i + \\Psi  Z_i + \\overline{\\epsilon}_i.  \\tag{2}\n",
    "\\end{align*}\n",
    "\n",
    "Substracting the  from the main equation yields:\n",
    "\n",
    "\\begin{align*}\n",
    "FatalityRate_{it} - \\overline{FatalityRate}_i =& \\, \\beta_1(BeerTax_{it}-\\overline{BeerTax}_i) + \\Psi (Z_i - Z_i) + (\\epsilon_{it} - \\overline{\\epsilon}_i)  \\\\\n",
    "\\overset{\\sim}{FatalityRate}_{it} =& \\, \\beta_1 \\overset{\\sim}{BeerTax}_{it} + \\overset{\\sim}{\\epsilon}_{it}  \\tag{3}\n",
    "\\end{align*}\n",
    "\n",
    "Where the $\\sim$ means values have been demeaned by group. \n",
    "\n",
    "By taking the difference between the value of each observation (state-year) and the mean value of the entity (state) over n periods, we analyze how the within-state variation of beer tax affects that of the fatality rate. Moreover, by doing so we no longer need to estimate the fixed effects of $Z_i$, saving computing power if we are working on a dataset with a large number of fixed effects."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 7\n",
    "\n",
    "Implement the above entity-demeaned approach to estimate the fixed-effects model by hand (use basic functions, not full tools like `PanelOLS` or `C()` notation in `python`, or `lfe` or `C()` notation in `R`). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>fat_rate_dm</td>   <th>  R-squared:         </th> <td>   0.041</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.038</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   14.19</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 04 Mar 2023</td> <th>  Prob (F-statistic):</th> <td>0.000196</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:52:53</td>     <th>  Log-Likelihood:    </th> <td>  107.97</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   336</td>      <th>  AIC:               </th> <td>  -211.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   334</td>      <th>  BIC:               </th> <td>  -204.3</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>  <td>-2.168e-17</td> <td>    0.010</td> <td>-2.26e-15</td> <td> 1.000</td> <td>   -0.019</td> <td>    0.019</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beertax_dm</th> <td>   -0.6559</td> <td>    0.174</td> <td>   -3.767</td> <td> 0.000</td> <td>   -0.998</td> <td>   -0.313</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>53.045</td> <th>  Durbin-Watson:     </th> <td>   1.517</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 219.863</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.585</td> <th>  Prob(JB):          </th> <td>1.81e-48</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.786</td> <th>  Cond. No.          </th> <td>    18.1</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:            fat_rate_dm   R-squared:                       0.041\n",
       "Model:                            OLS   Adj. R-squared:                  0.038\n",
       "Method:                 Least Squares   F-statistic:                     14.19\n",
       "Date:                Sat, 04 Mar 2023   Prob (F-statistic):           0.000196\n",
       "Time:                        13:52:53   Log-Likelihood:                 107.97\n",
       "No. Observations:                 336   AIC:                            -211.9\n",
       "Df Residuals:                     334   BIC:                            -204.3\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept  -2.168e-17      0.010  -2.26e-15      1.000      -0.019       0.019\n",
       "beertax_dm    -0.6559      0.174     -3.767      0.000      -0.998      -0.313\n",
       "==============================================================================\n",
       "Omnibus:                       53.045   Durbin-Watson:                   1.517\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              219.863\n",
       "Skew:                           0.585   Prob(JB):                     1.81e-48\n",
       "Kurtosis:                       6.786   Cond. No.                         18.1\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get demeaned variables\n",
    "df[\"beertax_dm\"] = df[\"beertax\"] - df.groupby(\"state\").beertax.transform(\"mean\")\n",
    "df[\"fat_rate_dm\"] = df[\"fat_rate\"] - df.groupby(\"state\").fat_rate.transform(\"mean\")\n",
    "\n",
    "# perform ols\n",
    "smf.ols(\n",
    "    \"fat_rate_dm ~ beertax_dm\", df\n",
    ").fit().summary()  # it should be the same as the output using PanelOls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 8\n",
    "\n",
    "Fit the model with state fixed-effect using `PanelOLS` / `lfe`. Compare it to your by-hand output. Interpret the result. \n",
    "\n",
    "(Note that your standard errors will change a little bit because PanelOLS clusters standard errors by state, which you may not have done above above.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.set_index([\"state\", \"year\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:               fat_rate   R-squared:                        0.0407\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.3805\n",
      "No. Observations:                 336   R-squared (Within):               0.0407\n",
      "Date:                Sat, Mar 04 2023   R-squared (Overall):             -0.3775\n",
      "Time:                        13:52:53   Log-likelihood                    107.97\n",
      "Cov. Estimator:            Unadjusted                                           \n",
      "                                        F-statistic:                      12.190\n",
      "Entities:                          48   P-value                           0.0006\n",
      "Avg Obs:                       7.0000   Distribution:                   F(1,287)\n",
      "Min Obs:                       7.0000                                           \n",
      "Max Obs:                       7.0000   F-statistic (robust):             12.190\n",
      "                                        P-value                           0.0006\n",
      "Time periods:                       7   Distribution:                   F(1,287)\n",
      "Avg Obs:                       48.000                                           \n",
      "Min Obs:                       48.000                                           \n",
      "Max Obs:                       48.000                                           \n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "            Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "beertax       -0.6559     0.1878    -3.4915     0.0006     -1.0256     -0.2861\n",
      "==============================================================================\n",
      "\n",
      "F-test for Poolability: 52.179\n",
      "P-value: 0.0000\n",
      "Distribution: F(47,287)\n",
      "\n",
      "Included effects: Entity\n"
     ]
    }
   ],
   "source": [
    "from linearmodels import PanelOLS\n",
    "\n",
    "# model with state fixed effect\n",
    "mod = PanelOLS.from_formula(\"fat_rate ~ beertax + EntityEffects\", data=df)\n",
    "print(mod.fit())"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 9\n",
    "\n",
    "Now (using `PanelOLS` or `lfe`) estimate a fixed effects model using the following specification. Add fixed effects for **both** the state and the year, as well as the other covariates you think are important $X_{it}$).\n",
    "\n",
    "(Note: you may want to make sure `PanelOLS` adds an intercept to aid in interpretation of controls if you include categorical variables. If you use `PanelOLS.from_formula()`, just put a `1+` in after the `~`, or add a column of 1s to your X matrix if you're working with numpy arrays.)\n",
    "\n",
    "Explain (a) the type of phenomenon we control for by adding `year` fixed effects, and (b) your choice of covariates. Cluster the standard error at the state level. Interpret the result.\n",
    "\n",
    "\\begin{align}\n",
    "FatalityRate_{it} = \\beta BeerTax_{it} + X_{it} + State_i + Year_t + \\epsilon_{it}\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:               fat_rate   R-squared:                        0.2939\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.8925\n",
      "No. Observations:                 336   R-squared (Within):              -0.2563\n",
      "Date:                Sat, Mar 04 2023   R-squared (Overall):             -0.8295\n",
      "Time:                        13:52:53   Log-likelihood                    167.33\n",
      "Cov. Estimator:             Clustered                                           \n",
      "                                        F-statistic:                      58.269\n",
      "Entities:                          48   P-value                           0.0000\n",
      "Avg Obs:                       7.0000   Distribution:                   F(2,280)\n",
      "Min Obs:                       7.0000                                           \n",
      "Max Obs:                       7.0000   F-statistic (robust):             18.060\n",
      "                                        P-value                           0.0000\n",
      "Time periods:                       7   Distribution:                   F(2,280)\n",
      "Avg Obs:                       48.000                                           \n",
      "Min Obs:                       48.000                                           \n",
      "Max Obs:                       48.000                                           \n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "            Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      3.0162     0.2245     13.433     0.0000      2.5742      3.4582\n",
      "beertax       -0.5398     0.3521    -1.5330     0.1264     -1.2329      0.1533\n",
      "unemp         -0.0951     0.0160    -5.9261     0.0000     -0.1267     -0.0635\n",
      "==============================================================================\n",
      "\n",
      "F-test for Poolability: 64.530\n",
      "P-value: 0.0000\n",
      "Distribution: F(53,280)\n",
      "\n",
      "Included effects: Entity, Time\n"
     ]
    }
   ],
   "source": [
    "# model with state and year fixed effect effects\n",
    "mod = PanelOLS.from_formula(\n",
    "    \"fat_rate ~ 1 + beertax + unemp \" \"+ EntityEffects + TimeEffects\", data=df\n",
    ")\n",
    "print(mod.fit(cov_type=\"clustered\", cluster_entity=True))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# I added unemployment rate because it won't be absorbed by \n",
    "# state or year fixed effectsâ€”it varies *within* year *across* states."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  },
  "vscode": {
   "interpreter": {
    "hash": "718fed28bf9f8c7851519acf2fb923cd655120b36de3b67253eeb0428bd33d2d"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
