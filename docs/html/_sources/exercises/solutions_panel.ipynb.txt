{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Traffic Death Analysis\n",
    "\n",
    "In this exercise, we will be analyzing the effect of alcohol taxes on traffic death in the United States.  The data set used in this exercise, `fatalities.csv`, is a state-year panel dataset (meaning it includes data on multiple states, and the data includes several years of data for each state. The data contains 336 observations on 34 variables. The variables used in the exercise are defined as follows:\n",
    "\n",
    "`state`: factor variable indicating states\n",
    "\n",
    "`year`: factor variable indicating years\n",
    "\n",
    "`beertax`: numeric variable, Tax on the case of beer\n",
    "\n",
    "In these exercises, we'll be looking at how beer taxes (which are believed to reduce alcohol consumption, potentially reducing drunk driving deaths) impact car accident fatality rates. \n",
    "\n",
    "More specifically, though, we'll be approaching our estimation of the impact of beer taxes in a few different ways in an effort to give you more of an intuitive sense of what happens when you add fixed effects to a regression. \n",
    "\n",
    "## Exercise 1\n",
    "\n",
    "Download and load the data from [this link](https://media.githubusercontent.com/media/nickeubank/MIDS_Data/master/us_driving_fatalities.csv), or by going to [www.github.com/nickeubank/MIDS_Data/](www.github.com/nickeubank/MIDS_Data/) and downloading the `us_driving_fatalities.csv` dataset. \n",
    "\n",
    "How many states does this dataset contain? What's the time frame of this dataset? (From which year to which year). And what constitutes a single observation (i.e. what is the unit of analysis for each row of the data?)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"https://media.githubusercontent.com/media/nickeubank/MIDS_Data/master/us_driving_fatalities.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>state</th>\n",
       "      <th>year</th>\n",
       "      <th>spirits</th>\n",
       "      <th>unemp</th>\n",
       "      <th>income</th>\n",
       "      <th>emppop</th>\n",
       "      <th>beertax</th>\n",
       "      <th>baptist</th>\n",
       "      <th>mormon</th>\n",
       "      <th>...</th>\n",
       "      <th>nfatal2124</th>\n",
       "      <th>afatal</th>\n",
       "      <th>pop</th>\n",
       "      <th>pop1517</th>\n",
       "      <th>pop1820</th>\n",
       "      <th>pop2124</th>\n",
       "      <th>milestot</th>\n",
       "      <th>unempus</th>\n",
       "      <th>emppopus</th>\n",
       "      <th>gsp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>al</td>\n",
       "      <td>1982</td>\n",
       "      <td>1.37</td>\n",
       "      <td>14.4</td>\n",
       "      <td>10544.152344</td>\n",
       "      <td>50.692039</td>\n",
       "      <td>1.539379</td>\n",
       "      <td>30.355700</td>\n",
       "      <td>0.32829</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>309.437988</td>\n",
       "      <td>3942002.25</td>\n",
       "      <td>208999.593750</td>\n",
       "      <td>221553.43750</td>\n",
       "      <td>290000.06250</td>\n",
       "      <td>28516.0</td>\n",
       "      <td>9.7</td>\n",
       "      <td>57.799999</td>\n",
       "      <td>-0.022125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>al</td>\n",
       "      <td>1983</td>\n",
       "      <td>1.36</td>\n",
       "      <td>13.7</td>\n",
       "      <td>10732.797852</td>\n",
       "      <td>52.147030</td>\n",
       "      <td>1.788991</td>\n",
       "      <td>30.333599</td>\n",
       "      <td>0.34341</td>\n",
       "      <td>...</td>\n",
       "      <td>35</td>\n",
       "      <td>341.834015</td>\n",
       "      <td>3960008.00</td>\n",
       "      <td>202000.078125</td>\n",
       "      <td>219125.46875</td>\n",
       "      <td>290000.15625</td>\n",
       "      <td>31032.0</td>\n",
       "      <td>9.6</td>\n",
       "      <td>57.900002</td>\n",
       "      <td>0.046558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>al</td>\n",
       "      <td>1984</td>\n",
       "      <td>1.32</td>\n",
       "      <td>11.1</td>\n",
       "      <td>11108.791016</td>\n",
       "      <td>54.168087</td>\n",
       "      <td>1.714286</td>\n",
       "      <td>30.311501</td>\n",
       "      <td>0.35924</td>\n",
       "      <td>...</td>\n",
       "      <td>34</td>\n",
       "      <td>304.872009</td>\n",
       "      <td>3988991.75</td>\n",
       "      <td>196999.968750</td>\n",
       "      <td>216724.09375</td>\n",
       "      <td>288000.15625</td>\n",
       "      <td>32961.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>59.500004</td>\n",
       "      <td>0.062798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>al</td>\n",
       "      <td>1985</td>\n",
       "      <td>1.28</td>\n",
       "      <td>8.9</td>\n",
       "      <td>11332.626953</td>\n",
       "      <td>55.271137</td>\n",
       "      <td>1.652542</td>\n",
       "      <td>30.289499</td>\n",
       "      <td>0.37579</td>\n",
       "      <td>...</td>\n",
       "      <td>45</td>\n",
       "      <td>276.742004</td>\n",
       "      <td>4021007.75</td>\n",
       "      <td>194999.734375</td>\n",
       "      <td>214349.03125</td>\n",
       "      <td>284000.31250</td>\n",
       "      <td>35091.0</td>\n",
       "      <td>7.2</td>\n",
       "      <td>60.100002</td>\n",
       "      <td>0.027490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>al</td>\n",
       "      <td>1986</td>\n",
       "      <td>1.23</td>\n",
       "      <td>9.8</td>\n",
       "      <td>11661.506836</td>\n",
       "      <td>56.514496</td>\n",
       "      <td>1.609907</td>\n",
       "      <td>30.267401</td>\n",
       "      <td>0.39311</td>\n",
       "      <td>...</td>\n",
       "      <td>29</td>\n",
       "      <td>360.716003</td>\n",
       "      <td>4049993.75</td>\n",
       "      <td>203999.890625</td>\n",
       "      <td>212000.00000</td>\n",
       "      <td>263000.28125</td>\n",
       "      <td>36259.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>60.700001</td>\n",
       "      <td>0.032143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0 state  year  spirits  unemp        income     emppop   beertax  \\\n",
       "0           1    al  1982     1.37   14.4  10544.152344  50.692039  1.539379   \n",
       "1           2    al  1983     1.36   13.7  10732.797852  52.147030  1.788991   \n",
       "2           3    al  1984     1.32   11.1  11108.791016  54.168087  1.714286   \n",
       "3           4    al  1985     1.28    8.9  11332.626953  55.271137  1.652542   \n",
       "4           5    al  1986     1.23    9.8  11661.506836  56.514496  1.609907   \n",
       "\n",
       "     baptist   mormon  ...  nfatal2124      afatal         pop        pop1517  \\\n",
       "0  30.355700  0.32829  ...          32  309.437988  3942002.25  208999.593750   \n",
       "1  30.333599  0.34341  ...          35  341.834015  3960008.00  202000.078125   \n",
       "2  30.311501  0.35924  ...          34  304.872009  3988991.75  196999.968750   \n",
       "3  30.289499  0.37579  ...          45  276.742004  4021007.75  194999.734375   \n",
       "4  30.267401  0.39311  ...          29  360.716003  4049993.75  203999.890625   \n",
       "\n",
       "        pop1820       pop2124 milestot  unempus   emppopus       gsp  \n",
       "0  221553.43750  290000.06250  28516.0      9.7  57.799999 -0.022125  \n",
       "1  219125.46875  290000.15625  31032.0      9.6  57.900002  0.046558  \n",
       "2  216724.09375  288000.15625  32961.0      7.5  59.500004  0.062798  \n",
       "3  214349.03125  284000.31250  35091.0      7.2  60.100002  0.027490  \n",
       "4  212000.00000  263000.28125  36259.0      7.0  60.700001  0.032143  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.state.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1982"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.year.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1988"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.year.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make sure all same min and max\n",
    "assert (df.groupby('state').year.min() == df.year.min()).all()\n",
    "assert (df.groupby('state').year.max() == df.year.max()).all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# So 48 states, running from 1982 to 1988\n",
    "# One row is one state-year. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 2\n",
    "\n",
    "We use the fatality rate per 10,000 as the dependent variable. Construct this variable. Name it as `fat_rate`.  Hint: You can compute it using total fatalities(`fatal`) and population (`pop`). Note that because `pop` is often the name of a method in Python, you may have to navigate around some issues. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['fat_rate'] = (df.fatal / df['pop']) * 10000"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 3\n",
    "\n",
    "Draw a scatter plot using `beertax` as the x-axis, and `fat_rate` as the y-axis. Draw a fitted line showing the correlation between these two variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fc0e858a860>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# fit a model\n",
    "from numpy.polynomial.polynomial import polyfit\n",
    "\n",
    "b, m = polyfit(df['beertax'], df['fat_rate'], 1)\n",
    "\n",
    "# scatterplot with fitted line\n",
    "plt.scatter('beertax', 'fat_rate',  data= df)\n",
    "plt.plot(df['beertax'], b + m * df['beertax'], '-', c = \"black\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 4\n",
    "\n",
    "Fit a simple OLS regression. This is what is called a \"pooled\" regression because we're \"pooling\" observations from different years into a single regression. What do your results imply about the relationship between Beer Taxes and fatalities?\n",
    "\n",
    "\\begin{align*}\n",
    "FatalityRate_i = \\beta_0 + \\beta_1 \\times BeerTax_i \\quad (1982 or 1988 \\text{ data}), \\\\\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>fat_rate</td>     <th>  R-squared:         </th> <td>   0.093</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.091</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   34.39</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 18 Feb 2020</td> <th>  Prob (F-statistic):</th> <td>1.08e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:13:24</td>     <th>  Log-Likelihood:    </th> <td> -271.04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   336</td>      <th>  AIC:               </th> <td>   546.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   334</td>      <th>  BIC:               </th> <td>   553.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>    1.8533</td> <td>    0.044</td> <td>   42.539</td> <td> 0.000</td> <td>    1.768</td> <td>    1.939</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beertax</th>   <td>    0.3646</td> <td>    0.062</td> <td>    5.865</td> <td> 0.000</td> <td>    0.242</td> <td>    0.487</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>66.653</td> <th>  Durbin-Watson:     </th> <td>   0.465</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 112.734</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.134</td> <th>  Prob(JB):          </th> <td>3.31e-25</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.707</td> <th>  Cond. No.          </th> <td>    2.76</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:               fat_rate   R-squared:                       0.093\n",
       "Model:                            OLS   Adj. R-squared:                  0.091\n",
       "Method:                 Least Squares   F-statistic:                     34.39\n",
       "Date:                Tue, 18 Feb 2020   Prob (F-statistic):           1.08e-08\n",
       "Time:                        20:13:24   Log-Likelihood:                -271.04\n",
       "No. Observations:                 336   AIC:                             546.1\n",
       "Df Residuals:                     334   BIC:                             553.7\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept      1.8533      0.044     42.539      0.000       1.768       1.939\n",
       "beertax        0.3646      0.062      5.865      0.000       0.242       0.487\n",
       "==============================================================================\n",
       "Omnibus:                       66.653   Durbin-Watson:                   0.465\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              112.734\n",
       "Skew:                           1.134   Prob(JB):                     3.31e-25\n",
       "Kurtosis:                       4.707   Cond. No.                         2.76\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "smf.ols('fat_rate ~ beertax', df).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 5\n",
    "\n",
    "Now estimate your model again, this time adding state fixed effects (using the `C()` notation and your normal linear model machinery). What does this result imply about the relationship between beer taxes and fatalities?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>fat_rate</td>     <th>  R-squared:         </th> <td>   0.905</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.889</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   56.97</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 18 Feb 2020</td> <th>  Prob (F-statistic):</th> <td>1.96e-120</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:13:24</td>     <th>  Log-Likelihood:    </th> <td>  107.97</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   336</td>      <th>  AIC:               </th> <td>  -117.9</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   287</td>      <th>  BIC:               </th> <td>   69.09</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    48</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>           <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>      <td>    3.4776</td> <td>    0.313</td> <td>   11.098</td> <td> 0.000</td> <td>    2.861</td> <td>    4.094</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ar]</th> <td>   -0.6550</td> <td>    0.219</td> <td>   -2.990</td> <td> 0.003</td> <td>   -1.086</td> <td>   -0.224</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.az]</th> <td>   -0.5677</td> <td>    0.267</td> <td>   -2.129</td> <td> 0.034</td> <td>   -1.093</td> <td>   -0.043</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ca]</th> <td>   -1.5095</td> <td>    0.304</td> <td>   -4.960</td> <td> 0.000</td> <td>   -2.109</td> <td>   -0.910</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.co]</th> <td>   -1.4843</td> <td>    0.287</td> <td>   -5.165</td> <td> 0.000</td> <td>   -2.050</td> <td>   -0.919</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ct]</th> <td>   -1.8623</td> <td>    0.281</td> <td>   -6.638</td> <td> 0.000</td> <td>   -2.414</td> <td>   -1.310</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.de]</th> <td>   -1.3076</td> <td>    0.294</td> <td>   -4.448</td> <td> 0.000</td> <td>   -1.886</td> <td>   -0.729</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.fl]</th> <td>   -0.2681</td> <td>    0.139</td> <td>   -1.924</td> <td> 0.055</td> <td>   -0.542</td> <td>    0.006</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ga]</th> <td>    0.5246</td> <td>    0.184</td> <td>    2.852</td> <td> 0.005</td> <td>    0.163</td> <td>    0.887</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ia]</th> <td>   -1.5439</td> <td>    0.253</td> <td>   -6.092</td> <td> 0.000</td> <td>   -2.043</td> <td>   -1.045</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.id]</th> <td>   -0.6690</td> <td>    0.258</td> <td>   -2.593</td> <td> 0.010</td> <td>   -1.177</td> <td>   -0.161</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.il]</th> <td>   -1.9616</td> <td>    0.291</td> <td>   -6.730</td> <td> 0.000</td> <td>   -2.535</td> <td>   -1.388</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.in]</th> <td>   -1.4615</td> <td>    0.273</td> <td>   -5.363</td> <td> 0.000</td> <td>   -1.998</td> <td>   -0.925</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ks]</th> <td>   -1.2232</td> <td>    0.245</td> <td>   -4.984</td> <td> 0.000</td> <td>   -1.706</td> <td>   -0.740</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ky]</th> <td>   -1.2175</td> <td>    0.287</td> <td>   -4.240</td> <td> 0.000</td> <td>   -1.783</td> <td>   -0.652</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.la]</th> <td>   -0.8471</td> <td>    0.189</td> <td>   -4.490</td> <td> 0.000</td> <td>   -1.218</td> <td>   -0.476</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ma]</th> <td>   -2.1097</td> <td>    0.276</td> <td>   -7.641</td> <td> 0.000</td> <td>   -2.653</td> <td>   -1.566</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.md]</th> <td>   -1.7064</td> <td>    0.283</td> <td>   -6.025</td> <td> 0.000</td> <td>   -2.264</td> <td>   -1.149</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.me]</th> <td>   -1.1079</td> <td>    0.191</td> <td>   -5.797</td> <td> 0.000</td> <td>   -1.484</td> <td>   -0.732</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.mi]</th> <td>   -1.4845</td> <td>    0.236</td> <td>   -6.290</td> <td> 0.000</td> <td>   -1.949</td> <td>   -1.020</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.mn]</th> <td>   -1.8972</td> <td>    0.265</td> <td>   -7.157</td> <td> 0.000</td> <td>   -2.419</td> <td>   -1.375</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.mo]</th> <td>   -1.2963</td> <td>    0.267</td> <td>   -4.861</td> <td> 0.000</td> <td>   -1.821</td> <td>   -0.771</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ms]</th> <td>   -0.0291</td> <td>    0.148</td> <td>   -0.196</td> <td> 0.845</td> <td>   -0.321</td> <td>    0.263</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.mt]</th> <td>   -0.3604</td> <td>    0.264</td> <td>   -1.365</td> <td> 0.173</td> <td>   -0.880</td> <td>    0.159</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nc]</th> <td>   -0.2905</td> <td>    0.120</td> <td>   -2.424</td> <td> 0.016</td> <td>   -0.526</td> <td>   -0.055</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nd]</th> <td>   -1.6234</td> <td>    0.254</td> <td>   -6.396</td> <td> 0.000</td> <td>   -2.123</td> <td>   -1.124</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ne]</th> <td>   -1.5222</td> <td>    0.249</td> <td>   -6.106</td> <td> 0.000</td> <td>   -2.013</td> <td>   -1.032</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nh]</th> <td>   -1.2545</td> <td>    0.210</td> <td>   -5.983</td> <td> 0.000</td> <td>   -1.667</td> <td>   -0.842</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nj]</th> <td>   -2.1057</td> <td>    0.307</td> <td>   -6.855</td> <td> 0.000</td> <td>   -2.710</td> <td>   -1.501</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nm]</th> <td>    0.4264</td> <td>    0.254</td> <td>    1.677</td> <td> 0.095</td> <td>   -0.074</td> <td>    0.927</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.nv]</th> <td>   -0.6008</td> <td>    0.286</td> <td>   -2.101</td> <td> 0.037</td> <td>   -1.164</td> <td>   -0.038</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ny]</th> <td>   -2.1867</td> <td>    0.299</td> <td>   -7.316</td> <td> 0.000</td> <td>   -2.775</td> <td>   -1.598</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.oh]</th> <td>   -1.6744</td> <td>    0.254</td> <td>   -6.597</td> <td> 0.000</td> <td>   -2.174</td> <td>   -1.175</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ok]</th> <td>   -0.5451</td> <td>    0.169</td> <td>   -3.223</td> <td> 0.001</td> <td>   -0.878</td> <td>   -0.212</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.or]</th> <td>   -1.1680</td> <td>    0.286</td> <td>   -4.088</td> <td> 0.000</td> <td>   -1.730</td> <td>   -0.606</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.pa]</th> <td>   -1.7675</td> <td>    0.276</td> <td>   -6.402</td> <td> 0.000</td> <td>   -2.311</td> <td>   -1.224</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ri]</th> <td>   -2.2651</td> <td>    0.294</td> <td>   -7.711</td> <td> 0.000</td> <td>   -2.843</td> <td>   -1.687</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.sc]</th> <td>    0.5572</td> <td>    0.110</td> <td>    5.065</td> <td> 0.000</td> <td>    0.341</td> <td>    0.774</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.sd]</th> <td>   -1.0037</td> <td>    0.210</td> <td>   -4.788</td> <td> 0.000</td> <td>   -1.416</td> <td>   -0.591</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.tn]</th> <td>   -0.8757</td> <td>    0.268</td> <td>   -3.267</td> <td> 0.001</td> <td>   -1.403</td> <td>   -0.348</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.tx]</th> <td>   -0.9175</td> <td>    0.246</td> <td>   -3.736</td> <td> 0.000</td> <td>   -1.401</td> <td>   -0.434</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.ut]</th> <td>   -1.1640</td> <td>    0.196</td> <td>   -5.926</td> <td> 0.000</td> <td>   -1.551</td> <td>   -0.777</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.va]</th> <td>   -1.2902</td> <td>    0.204</td> <td>   -6.320</td> <td> 0.000</td> <td>   -1.692</td> <td>   -0.888</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.vt]</th> <td>   -0.9660</td> <td>    0.211</td> <td>   -4.576</td> <td> 0.000</td> <td>   -1.382</td> <td>   -0.550</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.wa]</th> <td>   -1.6595</td> <td>    0.283</td> <td>   -5.854</td> <td> 0.000</td> <td>   -2.217</td> <td>   -1.102</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.wi]</th> <td>   -1.7593</td> <td>    0.294</td> <td>   -5.985</td> <td> 0.000</td> <td>   -2.338</td> <td>   -1.181</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.wv]</th> <td>   -0.8968</td> <td>    0.247</td> <td>   -3.636</td> <td> 0.000</td> <td>   -1.382</td> <td>   -0.411</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(state)[T.wy]</th> <td>   -0.2285</td> <td>    0.313</td> <td>   -0.730</td> <td> 0.466</td> <td>   -0.844</td> <td>    0.387</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beertax</th>        <td>   -0.6559</td> <td>    0.188</td> <td>   -3.491</td> <td> 0.001</td> <td>   -1.026</td> <td>   -0.286</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>53.045</td> <th>  Durbin-Watson:     </th> <td>   1.517</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 219.863</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.585</td> <th>  Prob(JB):          </th> <td>1.81e-48</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.786</td> <th>  Cond. No.          </th> <td>    187.</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:               fat_rate   R-squared:                       0.905\n",
       "Model:                            OLS   Adj. R-squared:                  0.889\n",
       "Method:                 Least Squares   F-statistic:                     56.97\n",
       "Date:                Tue, 18 Feb 2020   Prob (F-statistic):          1.96e-120\n",
       "Time:                        20:13:24   Log-Likelihood:                 107.97\n",
       "No. Observations:                 336   AIC:                            -117.9\n",
       "Df Residuals:                     287   BIC:                             69.09\n",
       "Df Model:                          48                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
       "Intercept          3.4776      0.313     11.098      0.000       2.861       4.094\n",
       "C(state)[T.ar]    -0.6550      0.219     -2.990      0.003      -1.086      -0.224\n",
       "C(state)[T.az]    -0.5677      0.267     -2.129      0.034      -1.093      -0.043\n",
       "C(state)[T.ca]    -1.5095      0.304     -4.960      0.000      -2.109      -0.910\n",
       "C(state)[T.co]    -1.4843      0.287     -5.165      0.000      -2.050      -0.919\n",
       "C(state)[T.ct]    -1.8623      0.281     -6.638      0.000      -2.414      -1.310\n",
       "C(state)[T.de]    -1.3076      0.294     -4.448      0.000      -1.886      -0.729\n",
       "C(state)[T.fl]    -0.2681      0.139     -1.924      0.055      -0.542       0.006\n",
       "C(state)[T.ga]     0.5246      0.184      2.852      0.005       0.163       0.887\n",
       "C(state)[T.ia]    -1.5439      0.253     -6.092      0.000      -2.043      -1.045\n",
       "C(state)[T.id]    -0.6690      0.258     -2.593      0.010      -1.177      -0.161\n",
       "C(state)[T.il]    -1.9616      0.291     -6.730      0.000      -2.535      -1.388\n",
       "C(state)[T.in]    -1.4615      0.273     -5.363      0.000      -1.998      -0.925\n",
       "C(state)[T.ks]    -1.2232      0.245     -4.984      0.000      -1.706      -0.740\n",
       "C(state)[T.ky]    -1.2175      0.287     -4.240      0.000      -1.783      -0.652\n",
       "C(state)[T.la]    -0.8471      0.189     -4.490      0.000      -1.218      -0.476\n",
       "C(state)[T.ma]    -2.1097      0.276     -7.641      0.000      -2.653      -1.566\n",
       "C(state)[T.md]    -1.7064      0.283     -6.025      0.000      -2.264      -1.149\n",
       "C(state)[T.me]    -1.1079      0.191     -5.797      0.000      -1.484      -0.732\n",
       "C(state)[T.mi]    -1.4845      0.236     -6.290      0.000      -1.949      -1.020\n",
       "C(state)[T.mn]    -1.8972      0.265     -7.157      0.000      -2.419      -1.375\n",
       "C(state)[T.mo]    -1.2963      0.267     -4.861      0.000      -1.821      -0.771\n",
       "C(state)[T.ms]    -0.0291      0.148     -0.196      0.845      -0.321       0.263\n",
       "C(state)[T.mt]    -0.3604      0.264     -1.365      0.173      -0.880       0.159\n",
       "C(state)[T.nc]    -0.2905      0.120     -2.424      0.016      -0.526      -0.055\n",
       "C(state)[T.nd]    -1.6234      0.254     -6.396      0.000      -2.123      -1.124\n",
       "C(state)[T.ne]    -1.5222      0.249     -6.106      0.000      -2.013      -1.032\n",
       "C(state)[T.nh]    -1.2545      0.210     -5.983      0.000      -1.667      -0.842\n",
       "C(state)[T.nj]    -2.1057      0.307     -6.855      0.000      -2.710      -1.501\n",
       "C(state)[T.nm]     0.4264      0.254      1.677      0.095      -0.074       0.927\n",
       "C(state)[T.nv]    -0.6008      0.286     -2.101      0.037      -1.164      -0.038\n",
       "C(state)[T.ny]    -2.1867      0.299     -7.316      0.000      -2.775      -1.598\n",
       "C(state)[T.oh]    -1.6744      0.254     -6.597      0.000      -2.174      -1.175\n",
       "C(state)[T.ok]    -0.5451      0.169     -3.223      0.001      -0.878      -0.212\n",
       "C(state)[T.or]    -1.1680      0.286     -4.088      0.000      -1.730      -0.606\n",
       "C(state)[T.pa]    -1.7675      0.276     -6.402      0.000      -2.311      -1.224\n",
       "C(state)[T.ri]    -2.2651      0.294     -7.711      0.000      -2.843      -1.687\n",
       "C(state)[T.sc]     0.5572      0.110      5.065      0.000       0.341       0.774\n",
       "C(state)[T.sd]    -1.0037      0.210     -4.788      0.000      -1.416      -0.591\n",
       "C(state)[T.tn]    -0.8757      0.268     -3.267      0.001      -1.403      -0.348\n",
       "C(state)[T.tx]    -0.9175      0.246     -3.736      0.000      -1.401      -0.434\n",
       "C(state)[T.ut]    -1.1640      0.196     -5.926      0.000      -1.551      -0.777\n",
       "C(state)[T.va]    -1.2902      0.204     -6.320      0.000      -1.692      -0.888\n",
       "C(state)[T.vt]    -0.9660      0.211     -4.576      0.000      -1.382      -0.550\n",
       "C(state)[T.wa]    -1.6595      0.283     -5.854      0.000      -2.217      -1.102\n",
       "C(state)[T.wi]    -1.7593      0.294     -5.985      0.000      -2.338      -1.181\n",
       "C(state)[T.wv]    -0.8968      0.247     -3.636      0.000      -1.382      -0.411\n",
       "C(state)[T.wy]    -0.2285      0.313     -0.730      0.466      -0.844       0.387\n",
       "beertax           -0.6559      0.188     -3.491      0.001      -1.026      -0.286\n",
       "==============================================================================\n",
       "Omnibus:                       53.045   Durbin-Watson:                   1.517\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              219.863\n",
       "Skew:                           0.585   Prob(JB):                     1.81e-48\n",
       "Kurtosis:                       6.786   Cond. No.                         187.\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols('fat_rate ~ beertax + C(state)', df).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 6\n",
    "\n",
    "Explain whey your results in Exercises 4 (without fixed effects) and Exercise 5 (with state fixed effects) look so different. What does this imply about states with high beer taxes?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fixed Effects by Demeaning\n",
    "\n",
    "Rather than just add indicator variables, we'll now use a different strategy for estimating fixed effects called an \"entity-demeaning.\" This method is more computationally efficient, and can also help you understand how fixed effects work. \n",
    "\n",
    "Let's begin by assuming we want to estimate the following fixed-effect model:\n",
    "\n",
    "\\begin{align}\n",
    "FatalityRate_{it} = \\beta BeerTax_{it} + Z_i + \\epsilon_{it} \\tag{1}\n",
    "\\end{align}\n",
    "\n",
    "Where $FatalityRate_{it}$ is the fatality rate of state $i$ in year $t$, $\\beta BeerTax_{it}$ is the beer tax of state $i$ in year $t$. $Z_i$ is a state fixed effect.\n",
    "\n",
    "Rather than adding indicator variables, however, we'll use entity-demean as follows: \n",
    "\n",
    "First, we take the average on both sides of the regression. Here $n$ is the number of periods. \n",
    "\n",
    "\\begin{align*}\n",
    "\\frac{1}{n} \\sum_{i=1}^n FatalityRate_{it} =& \\, \\beta_1 \\frac{1}{n} \\sum_{i=1}^n BeerTax_{it} + \\frac{1}{n} \\sum_{i=1}^n Z_i + \\frac{1}{n} \\sum_{i=1}^n \\epsilon_{it} \\\\\n",
    "\\overline{FatalityRate} =& \\, \\beta_1 \\overline{BeerTax}_i + Z_i + \\overline{\\epsilon}_i.  \\tag{2}\n",
    "\\end{align*}\n",
    "\n",
    "Substracting the  from the main equation yields:\n",
    "\n",
    "\\begin{align}\n",
    "\\begin{split}\n",
    "FatalityRate_{it} - \\overline{FatalityRate}_i =& \\, \\beta_1(BeerTax_{it}-\\overline{BeerTax}_i) + (u_{it} - \\overline{u}_i) \\\\\n",
    "\\overset{\\sim}{FatalityRate}_{it} =& \\, \\beta_1 \\overset{\\sim}{BeerTax}_{it} + \\overset{\\sim}{u}_{it}. \n",
    "\\end{split} \n",
    "\\end{align}\n",
    "\n",
    "By taking the difference between the value of each observation (state-year) and the mean value of the entity (state) over n periods, we analyze how the within-state variation of beer tax affects that of the fatality rate. Moreover, by doing so we no longer need to estimate the fixed effects of $Z_i$, saving computing power if we are working on a dataset with a large number of fixed effects."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 6\n",
    "\n",
    "Implement the above entity-demeaned approach to estimate the fixed-effects model by hand (use basic functions, not full tools like `PanelOLS` or `C()` notation in `python`, or `lfe` or `C()` notation in `R`). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>fat_rate_dm</td>   <th>  R-squared:         </th> <td>   0.041</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.038</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   14.19</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 18 Feb 2020</td> <th>  Prob (F-statistic):</th> <td>0.000196</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:13:24</td>     <th>  Log-Likelihood:    </th> <td>  107.97</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   336</td>      <th>  AIC:               </th> <td>  -211.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   334</td>      <th>  BIC:               </th> <td>  -204.3</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>  <td>-1.735e-17</td> <td>    0.010</td> <td>-1.81e-15</td> <td> 1.000</td> <td>   -0.019</td> <td>    0.019</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beertax_dm</th> <td>   -0.6559</td> <td>    0.174</td> <td>   -3.767</td> <td> 0.000</td> <td>   -0.998</td> <td>   -0.313</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>53.045</td> <th>  Durbin-Watson:     </th> <td>   1.517</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 219.863</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.585</td> <th>  Prob(JB):          </th> <td>1.81e-48</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.786</td> <th>  Cond. No.          </th> <td>    18.1</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:            fat_rate_dm   R-squared:                       0.041\n",
       "Model:                            OLS   Adj. R-squared:                  0.038\n",
       "Method:                 Least Squares   F-statistic:                     14.19\n",
       "Date:                Tue, 18 Feb 2020   Prob (F-statistic):           0.000196\n",
       "Time:                        20:13:24   Log-Likelihood:                 107.97\n",
       "No. Observations:                 336   AIC:                            -211.9\n",
       "Df Residuals:                     334   BIC:                            -204.3\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept  -1.735e-17      0.010  -1.81e-15      1.000      -0.019       0.019\n",
       "beertax_dm    -0.6559      0.174     -3.767      0.000      -0.998      -0.313\n",
       "==============================================================================\n",
       "Omnibus:                       53.045   Durbin-Watson:                   1.517\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              219.863\n",
       "Skew:                           0.585   Prob(JB):                     1.81e-48\n",
       "Kurtosis:                       6.786   Cond. No.                         18.1\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get demeaned variables\n",
    "df['beertax_dm'] = df['beertax'] -  df.groupby('state').beertax.transform('mean')\n",
    "df['fat_rate_dm'] = df['fat_rate']  -  df.groupby('state').fat_rate.transform('mean')\n",
    "\n",
    "# perform ols\n",
    "smf.ols('fat_rate_dm ~ beertax_dm', df).fit().summary() # it should be the same as the output using PanelOls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 7 \n",
    "\n",
    "Fit the model with state fixed-effect using `PanelOLS` / `lfe`. Compare it to your by-hand output. Interpret the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.set_index(['state', 'year'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:               fat_rate   R-squared:                        0.0407\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.3805\n",
      "No. Observations:                 336   R-squared (Within):               0.0407\n",
      "Date:                Tue, Feb 18 2020   R-squared (Overall):             -0.3775\n",
      "Time:                        20:13:24   Log-likelihood                    107.97\n",
      "Cov. Estimator:            Unadjusted                                           \n",
      "                                        F-statistic:                      12.190\n",
      "Entities:                          48   P-value                           0.0006\n",
      "Avg Obs:                       7.0000   Distribution:                   F(1,287)\n",
      "Min Obs:                       7.0000                                           \n",
      "Max Obs:                       7.0000   F-statistic (robust):             12.190\n",
      "                                        P-value                           0.0006\n",
      "Time periods:                       7   Distribution:                   F(1,287)\n",
      "Avg Obs:                       48.000                                           \n",
      "Min Obs:                       48.000                                           \n",
      "Max Obs:                       48.000                                           \n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "            Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "beertax       -0.6559     0.1878    -3.4915     0.0006     -1.0256     -0.2861\n",
      "==============================================================================\n",
      "\n",
      "F-test for Poolability: 52.179\n",
      "P-value: 0.0000\n",
      "Distribution: F(47,287)\n",
      "\n",
      "Included effects: Entity\n"
     ]
    }
   ],
   "source": [
    "from linearmodels import PanelOLS\n",
    "\n",
    "# model with state fixed effect\n",
    "mod = PanelOLS.from_formula('fat_rate ~ beertax + EntityEffects',\n",
    "                            data=df)\n",
    "print(mod.fit())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 8\n",
    "\n",
    "Now (using `PanelOLS` or `lfe`) estimate a fixed effects model using the following specification. Add fixed effects for **both** the state and the year, as well as the other covariates you think are important $X_{it}$). \n",
    "\n",
    "Explain (a) the type of phenomenon we control for by adding `year` fixed effects, and (b) your choice of covariates. Cluster the standard error at the state level. Interpret the result.\n",
    "\n",
    "\\begin{align}\n",
    "FatalityRate_{it} = \\beta BeerTax_{it} + X_{it} + State_i + Year_t + \\epsilon_{it}\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:               fat_rate   R-squared:                        0.0361\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.3701\n",
      "No. Observations:                 336   R-squared (Within):               0.0407\n",
      "Date:                Tue, Feb 18 2020   R-squared (Overall):             -0.3672\n",
      "Time:                        20:13:24   Log-likelihood                    115.04\n",
      "Cov. Estimator:             Clustered                                           \n",
      "                                        F-statistic:                      10.513\n",
      "Entities:                          48   P-value                           0.0013\n",
      "Avg Obs:                       7.0000   Distribution:                   F(1,281)\n",
      "Min Obs:                       7.0000                                           \n",
      "Max Obs:                       7.0000   F-statistic (robust):             2.8021\n",
      "                                        P-value                           0.0953\n",
      "Time periods:                       7   Distribution:                   F(1,281)\n",
      "Avg Obs:                       48.000                                           \n",
      "Min Obs:                       48.000                                           \n",
      "Max Obs:                       48.000                                           \n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "            Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "beertax       -0.6400     0.3823    -1.6740     0.0953     -1.3925      0.1126\n",
      "==============================================================================\n",
      "\n",
      "F-test for Poolability: 47.479\n",
      "P-value: 0.0000\n",
      "Distribution: F(53,281)\n",
      "\n",
      "Included effects: Entity, Time\n"
     ]
    }
   ],
   "source": [
    "# model with state and year fixed effect effects\n",
    "mod = PanelOLS.from_formula('fat_rate ~ beertax + EntityEffects + TimeEffects',\n",
    "                            data=df)\n",
    "print(mod.fit(cov_type='clustered', cluster_entity=True))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
