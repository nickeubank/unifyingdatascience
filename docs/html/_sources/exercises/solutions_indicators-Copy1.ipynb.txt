{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Interpreting Indicator Variables\n",
    "\n",
    "\n",
    "In this exercise we'll work with a (somewhat canonical) dataset on the prices, mileages, weights, and other characteristics of 74 automobiles. These data originally came from the April 1979 issue of Consumer Reports and from the United States Government EPA statistics on fuel consumption; they were compiled and published by Chambers et al. (1983).\n",
    "\n",
    "To get the data, follow [this link](https://github.com/nickeubank/MIDS_Data/blob/master/automobile_dataset.dta?raw=true) or go to [http://www.github.com/nickeubank/MIDS_Data](http://www.github.com/nickeubank/MIDS`Data) and download the `automobile_dataset.dta` file. \n",
    "\n",
    "## Indicator Variables and Omitted Variable Bias\n",
    "\n",
    "### Exercise 1\n",
    "\n",
    "Create a new variable named `guzzler` that takes the value of 1 if the car's miles per gallon (`mpg`) is less than 18 and takes value 0 otherwise (\"guzzler\" is a term for a car that consumes gas very quickly, or \"guzzles gas\"). Regress `price` on `guzzler` and interpret the coefficients. Do gas guzzlers cost more than the other cars? How much more?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>54</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>make</th>\n",
       "      <td>BMW 320i</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>9735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mpg</th>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rep78</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>headroom</th>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trunk</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weight</th>\n",
       "      <td>2650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>length</th>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>turn</th>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>displacement</th>\n",
       "      <td>121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gear_ratio</th>\n",
       "      <td>3.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>foreign</th>\n",
       "      <td>Foreign</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    54\n",
       "make          BMW 320i\n",
       "price             9735\n",
       "mpg                 25\n",
       "rep78                4\n",
       "headroom           2.5\n",
       "trunk               12\n",
       "weight            2650\n",
       "length             177\n",
       "turn                34\n",
       "displacement       121\n",
       "gear_ratio        3.64\n",
       "foreign        Foreign"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "cars = pd.read_stata('https://github.com/nickeubank/MIDS_Data/blob/master/automobile_dataset.dta?raw=true')\n",
    "cars.sample().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.379</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.370</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   43.90</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 18 Feb 2020</td> <th>  Prob (F-statistic):</th> <td>5.38e-09</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:25:58</td>     <th>  Log-Likelihood:    </th> <td> -678.10</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    74</td>      <th>  AIC:               </th> <td>   1360.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    72</td>      <th>  BIC:               </th> <td>   1365.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td> 5143.0893</td> <td>  312.807</td> <td>   16.442</td> <td> 0.000</td> <td> 4519.521</td> <td> 5766.658</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler</th>   <td> 4202.2440</td> <td>  634.243</td> <td>    6.626</td> <td> 0.000</td> <td> 2937.904</td> <td> 5466.584</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>37.244</td> <th>  Durbin-Watson:     </th> <td>   1.348</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 111.225</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.565</td> <th>  Prob(JB):          </th> <td>7.04e-25</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 8.126</td> <th>  Cond. No.          </th> <td>    2.50</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.379\n",
       "Model:                            OLS   Adj. R-squared:                  0.370\n",
       "Method:                 Least Squares   F-statistic:                     43.90\n",
       "Date:                Tue, 18 Feb 2020   Prob (F-statistic):           5.38e-09\n",
       "Time:                        20:25:58   Log-Likelihood:                -678.10\n",
       "No. Observations:                  74   AIC:                             1360.\n",
       "Df Residuals:                      72   BIC:                             1365.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept   5143.0893    312.807     16.442      0.000    4519.521    5766.658\n",
       "guzzler     4202.2440    634.243      6.626      0.000    2937.904    5466.584\n",
       "==============================================================================\n",
       "Omnibus:                       37.244   Durbin-Watson:                   1.348\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              111.225\n",
       "Skew:                           1.565   Prob(JB):                     7.04e-25\n",
       "Kurtosis:                       8.126   Cond. No.                         2.50\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cars['guzzler'] = (cars.mpg < 18).astype('int')\n",
    "import statsmodels.formula.api as smf\n",
    "smf.ols('price ~ guzzler', cars).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 2\n",
    "\n",
    "Create a scatter plot of `price` against `weight` and color code your markers by the value of `guzzler` (red for `guzzler` = 1 and green for `guzzler` = 0). \n",
    "\n",
    "Based on the graph you just created, do you think **not** controlling for `weight` might lead to omitted variable bias in the regression in Exercise 1? What is the direction of the bias?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (8769703215792)>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from plotnine import *\n",
    "(ggplot(cars, aes(x='weight', y='price', color='guzzler')) + geom_point())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3\n",
    "\n",
    "Regress `price` on `guzzler`, `weight`, `foreign`, `headroom`, and `displacement`. Interpret the coefficients. Do the regression results confirm your guess in Q3?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.596</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.566</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   20.04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 18 Feb 2020</td> <th>  Prob (F-statistic):</th> <td>3.14e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:25:58</td>     <th>  Log-Likelihood:    </th> <td> -662.20</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    74</td>      <th>  AIC:               </th> <td>   1336.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    68</td>      <th>  BIC:               </th> <td>   1350.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     5</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>          <td> -782.5353</td> <td> 1612.628</td> <td>   -0.485</td> <td> 0.629</td> <td>-4000.484</td> <td> 2435.414</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]</th> <td> 3278.9827</td> <td>  671.826</td> <td>    4.881</td> <td> 0.000</td> <td> 1938.375</td> <td> 4619.591</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler</th>            <td> 1977.1796</td> <td>  711.055</td> <td>    2.781</td> <td> 0.007</td> <td>  558.291</td> <td> 3396.068</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>weight</th>             <td>    1.9634</td> <td>    0.702</td> <td>    2.797</td> <td> 0.007</td> <td>    0.563</td> <td>    3.364</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>headroom</th>           <td> -736.7997</td> <td>  309.009</td> <td>   -2.384</td> <td> 0.020</td> <td>-1353.418</td> <td> -120.182</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>displacement</th>       <td>    8.9667</td> <td>    5.819</td> <td>    1.541</td> <td> 0.128</td> <td>   -2.646</td> <td>   20.579</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>22.179</td> <th>  Durbin-Watson:     </th> <td>   1.409</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  37.284</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.118</td> <th>  Prob(JB):          </th> <td>8.01e-09</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.663</td> <th>  Cond. No.          </th> <td>2.36e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 2.36e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.596\n",
       "Model:                            OLS   Adj. R-squared:                  0.566\n",
       "Method:                 Least Squares   F-statistic:                     20.04\n",
       "Date:                Tue, 18 Feb 2020   Prob (F-statistic):           3.14e-12\n",
       "Time:                        20:25:58   Log-Likelihood:                -662.20\n",
       "No. Observations:                  74   AIC:                             1336.\n",
       "Df Residuals:                      68   BIC:                             1350.\n",
       "Df Model:                           5                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "Intercept           -782.5353   1612.628     -0.485      0.629   -4000.484    2435.414\n",
       "foreign[T.Foreign]  3278.9827    671.826      4.881      0.000    1938.375    4619.591\n",
       "guzzler             1977.1796    711.055      2.781      0.007     558.291    3396.068\n",
       "weight                 1.9634      0.702      2.797      0.007       0.563       3.364\n",
       "headroom            -736.7997    309.009     -2.384      0.020   -1353.418    -120.182\n",
       "displacement           8.9667      5.819      1.541      0.128      -2.646      20.579\n",
       "==============================================================================\n",
       "Omnibus:                       22.179   Durbin-Watson:                   1.409\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               37.284\n",
       "Skew:                           1.118   Prob(JB):                     8.01e-09\n",
       "Kurtosis:                       5.663   Cond. No.                     2.36e+04\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 2.36e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols('price ~ guzzler + weight + foreign + headroom + displacement', cars).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 4\n",
    "\n",
    "Variable `rep78` indicates the car's repair record. The variable is poorly documented (we don't know that the value means) but take our word for it that the values from 1-5 indicate \"very poor\", \"poor\", \"acceptable\", \"good\", and \"very good\" record, respectively. \n",
    "\n",
    "Create five separate indicator variables from `rep78` and regress `price` on indicators for values 2 through 5. Also control for `headroom`, `weight`, `foreign`, and `displacement`. Interpret the coefficients on the indicator for `rep78 == 3`. \n",
    "\n",
    "(Note: You can use the `C()` method for creating indicator variables, but your answers will only be right if the omitted category is `rep78 == 1`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.593</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.531</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   9.557</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 18 Feb 2020</td> <th>  Prob (F-statistic):</th> <td>8.11e-09</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:25:58</td>     <th>  Log-Likelihood:    </th> <td> -616.77</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    69</td>      <th>  AIC:               </th> <td>   1254.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    59</td>      <th>  BIC:               </th> <td>   1276.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     9</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>          <td>-1852.4340</td> <td> 2284.628</td> <td>   -0.811</td> <td> 0.421</td> <td>-6423.964</td> <td> 2719.096</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(rep78)[T.2.0]</th>    <td>  951.3308</td> <td> 1676.704</td> <td>    0.567</td> <td> 0.573</td> <td>-2403.746</td> <td> 4306.408</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(rep78)[T.3.0]</th>    <td> 1352.9162</td> <td> 1539.781</td> <td>    0.879</td> <td> 0.383</td> <td>-1728.179</td> <td> 4434.011</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(rep78)[T.4.0]</th>    <td>  994.5742</td> <td> 1609.415</td> <td>    0.618</td> <td> 0.539</td> <td>-2225.857</td> <td> 4215.006</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(rep78)[T.5.0]</th>    <td> 1325.1545</td> <td> 1705.943</td> <td>    0.777</td> <td> 0.440</td> <td>-2088.429</td> <td> 4738.738</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]</th> <td> 3240.0049</td> <td>  807.012</td> <td>    4.015</td> <td> 0.000</td> <td> 1625.177</td> <td> 4854.833</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler</th>            <td> 1644.4650</td> <td>  769.925</td> <td>    2.136</td> <td> 0.037</td> <td>  103.848</td> <td> 3185.082</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>weight</th>             <td>    1.7544</td> <td>    0.883</td> <td>    1.988</td> <td> 0.051</td> <td>   -0.012</td> <td>    3.520</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>headroom</th>           <td> -755.1823</td> <td>  341.695</td> <td>   -2.210</td> <td> 0.031</td> <td>-1438.912</td> <td>  -71.452</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>displacement</th>       <td>   12.0412</td> <td>    7.472</td> <td>    1.612</td> <td> 0.112</td> <td>   -2.910</td> <td>   26.992</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>21.610</td> <th>  Durbin-Watson:     </th> <td>   1.430</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  33.697</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.181</td> <th>  Prob(JB):          </th> <td>4.82e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.478</td> <th>  Cond. No.          </th> <td>4.54e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 4.54e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.593\n",
       "Model:                            OLS   Adj. R-squared:                  0.531\n",
       "Method:                 Least Squares   F-statistic:                     9.557\n",
       "Date:                Tue, 18 Feb 2020   Prob (F-statistic):           8.11e-09\n",
       "Time:                        20:25:58   Log-Likelihood:                -616.77\n",
       "No. Observations:                  69   AIC:                             1254.\n",
       "Df Residuals:                      59   BIC:                             1276.\n",
       "Df Model:                           9                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "Intercept          -1852.4340   2284.628     -0.811      0.421   -6423.964    2719.096\n",
       "C(rep78)[T.2.0]      951.3308   1676.704      0.567      0.573   -2403.746    4306.408\n",
       "C(rep78)[T.3.0]     1352.9162   1539.781      0.879      0.383   -1728.179    4434.011\n",
       "C(rep78)[T.4.0]      994.5742   1609.415      0.618      0.539   -2225.857    4215.006\n",
       "C(rep78)[T.5.0]     1325.1545   1705.943      0.777      0.440   -2088.429    4738.738\n",
       "foreign[T.Foreign]  3240.0049    807.012      4.015      0.000    1625.177    4854.833\n",
       "guzzler             1644.4650    769.925      2.136      0.037     103.848    3185.082\n",
       "weight                 1.7544      0.883      1.988      0.051      -0.012       3.520\n",
       "headroom            -755.1823    341.695     -2.210      0.031   -1438.912     -71.452\n",
       "displacement          12.0412      7.472      1.612      0.112      -2.910      26.992\n",
       "==============================================================================\n",
       "Omnibus:                       21.610   Durbin-Watson:                   1.430\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               33.697\n",
       "Skew:                           1.181   Prob(JB):                     4.82e-08\n",
       "Kurtosis:                       5.478   Cond. No.                     4.54e+04\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 4.54e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols('price ~ C(rep78) + guzzler + weight + foreign + headroom + displacement', cars).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interaction Effects\n",
    "\n",
    "### Exercise 5\n",
    "\n",
    "You suspect that the effect of `guzzler` on `price` may be conditioned by whether or not the car is manufactured abroad. Regress `price` on `guzzler`, `foreign` **and their interaction,** controlling for `headroom`, `weight` and `displacement`. Without using mathematical language, explain to your grandma what the coefficient on the interaction term means."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.619</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.585</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   18.15</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 18 Feb 2020</td> <th>  Prob (F-statistic):</th> <td>2.21e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:25:58</td>     <th>  Log-Likelihood:    </th> <td> -660.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    74</td>      <th>  AIC:               </th> <td>   1334.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    67</td>      <th>  BIC:               </th> <td>   1350.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "               <td></td>                 <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                  <td> -391.7038</td> <td> 1588.834</td> <td>   -0.247</td> <td> 0.806</td> <td>-3563.030</td> <td> 2779.622</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]</th>         <td> 2929.3402</td> <td>  679.319</td> <td>    4.312</td> <td> 0.000</td> <td> 1573.413</td> <td> 4285.267</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler</th>                    <td> 1354.9011</td> <td>  760.244</td> <td>    1.782</td> <td> 0.079</td> <td> -162.552</td> <td> 2872.354</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guzzler:foreign[T.Foreign]</th> <td> 2797.6787</td> <td> 1381.501</td> <td>    2.025</td> <td> 0.047</td> <td>   40.190</td> <td> 5555.167</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>weight</th>                     <td>    1.6417</td> <td>    0.705</td> <td>    2.330</td> <td> 0.023</td> <td>    0.235</td> <td>    3.048</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>headroom</th>                   <td> -736.8717</td> <td>  302.195</td> <td>   -2.438</td> <td> 0.017</td> <td>-1340.056</td> <td> -133.688</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>displacement</th>               <td>   12.6296</td> <td>    5.972</td> <td>    2.115</td> <td> 0.038</td> <td>    0.710</td> <td>   24.549</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>26.353</td> <th>  Durbin-Watson:     </th> <td>   1.421</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  46.874</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.311</td> <th>  Prob(JB):          </th> <td>6.63e-11</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.885</td> <th>  Cond. No.          </th> <td>2.39e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 2.39e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.619\n",
       "Model:                            OLS   Adj. R-squared:                  0.585\n",
       "Method:                 Least Squares   F-statistic:                     18.15\n",
       "Date:                Tue, 18 Feb 2020   Prob (F-statistic):           2.21e-12\n",
       "Time:                        20:25:58   Log-Likelihood:                -660.00\n",
       "No. Observations:                  74   AIC:                             1334.\n",
       "Df Residuals:                      67   BIC:                             1350.\n",
       "Df Model:                           6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================================\n",
       "                                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------------------\n",
       "Intercept                   -391.7038   1588.834     -0.247      0.806   -3563.030    2779.622\n",
       "foreign[T.Foreign]          2929.3402    679.319      4.312      0.000    1573.413    4285.267\n",
       "guzzler                     1354.9011    760.244      1.782      0.079    -162.552    2872.354\n",
       "guzzler:foreign[T.Foreign]  2797.6787   1381.501      2.025      0.047      40.190    5555.167\n",
       "weight                         1.6417      0.705      2.330      0.023       0.235       3.048\n",
       "headroom                    -736.8717    302.195     -2.438      0.017   -1340.056    -133.688\n",
       "displacement                  12.6296      5.972      2.115      0.038       0.710      24.549\n",
       "==============================================================================\n",
       "Omnibus:                       26.353   Durbin-Watson:                   1.421\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               46.874\n",
       "Skew:                           1.311   Prob(JB):                     6.63e-11\n",
       "Kurtosis:                       5.885   Cond. No.                     2.39e+04\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 2.39e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols('price ~ guzzler * foreign + weight + headroom + displacement', cars).fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 6\n",
    "\n",
    "What is the price difference between a foreign guzzler and a foreign non-guzzler?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 7\n",
    "\n",
    "What is the price difference between a domestic non-guzzler and a foreign non-guzzler?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 8\n",
    "\n",
    "Regress `price` on `foreign`, `mpg` and their interaction, controlling for `headroom`, `weight` and `displacement`. Interpret the coefficients of the main independent variables. Explain in layman terms the coefficient on the interaction term."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.599</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.564</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   16.71</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 18 Feb 2020</td> <th>  Prob (F-statistic):</th> <td>1.12e-11</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:25:58</td>     <th>  Log-Likelihood:    </th> <td> -661.86</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    74</td>      <th>  AIC:               </th> <td>   1338.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    67</td>      <th>  BIC:               </th> <td>   1354.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>              <td>-1.232e+04</td> <td> 4465.992</td> <td>   -2.758</td> <td> 0.007</td> <td>-2.12e+04</td> <td>-3404.206</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]</th>     <td> 1.176e+04</td> <td> 2796.011</td> <td>    4.208</td> <td> 0.000</td> <td> 6184.000</td> <td> 1.73e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>mpg</th>                    <td>  259.8139</td> <td>  109.998</td> <td>    2.362</td> <td> 0.021</td> <td>   40.257</td> <td>  479.371</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>foreign[T.Foreign]:mpg</th> <td> -314.4806</td> <td>  109.360</td> <td>   -2.876</td> <td> 0.005</td> <td> -532.764</td> <td>  -96.197</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>weight</th>                 <td>    3.4327</td> <td>    0.856</td> <td>    4.008</td> <td> 0.000</td> <td>    1.723</td> <td>    5.142</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>headroom</th>               <td> -484.5821</td> <td>  319.958</td> <td>   -1.515</td> <td> 0.135</td> <td>-1123.222</td> <td>  154.058</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>displacement</th>           <td>   14.4670</td> <td>    5.839</td> <td>    2.478</td> <td> 0.016</td> <td>    2.813</td> <td>   26.121</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>22.563</td> <th>  Durbin-Watson:     </th> <td>   1.442</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  33.595</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.228</td> <th>  Prob(JB):          </th> <td>5.07e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.204</td> <th>  Cond. No.          </th> <td>6.89e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 6.89e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.599\n",
       "Model:                            OLS   Adj. R-squared:                  0.564\n",
       "Method:                 Least Squares   F-statistic:                     16.71\n",
       "Date:                Tue, 18 Feb 2020   Prob (F-statistic):           1.12e-11\n",
       "Time:                        20:25:58   Log-Likelihood:                -661.86\n",
       "No. Observations:                  74   AIC:                             1338.\n",
       "Df Residuals:                      67   BIC:                             1354.\n",
       "Df Model:                           6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==========================================================================================\n",
       "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------\n",
       "Intercept              -1.232e+04   4465.992     -2.758      0.007   -2.12e+04   -3404.206\n",
       "foreign[T.Foreign]      1.176e+04   2796.011      4.208      0.000    6184.000    1.73e+04\n",
       "mpg                      259.8139    109.998      2.362      0.021      40.257     479.371\n",
       "foreign[T.Foreign]:mpg  -314.4806    109.360     -2.876      0.005    -532.764     -96.197\n",
       "weight                     3.4327      0.856      4.008      0.000       1.723       5.142\n",
       "headroom                -484.5821    319.958     -1.515      0.135   -1123.222     154.058\n",
       "displacement              14.4670      5.839      2.478      0.016       2.813      26.121\n",
       "==============================================================================\n",
       "Omnibus:                       22.563   Durbin-Watson:                   1.442\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               33.595\n",
       "Skew:                           1.228   Prob(JB):                     5.07e-08\n",
       "Kurtosis:                       5.204   Cond. No.                     6.89e+04\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 6.89e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols('price ~ foreign * mpg + weight + headroom + displacement', cars).fit().summary()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
