{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Matching Exercise \n",
    "\n",
    "In this exercise, we'll be evaluating how getting a college degree impacts earnings in the US using matching.\n",
    "\n",
    "## Matching Packages: Python v. R\n",
    "\n",
    "Just as the best tools for machine learning tend to be in Python since they're developed by CS people (who prefer Python), most of the best tools for causal inference are implemented in R since innovation in causal inference tends to be lead by social scientists using R. As a result, the most well developed matching package is called [MatchIt](https://kosukeimai.github.io/MatchIt/index.html), and is only available in R (though you can always call it from Python using `rpy2`). \n",
    "\n",
    "In the last year, though, a group of computer scientists and statisticians here at Duke have made some great advancements in matching (especially the computational side of things), and they recently released a set of matching packages in both R and Python that we'll be using today. They have some great algorithms we'll use today, but be aware these packages aren't as mature, and aren't general purpose packages yet. So if you ever get deep into matching, be aware you will probably still want to make at least partial use of the R package [MatchIt](https://kosukeimai.github.io/MatchIt/index.html), as well as some other R packages for new innovative techniques (like [Matching Frontier estimation](https://projects.iq.harvard.edu/frontier/home)), or [Adaptive Hyper-Box Matching](https://almost-matching-exactly.github.io/AHB-R-package/). \n",
    "\n",
    "## Installing dame-flame. \n",
    "\n",
    "For this lesson, begin by installing `dame-flame` with `pip install dame-flame` (it's not on conda yet). \n",
    "\n",
    "[DAME](https://almost-matching-exactly.github.io/DAME-FLAME-Python-Package) is an algorithm that we can use for a version of course exact matching. The package only accepts a list of categorical variables, and then attempts to match pairs that match exactly on those variables. That means that if you want to match on, say, age, you have to break it up into categories (say, under 18, 18-29, 30-39, etc. etc.). \n",
    "\n",
    "Of course, one cannot always find exact matches on all variables, so what DAME does is:\n",
    "\n",
    "1. Find all observations that match on *all* matching variables. \n",
    "2. Figure out which matching variable is least useful in predicting the outcome of interest $Y$ and drops that, then tries to match the remaining observations on the narrowed set of matching variables. \n",
    "3. This repeats until you run out of variables, all observations are matched, or you hit a stopping run (namely: quality of matches falls below a threshold). \n",
    "\n",
    "In addition, the lab has also created FLAME, which does the same thing, but employs some tricks to make it *massively* more computationally efficient, meaning it can be used on datasets with millions of observations (which most matching algorithms cannot). It's a little less accurate, but an amazing contribution never the less. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Setup\n",
    "\n",
    "To save you some time and let you focus on matching, I've *pre-cleaned* about one month worth of of data from the US Current Population Survey data we used for our [gender discrimination analysis](exercises/exercises_regression_incomeineq.ipynb). You can download the data [from here](https://github.com/nickeubank/MIDS_Data/blob/master/Current_Population_Survey/cps_for_matching.dta?raw=true\"), or read it directly with:\n",
    "\n",
    "```python \n",
    "cps = pd.read_stata(\n",
    "    \"https://github.com/nickeubank/MIDS_Data/blob/master\"\n",
    "    \"/Current_Population_Survey/cps_for_matching.dta?raw=true\"\n",
    ")\n",
    "```\n",
    "\n",
    "Load the data and quickly familiarize yourself with its contents. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load critical packages\n",
    "%load_ext lab_black\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import dame_flame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load our Current Population Survey data\n",
    "# a regular  survey of US citizens\n",
    "\n",
    "cps = pd.read_stata(\n",
    "    \"https://github.com/nickeubank/MIDS_Data/blob/master\"\n",
    "    \"/Current_Population_Survey/cps_for_matching.dta?raw=true\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>annual_earnings</th>\n",
       "      <th>female</th>\n",
       "      <th>simplified_race</th>\n",
       "      <th>has_college</th>\n",
       "      <th>age</th>\n",
       "      <th>county</th>\n",
       "      <th>class94</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>151404</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>0-WV</td>\n",
       "      <td>Private, For Profit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>123453</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>251-TX</td>\n",
       "      <td>Private, For Profit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>187982</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>5-MA</td>\n",
       "      <td>Self-Employed, Unincorporated</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>122356</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>0-TN</td>\n",
       "      <td>Private, Nonprofit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>210750</td>\n",
       "      <td>42900.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0-IA</td>\n",
       "      <td>Private, For Profit</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index  annual_earnings  female  simplified_race  has_college  age  county  \\\n",
       "0  151404              NaN       1              3.0            1   30    0-WV   \n",
       "1  123453              NaN       0              0.0            0   21  251-TX   \n",
       "2  187982              NaN       0              0.0            0   40    5-MA   \n",
       "3  122356              NaN       1              0.0            1   27    0-TN   \n",
       "4  210750          42900.0       1              0.0            0   52    0-IA   \n",
       "\n",
       "                         class94  \n",
       "0            Private, For Profit  \n",
       "1            Private, For Profit  \n",
       "2  Self-Employed, Unincorporated  \n",
       "3             Private, Nonprofit  \n",
       "4            Private, For Profit  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Take a look at the data\n",
    "cps.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting To Know Your Data\n",
    "\n",
    "Before you start matching, it is important to examine your data to ensure that matching is feasible (you have some overlap the the features of people in the treated and untreated groups), and also that there is a reason *to* match: either you're unsure about some of the functional forms at play, or your have some imbalance between the two groups. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 1\n",
    "\n",
    "Show the raw difference of `annual_earnings` between those with and without a college degree (`has_college`). Is the difference statistically significant?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>     <td>annual_earnings</td> <th>  R-squared:         </th> <td>   0.063</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.063</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   370.2</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 23 Feb 2021</td> <th>  Prob (F-statistic):</th> <td>6.56e-80</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>09:39:20</td>     <th>  Log-Likelihood:    </th> <td> -63018.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  5515</td>      <th>  AIC:               </th> <td>1.260e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  5513</td>      <th>  BIC:               </th> <td>1.261e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>   <td> 3.887e+04</td> <td>  336.007</td> <td>  115.669</td> <td> 0.000</td> <td> 3.82e+04</td> <td> 3.95e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>has_college</th> <td> 1.416e+04</td> <td>  735.820</td> <td>   19.242</td> <td> 0.000</td> <td> 1.27e+04</td> <td> 1.56e+04</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>2214.375</td> <th>  Durbin-Watson:     </th> <td>   1.974</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>10578.287</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 1.910</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td> 8.608</td>  <th>  Cond. No.          </th> <td>    2.59</td> \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:        annual_earnings   R-squared:                       0.063\n",
       "Model:                            OLS   Adj. R-squared:                  0.063\n",
       "Method:                 Least Squares   F-statistic:                     370.2\n",
       "Date:                Tue, 23 Feb 2021   Prob (F-statistic):           6.56e-80\n",
       "Time:                        09:39:20   Log-Likelihood:                -63018.\n",
       "No. Observations:                5515   AIC:                         1.260e+05\n",
       "Df Residuals:                    5513   BIC:                         1.261e+05\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===============================================================================\n",
       "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------\n",
       "Intercept    3.887e+04    336.007    115.669      0.000    3.82e+04    3.95e+04\n",
       "has_college  1.416e+04    735.820     19.242      0.000    1.27e+04    1.56e+04\n",
       "==============================================================================\n",
       "Omnibus:                     2214.375   Durbin-Watson:                   1.974\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            10578.287\n",
       "Skew:                           1.910   Prob(JB):                         0.00\n",
       "Kurtosis:                       8.608   Cond. No.                         2.59\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "\n",
    "smf.ols(\"annual_earnings ~ has_college\", cps).fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# About 14,000 a year, and it's very significant."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 2\n",
    "\n",
    "Next we can check for balance. Check the share of people in different racial groups who have college degrees. Are those differences statistically significant? \n",
    "\n",
    "Does the distribution also look different across counties (I don't need statistical significance for this)?\n",
    "\n",
    "\n",
    "Does the data seem balanced?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>has_college</td>   <th>  R-squared:         </th> <td>   0.032</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.032</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   122.1</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 23 Feb 2021</td> <th>  Prob (F-statistic):</th> <td>7.74e-78</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>09:39:20</td>     <th>  Log-Likelihood:    </th> <td> -7675.0</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td> 11150</td>      <th>  AIC:               </th> <td>1.536e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td> 11146</td>      <th>  BIC:               </th> <td>1.539e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "              <td></td>                 <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                 <td>    0.4382</td> <td>    0.006</td> <td>   79.420</td> <td> 0.000</td> <td>    0.427</td> <td>    0.449</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(simplified_race)[T.1.0]</th> <td>   -0.1206</td> <td>    0.016</td> <td>   -7.507</td> <td> 0.000</td> <td>   -0.152</td> <td>   -0.089</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(simplified_race)[T.2.0]</th> <td>   -0.2398</td> <td>    0.014</td> <td>  -17.682</td> <td> 0.000</td> <td>   -0.266</td> <td>   -0.213</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(simplified_race)[T.3.0]</th> <td>    0.0367</td> <td>    0.016</td> <td>    2.261</td> <td> 0.024</td> <td>    0.005</td> <td>    0.069</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>46681.807</td> <th>  Durbin-Watson:     </th> <td>   1.965</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>   <th>  Jarque-Bera (JB):  </th> <td>1670.333</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 0.377</td>   <th>  Prob(JB):          </th> <td>    0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td> 1.261</td>   <th>  Cond. No.          </th> <td>    3.97</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:            has_college   R-squared:                       0.032\n",
       "Model:                            OLS   Adj. R-squared:                  0.032\n",
       "Method:                 Least Squares   F-statistic:                     122.1\n",
       "Date:                Tue, 23 Feb 2021   Prob (F-statistic):           7.74e-78\n",
       "Time:                        09:39:20   Log-Likelihood:                -7675.0\n",
       "No. Observations:               11150   AIC:                         1.536e+04\n",
       "Df Residuals:                   11146   BIC:                         1.539e+04\n",
       "Df Model:                           3                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=============================================================================================\n",
       "                                coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------------\n",
       "Intercept                     0.4382      0.006     79.420      0.000       0.427       0.449\n",
       "C(simplified_race)[T.1.0]    -0.1206      0.016     -7.507      0.000      -0.152      -0.089\n",
       "C(simplified_race)[T.2.0]    -0.2398      0.014    -17.682      0.000      -0.266      -0.213\n",
       "C(simplified_race)[T.3.0]     0.0367      0.016      2.261      0.024       0.005       0.069\n",
       "==============================================================================\n",
       "Omnibus:                    46681.807   Durbin-Watson:                   1.965\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1670.333\n",
       "Skew:                           0.377   Prob(JB):                         0.00\n",
       "Kurtosis:                       1.261   Cond. No.                         3.97\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.ols(\"has_college ~ C(simplified_race)\", cps).fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">has_college</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>county</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>71-MO</th>\n",
       "      <td>4.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>700-VA</th>\n",
       "      <td>3.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69-NY</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69-FL</th>\n",
       "      <td>4.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17-MD</th>\n",
       "      <td>2.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75-CA</th>\n",
       "      <td>17.0</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>0.332106</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21-NJ</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19-NJ</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81-IN</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171-MN</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>326 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       has_college                                             \n",
       "             count      mean       std  min  25%  50%  75%  max\n",
       "county                                                         \n",
       "71-MO          4.0  0.000000  0.000000  0.0  0.0  0.0  0.0  0.0\n",
       "700-VA         3.0  0.000000  0.000000  0.0  0.0  0.0  0.0  0.0\n",
       "69-NY          1.0  0.000000       NaN  0.0  0.0  0.0  0.0  0.0\n",
       "69-FL          4.0  0.000000  0.000000  0.0  0.0  0.0  0.0  0.0\n",
       "17-MD          2.0  0.000000  0.000000  0.0  0.0  0.0  0.0  0.0\n",
       "...            ...       ...       ...  ...  ...  ...  ...  ...\n",
       "75-CA         17.0  0.882353  0.332106  0.0  1.0  1.0  1.0  1.0\n",
       "21-NJ          4.0  1.000000  0.000000  1.0  1.0  1.0  1.0  1.0\n",
       "19-NJ          2.0  1.000000  0.000000  1.0  1.0  1.0  1.0  1.0\n",
       "81-IN          1.0  1.000000       NaN  1.0  1.0  1.0  1.0  1.0\n",
       "171-MN         1.0  1.000000       NaN  1.0  1.0  1.0  1.0  1.0\n",
       "\n",
       "[326 rows x 8 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cps.groupby(\"county\")[[\"has_college\"]].describe().sort_values((\"has_college\", \"mean\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>has_college</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>326.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.390058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.207616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.262319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       has_college\n",
       "count   326.000000\n",
       "mean      0.390058\n",
       "std       0.207616\n",
       "min       0.000000\n",
       "25%       0.262319\n",
       "50%       0.375000\n",
       "75%       0.500000\n",
       "max       1.000000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cps.groupby(\"county\")[[\"has_college\"]].mean().describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Good in the middle, but many counties have no college grads, and a few only have college grads."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3\n",
    "\n",
    "One of the other advantages of matching is that even when you have balanced data, you don't have to go through the process of testing out different functional forms to see what fits the data base. \n",
    "\n",
    "In our last exercise, we looked at the relationship between gender and earnings \"controlling for age\", where we just put in age as a linear control. Plot a non-linear regression of annual_earnings on age (if you're using `plotnine`, use `geom_smooth(method=\"lowess\")`. \n",
    "\n",
    "Does the relationship look linear?\n",
    "\n",
    "Does this speak to why it's nice to not have to think about functional forms with matching as much?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Nick/miniconda3/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (8775626788821)>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from plotnine import *\n",
    "\n",
    "(ggplot(cps, aes(x=\"age\", y=\"annual_earnings\")) + geom_smooth(method=\"lowess\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Not even remotely linear. Thank goodness we don't have to worry about that with matching!\n",
    "# Though it wouldn't be *that* hard to fit a quadratic."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Matching!\n",
    "\n",
    "Because DAME is an implementation of exact matching, we have to discretize all of our continuous variables. Thankfully, in this case we only have `age`, so this shouldn't be too hard!\n",
    "\n",
    "### Exercise 4\n",
    "\n",
    "Create a new variable that discretizes age into a single value for each decade of age. \n",
    "\n",
    "Because CPS only has employment data on people 18 or over, though, include people who are 18 or 19 with the 20 year olds so that group isn't too small, and if you see any other really small groups, please merge those too. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    2760\n",
       "4    2551\n",
       "5    2397\n",
       "2    1990\n",
       "6    1236\n",
       "7     173\n",
       "8      43\n",
       "Name: discretized_age, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cps[\"discretized_age\"] = cps.age // 10\n",
    "cps.loc[cps[\"discretized_age\"] == 1, \"discretized_age\"] = 2\n",
    "cps[\"discretized_age\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 70 and 80 year olds are tiny groups.\n",
    "cps.loc[cps[\"discretized_age\"] == 8, \"discretized_age\"] = 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 5\n",
    "\n",
    "We also have to covert our string variables into numeric variables for DAME, so convert `county` and `class94` to a numeric vector of intergers. \n",
    "\n",
    "(Note: it's not clear whether `class94` belongs: if it reflects people choosing fields based on passion, it belongs; if people choose certain jobs because of their degrees, its not something we'd actually want in our regression. \n",
    "\n",
    "Hint: if you use `pd.Categorical` to convert you var to a categorical, you can pull the underlying integer codes with `.codes`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41     576\n",
       "200    275\n",
       "12     230\n",
       "33     225\n",
       "51     223\n",
       "      ... \n",
       "263      1\n",
       "213      1\n",
       "285      1\n",
       "154      1\n",
       "142      1\n",
       "Name: county, Length: 326, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cps[\"county\"] = pd.Categorical(cps[\"county\"]).codes\n",
    "cps[\"county\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    7809\n",
       "1     740\n",
       "4     706\n",
       "2     615\n",
       "6     552\n",
       "5     387\n",
       "0     337\n",
       "7       4\n",
       "Name: class94, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cps[\"class94\"] = pd.Categorical(cps[\"class94\"]).codes\n",
    "cps[\"class94\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let's Do Matching with DAME\n",
    "\n",
    "### Exercise 6\n",
    "\n",
    "First, drop all the variables you *don't* want in matching (e.g. your original `age` variable), and any observations for which `annual_earnings` is missing. \n",
    "\n",
    "You will probably also have to drop a column named `index`: DAME will try and match on ANY included variables, and so because there was a column called `index` in the data we imported, if we leave it in DAME will try (and obviously fail) to match on index. \n",
    "\n",
    "Also, it's best to reset your index, as `dame_flame` using index labels to identify matches. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>annual_earnings</th>\n",
       "      <th>female</th>\n",
       "      <th>simplified_race</th>\n",
       "      <th>has_college</th>\n",
       "      <th>county</th>\n",
       "      <th>class94</th>\n",
       "      <th>discretized_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>42900.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>31200.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20020.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22859.2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>73860.8</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5510</th>\n",
       "      <td>33800.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>247</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5511</th>\n",
       "      <td>23920.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>272</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5512</th>\n",
       "      <td>31200.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>246</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5513</th>\n",
       "      <td>37440.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5514</th>\n",
       "      <td>26000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5515 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      annual_earnings  female  simplified_race  has_college  county  class94  \\\n",
       "0             42900.0       1              0.0            0      10        3   \n",
       "1             31200.0       0              2.0            0      31        3   \n",
       "2             20020.0       0              0.0            1       8        3   \n",
       "3             22859.2       0              0.0            0      44        1   \n",
       "4             73860.8       0              0.0            1      24        3   \n",
       "...               ...     ...              ...          ...     ...      ...   \n",
       "5510          33800.0       1              3.0            0     247        3   \n",
       "5511          23920.0       0              3.0            0     272        3   \n",
       "5512          31200.0       0              2.0            0     246        3   \n",
       "5513          37440.0       0              0.0            0      99        3   \n",
       "5514          26000.0       0              1.0            0      23        2   \n",
       "\n",
       "      discretized_age  \n",
       "0                   5  \n",
       "1                   3  \n",
       "2                   6  \n",
       "3                   4  \n",
       "4                   3  \n",
       "...               ...  \n",
       "5510                3  \n",
       "5511                5  \n",
       "5512                2  \n",
       "5513                2  \n",
       "5514                5  \n",
       "\n",
       "[5515 rows x 7 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for_matching = cps.drop([\"age\", \"index\"], axis=\"columns\")\n",
    "for_matching = for_matching[for_matching.annual_earnings.notnull()]\n",
    "for_matching = for_matching.reset_index(drop=True)\n",
    "for_matching"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 7\n",
    "\n",
    "The syntax of `dame_flame` is similar to the syntax of `sklearn`. If you start with a dataset called `my_data` with a `treat` variable with treatment assignment and an `outcome` variable for my outcome of interest ($Y$), the syntax to do basic matching would be:\n",
    "\n",
    "```python\n",
    "import dame_flame\n",
    "model = dame_flame.matching.DAME(repeats=False, verbose=3, want_pe=True)\n",
    "model.fit(\n",
    "    my_data,\n",
    "    treatment_column_name=\"treat\",\n",
    "    outcome_column_name=\"outcome\",\n",
    ")\n",
    "result = model.predict(my_data)\n",
    "```\n",
    "\n",
    "Where the arguments:\n",
    "\n",
    "- `repeats=False` says that I only want each observation to get matched once. We'll talk about what happens if we use `repeats=True` below. \n",
    "- `verbose=3` tells dame to report everything it's doing as it goes. \n",
    "- `want_pe` says \"please include the predictive error in your printout at each step\". This is a measure of match quality. \n",
    "\n",
    "So run DAME on your data!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration number:  1\n",
      "\tNumber of matched groups formed in total:  370\n",
      "\tUnmatched treated units:  644 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  3187 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  0\n",
      "\tNumber of matches made in this iteration:  1684\n",
      "\tNumber of matches made so far:  1684\n",
      "\tIn this iteration, the covariates dropped are:  set()\n",
      "Iteration number:  2\n",
      "\tNumber of matched groups formed in total:  494\n",
      "\tUnmatched treated units:  25 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  180 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  1199421883.1095908\n",
      "\tNumber of matches made in this iteration:  3626\n",
      "\tNumber of matches made so far:  5310\n",
      "\tIn this iteration, the covariates dropped are:  frozenset({'county'})\n",
      "Iteration number:  3\n",
      "\tNumber of matched groups formed in total:  494\n",
      "\tUnmatched treated units:  25 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  180 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  1204727749.8949614\n",
      "\tNumber of matches made in this iteration:  0\n",
      "\tNumber of matches made so far:  5310\n",
      "\tIn this iteration, the covariates dropped are:  frozenset({'simplified_race'})\n",
      "Iteration number:  4\n",
      "\tNumber of matched groups formed in total:  505\n",
      "\tUnmatched treated units:  8 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  129 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  1204742613.4791539\n",
      "\tNumber of matches made in this iteration:  68\n",
      "\tNumber of matches made so far:  5378\n",
      "\tIn this iteration, the covariates dropped are:  frozenset({'county', 'simplified_race'})\n",
      "Iteration number:  5\n",
      "\tNumber of matched groups formed in total:  505\n",
      "\tUnmatched treated units:  8 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  129 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  1205072671.32629\n",
      "\tNumber of matches made in this iteration:  0\n",
      "\tNumber of matches made so far:  5378\n",
      "\tIn this iteration, the covariates dropped are:  frozenset({'class94'})\n",
      "Iteration number:  6\n",
      "\tNumber of matched groups formed in total:  508\n",
      "\tUnmatched treated units:  5 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  120 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  1205171280.4727237\n",
      "\tNumber of matches made in this iteration:  12\n",
      "\tNumber of matches made so far:  5390\n",
      "\tIn this iteration, the covariates dropped are:  frozenset({'county', 'class94'})\n",
      "Iteration number:  7\n",
      "\tNumber of matched groups formed in total:  509\n",
      "\tUnmatched treated units:  4 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  119 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  1210524158.7436352\n",
      "\tNumber of matches made in this iteration:  2\n",
      "\tNumber of matches made so far:  5392\n",
      "\tIn this iteration, the covariates dropped are:  frozenset({'simplified_race', 'class94'})\n",
      "Iteration number:  8\n",
      "\tNumber of matched groups formed in total:  511\n",
      "\tUnmatched treated units:  0 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  110 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  1210539313.933855\n",
      "\tNumber of matches made in this iteration:  13\n",
      "\tNumber of matches made so far:  5405\n",
      "\tIn this iteration, the covariates dropped are:  frozenset({'county', 'simplified_race', 'class94'})\n",
      "5405 units matched. We finished with no more treated units to match\n"
     ]
    }
   ],
   "source": [
    "model = dame_flame.matching.DAME(repeats=False, verbose=3, want_pe=True)\n",
    "model.fit(\n",
    "    for_matching,\n",
    "    treatment_column_name=\"has_college\",\n",
    "    outcome_column_name=\"annual_earnings\",\n",
    ")\n",
    "result = model.predict(for_matching)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interpreting DAME output\n",
    "\n",
    "The output you get from doing this *should* be reports from about 8 iterations of matching. In each iteration, you'll see a description of the number of matches made in the interation, the number of treatment units still unmatched, and the number of control units unmatched. \n",
    "\n",
    "In the first iteration, the algorithm tries to match observations that match on *all* the variables in your data. That's why in the first iteration, you see the set of variables being drop is an empty set -- it *hasn't* dropped any variables:\n",
    "\n",
    "```\n",
    "Iteration number:  1\n",
    "\tNumber of matched groups formed in total:  370\n",
    "\tUnmatched treated units:  644 out of a total of  1150 treated units\n",
    "\tUnmatched control units:  3187 out of a total of  4365 control units\n",
    "\tPredictive error of covariates chosen this iteration:  0\n",
    "\tNumber of matches made in this iteration:  1684\n",
    "\tNumber of matches made so far:  1684\n",
    "\tIn this iteration, the covariates dropped are:  set()\n",
    "```\n",
    "\n",
    "But as we can see from this output, the algorithm found 1,684 perfect matches -- pairs of observations (one treated, one untreated) that had *exactly* the same value of all the variables we included. But we also see we still have 644 unmatched treated units, so what do we do? The answer is that we have to drop some of our matching variables and try again. But what variable should we drop?\n",
    "\n",
    "This is the secret sauce of DAME. DAME picks the variables to drop by trying to predict our outcome $Y$ using all our variables (by default using a ridge regression), then it drops the matching variable that is contributing the least to that prediction. Since our goal in matching is to eliminate baseline differences ($E(Y_0|D=1) - E(Y_1|D=0)$), dropping the covariates least related to $Y$ makes sense.\n",
    "\n",
    "As a result, in the second iteration, we see that the variable it drops first is `county`, and it's subsequently able to make another 3,626 new matches on the remaining variables! \n",
    "\n",
    "```\n",
    "Iteration number:  2\n",
    "\tNumber of matched groups formed in total:  494\n",
    "\tUnmatched treated units:  25 out of a total of  1150 treated units\n",
    "\tUnmatched control units:  180 out of a total of  4365 control units\n",
    "\tPredictive error of covariates chosen this iteration:  1199421883.1095908\n",
    "\tNumber of matches made in this iteration:  3626\n",
    "\tNumber of matches made so far:  5310\n",
    "\tIn this iteration, the covariates dropped are:  frozenset({'county'})\n",
    "```\n",
    "\n",
    "And so DAME continues until after 8 iterations, it's matched all treated observations.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 8\n",
    "\n",
    "Congratulations! You just on your first one-to-one matching! \n",
    "\n",
    "The next step is to think about which of the matches that DAME generated are good enough for inclusion in our analysis. As you may recall, one of the choices you have to make as a researcher when doing matching is how \"good\" a match has to be in order to be included in your final data set. By default, DAME will keep dropping matching variables until it has been able to match all of the treated observations or runs out of variables. It will do this no matter how bad the matches start to become -- if it ends up with the treated observation and a control observation that can only be matched on gender, it will match them just on gender, even though we probably don't think that that's a \"good\" match.\n",
    "\n",
    "The way to control this behavior is to tell DAME when to stop manually using the `early_stop_iterations` argument to tell the matching algorithm when to stop.\n",
    "\n",
    "So when is a good time to stop? There's no objective or \"right\" answer to that question. It fundamentally comes down to a trade-off between bias (which gets higher is you allow more low quality matches into your data) and variance (which will go down as you increase the number of matches you keep).\n",
    "\n",
    "But one way to start the process of picking a cutpoint is to examine how the quality of matches evolves over iterations. DAME keep this information in `model.pe_each_iter`. This shows, for each iteration, the \"prediction error\" resulting from  dropping the variables excluded in each step. This \"prediction error\" is the difference in the mean-squared error of regressing $Y$ on our matching variables (by default in a ridge regression) with all variables versus with the subset being used for matching in a given iteration. By design, of course, this is always increasing. \n",
    "\n",
    "To see how this evolves, plot your `pe` against iteration numbers. Note that our first iteration doesn't count, since by definition the first iteration has an error of 0, and also note that the iterations count from 1, not 0 (weird for Python... but whatever). You can also see the `pe` values for each iteration reported in the output from when DAME ran above if you want to make your you're lining up the errors with iterations right. \n",
    "\n",
    "Are there any points where the match quality seems to fall off dramatically? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pe</th>\n",
       "      <th>i</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.199422e+09</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.204728e+09</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.204743e+09</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.205073e+09</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.205171e+09</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.210524e+09</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.210539e+09</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             pe  i\n",
       "0  1.199422e+09  2\n",
       "1  1.204728e+09  3\n",
       "2  1.204743e+09  4\n",
       "3  1.205073e+09  5\n",
       "4  1.205171e+09  6\n",
       "5  1.210524e+09  7\n",
       "6  1.210539e+09  8"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for_pe = pd.DataFrame(\n",
    "    {\"pe\": model.pe_each_iter, \"i\": range(2, len(model.pe_each_iter) + 2)}\n",
    ")\n",
    "for_pe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (8775389962857)>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ggplot(for_pe, aes(x=\"i\", y=\"pe\")) + geom_line()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Yup! Iteration 3 and iteration 7."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 9\n",
    "\n",
    "Suppose we want to ensure we have at least 5,000 observations in our data -- where might you cut off the data to get a sample size of at least that but before a big quality falloff?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# I'd stop after iteration 2 -- things fall off fast then, but with very few added matches."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 10\n",
    "\n",
    "Re-run your matching, stopping at the point you picked above using `early_stop_iterations`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration number:  1\n",
      "\tNumber of matched groups formed in total:  370\n",
      "\tUnmatched treated units:  644 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  3187 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  0\n",
      "\tNumber of matches made in this iteration:  1684\n",
      "\tNumber of matches made so far:  1684\n",
      "\tIn this iteration, the covariates dropped are:  set()\n",
      "Iteration number:  2\n",
      "\tNumber of matched groups formed in total:  494\n",
      "\tUnmatched treated units:  25 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  180 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  1199421883.1095908\n",
      "\tNumber of matches made in this iteration:  3626\n",
      "\tNumber of matches made so far:  5310\n",
      "\tIn this iteration, the covariates dropped are:  frozenset({'county'})\n",
      "5310 units matched. We stopped before doing iteration number:  2\n"
     ]
    }
   ],
   "source": [
    "model = dame_flame.matching.DAME(\n",
    "    repeats=False, verbose=3, want_pe=True, early_stop_iterations=2\n",
    ")\n",
    "model.fit(\n",
    "    for_matching,\n",
    "    treatment_column_name=\"has_college\",\n",
    "    outcome_column_name=\"annual_earnings\",\n",
    ")\n",
    "result = model.predict(for_matching)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting Back a Dataset\n",
    "\n",
    "OK, my one current complaint with DAME is that it doesn't just give you back a nice dataset of your matches for analysis. If we look at our results -- `matches` -- it's *almost* what we want, except it's dropped our treatment and outcome columns, and it's put a string `*` in any entry where a value *wasn't* used for matching:\n",
    "\n",
    "```\n",
    "  female simplified_race   county   class94   discretized_age\n",
    "0  1.0     0.0              10.0      3.0          5.0\n",
    "1  0.0     2.0              *         3.0          3.0\n",
    "2  0.0     0.0              8.0        3.0         6.0\n",
    "3  0.0     0.0              *         1.0          4.0\n",
    "4  0.0     0.0              24.0      3.0          3.0\n",
    "```\n",
    "\n",
    "So for now (though I think this will get updated in the package), we'll have to do it ourselves! Just copy-paste this:\n",
    "\n",
    "```python\n",
    "\n",
    "def get_dataframe(model, result_of_fit):\n",
    "\n",
    "    # Get original data\n",
    "    better = model.input_data.loc[result_of_fit.index]\n",
    "    if not better.index.is_unique:\n",
    "        raise ValueError(\"Need index values in input data to be unique\")\n",
    "\n",
    "    # Get match groups for clustering\n",
    "    better[\"match_group\"] = np.nan\n",
    "    better[\"match_group_size\"] = np.nan\n",
    "    for idx, group in enumerate(model.units_per_group):\n",
    "        better.loc[group, \"match_group\"] = idx\n",
    "        better.loc[group, \"match_group_size\"] = len(group)\n",
    "\n",
    "    # Get weights. I THINK this is right?! At least for with repeat=False?\n",
    "    t = model.treatment_column_name\n",
    "    better[\"t_in_group\"] = better.groupby(\"match_group\")[t].transform(np.sum)\n",
    "\n",
    "    # Make weights\n",
    "    better[\"weights\"] = np.nan\n",
    "    better.loc[better[t] == 1, \"weights\"] = 1  # treaments are 1\n",
    "\n",
    "    # Controls start as proportional to num of treatments\n",
    "    # each observation is matched to.\n",
    "    better.loc[better[t] == 0, \"weights\"] = better[\"t_in_group\"] / (\n",
    "        better[\"match_group_size\"] - better[\"t_in_group\"]\n",
    "    )\n",
    "\n",
    "    # Then re-normalize for num unique control observations.\n",
    "    control_weights = better[better[t] == 0][\"weights\"].sum()\n",
    "\n",
    "    num_control_obs = len(better[better[t] == 0].index.drop_duplicates())\n",
    "    renormalization = num_control_obs / control_weights\n",
    "    better.loc[better[t] == 0, \"weights\"] = (\n",
    "        better.loc[better[t] == 0, \"weights\"] * renormalization\n",
    "    )\n",
    "    assert better.weights.notnull().all()\n",
    "\n",
    "    better = better.drop([\"t_in_group\"], axis=\"columns\")\n",
    "\n",
    "    # Make sure right length and values!\n",
    "    assert len(result_of_fit) == len(better)\n",
    "    assert better.loc[better[t] == 0, \"weights\"].sum() == num_control_obs\n",
    "\n",
    "    return better\n",
    "\n",
    "```\n",
    "\n",
    "### Exercise 11\n",
    "\n",
    "Copy-paste that code and run it with your original data, your (fit) model, and what you got back when you ran `result_of_fit`. Then we'll work with the output of that. You should get back a single dataframe of the same length as your original model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_dataframe(model, result_of_fit):\n",
    "\n",
    "    # Get original data\n",
    "    better = model.input_data.loc[result_of_fit.index]\n",
    "    if not better.index.is_unique:\n",
    "        raise ValueError(\"Need index values in input data to be unique\")\n",
    "\n",
    "    # Get match groups for clustering\n",
    "    better[\"match_group\"] = np.nan\n",
    "    better[\"match_group_size\"] = np.nan\n",
    "    for idx, group in enumerate(model.units_per_group):\n",
    "        better.loc[group, \"match_group\"] = idx\n",
    "        better.loc[group, \"match_group_size\"] = len(group)\n",
    "\n",
    "    # Get weights. I THINK this is right?! At least for with repeat=False?\n",
    "    t = model.treatment_column_name\n",
    "    better[\"t_in_group\"] = better.groupby(\"match_group\")[t].transform(np.sum)\n",
    "\n",
    "    # Make weights\n",
    "    better[\"weights\"] = np.nan\n",
    "    better.loc[better[t] == 1, \"weights\"] = 1  # treaments are 1\n",
    "\n",
    "    # Controls start as proportional to num of treatments\n",
    "    # each observation is matched to.\n",
    "    better.loc[better[t] == 0, \"weights\"] = better[\"t_in_group\"] / (\n",
    "        better[\"match_group_size\"] - better[\"t_in_group\"]\n",
    "    )\n",
    "\n",
    "    # Then re-normalize for num unique control observations.\n",
    "    control_weights = better[better[t] == 0][\"weights\"].sum()\n",
    "\n",
    "    num_control_obs = len(better[better[t] == 0].index.drop_duplicates())\n",
    "    renormalization = num_control_obs / control_weights\n",
    "    better.loc[better[t] == 0, \"weights\"] = (\n",
    "        better.loc[better[t] == 0, \"weights\"] * renormalization\n",
    "    )\n",
    "    assert better.weights.notnull().all()\n",
    "\n",
    "    better = better.drop([\"t_in_group\"], axis=\"columns\")\n",
    "\n",
    "    # Make sure right length and values!\n",
    "    assert len(result_of_fit) == len(better)\n",
    "    assert better.loc[better[t] == 0, \"weights\"].sum() == num_control_obs\n",
    "\n",
    "    return better"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "renormalization param: 3.72\n"
     ]
    }
   ],
   "source": [
    "matched_data = get_dataframe(model, result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>annual_earnings</th>\n",
       "      <th>female</th>\n",
       "      <th>simplified_race</th>\n",
       "      <th>has_college</th>\n",
       "      <th>county</th>\n",
       "      <th>class94</th>\n",
       "      <th>discretized_age</th>\n",
       "      <th>match_group</th>\n",
       "      <th>match_group_size</th>\n",
       "      <th>weights</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>42900.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>59.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.930000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>31200.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>411.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>0.070189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20020.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>52.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22859.2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>424.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.240000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>73860.8</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>106.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   annual_earnings  female  simplified_race  has_college  county  class94  \\\n",
       "0          42900.0       1              0.0            0      10        3   \n",
       "1          31200.0       0              2.0            0      31        3   \n",
       "2          20020.0       0              0.0            1       8        3   \n",
       "3          22859.2       0              0.0            0      44        1   \n",
       "4          73860.8       0              0.0            1      24        3   \n",
       "\n",
       "   discretized_age  match_group  match_group_size   weights  \n",
       "0                5         59.0               5.0  0.930000  \n",
       "1                3        411.0             108.0  0.070189  \n",
       "2                6         52.0               3.0  1.000000  \n",
       "3                4        424.0              28.0  1.240000  \n",
       "4                3        106.0               7.0  1.000000  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matched_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Check Your Matches and Analyze\n",
    "\n",
    "### Exercise 12\n",
    "\n",
    "We previously tested balance on `simplified_race`, and by county. Check those again. Are there still statistically significant differences in college education by `simplified_race`?\n",
    "\n",
    "Note that when you test for this, you'll need to take into account the `weights` column you got back from `get_dataframe`. What DAME does is not actually the 1-to-1 matching described in our readings -- instead, however many observations that exact match it finds it puts in the same \"group\". (These groups are identified in the dataframe you got from `get_dataframe` by the column `match_group`, and the size of each group is in `match_group_size`.)\n",
    "\n",
    "So to analyze the data, you need to use the `wls` (weighted least squares) function in `statsmodels`. For example, if your data is called `matched_data`, you might run:\n",
    "\n",
    "```python\n",
    "smf.wls(\n",
    "    \"has_college ~ C(simplified_race)\", matched_data, weights=matched_data[\"weights\"]\n",
    ").fit().summary()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>WLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>has_college</td>   <th>  R-squared:         </th> <td>   0.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>WLS</td>       <th>  Adj. R-squared:    </th> <td>  -0.001</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>2.495e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 23 Feb 2021</td> <th>  Prob (F-statistic):</th>  <td>  1.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>09:39:27</td>     <th>  Log-Likelihood:    </th> <td> -3736.0</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  5310</td>      <th>  AIC:               </th> <td>   7480.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  5306</td>      <th>  BIC:               </th> <td>   7506.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "              <td></td>                 <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                 <td>    0.2119</td> <td>    0.007</td> <td>   31.608</td> <td> 0.000</td> <td>    0.199</td> <td>    0.225</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(simplified_race)[T.1.0]</th> <td> 1.648e-16</td> <td>    0.018</td> <td>  9.1e-15</td> <td> 1.000</td> <td>   -0.036</td> <td>    0.036</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(simplified_race)[T.2.0]</th> <td>-4.337e-17</td> <td>    0.019</td> <td>-2.31e-15</td> <td> 1.000</td> <td>   -0.037</td> <td>    0.037</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(simplified_race)[T.3.0]</th> <td>  8.76e-17</td> <td>    0.020</td> <td> 4.33e-15</td> <td> 1.000</td> <td>   -0.040</td> <td>    0.040</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>860.389</td> <th>  Durbin-Watson:     </th> <td>   2.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>1353.227</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.234</td>  <th>  Prob(JB):          </th> <td>1.41e-294</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.851</td>  <th>  Cond. No.          </th> <td>    3.95</td> \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            WLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:            has_college   R-squared:                       0.000\n",
       "Model:                            WLS   Adj. R-squared:                 -0.001\n",
       "Method:                 Least Squares   F-statistic:                 2.495e-12\n",
       "Date:                Tue, 23 Feb 2021   Prob (F-statistic):               1.00\n",
       "Time:                        09:39:27   Log-Likelihood:                -3736.0\n",
       "No. Observations:                5310   AIC:                             7480.\n",
       "Df Residuals:                    5306   BIC:                             7506.\n",
       "Df Model:                           3                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=============================================================================================\n",
       "                                coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------------\n",
       "Intercept                     0.2119      0.007     31.608      0.000       0.199       0.225\n",
       "C(simplified_race)[T.1.0]  1.648e-16      0.018    9.1e-15      1.000      -0.036       0.036\n",
       "C(simplified_race)[T.2.0] -4.337e-17      0.019  -2.31e-15      1.000      -0.037       0.037\n",
       "C(simplified_race)[T.3.0]   8.76e-17      0.020   4.33e-15      1.000      -0.040       0.040\n",
       "==============================================================================\n",
       "Omnibus:                      860.389   Durbin-Watson:                   2.000\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1353.227\n",
       "Skew:                           1.234   Prob(JB):                    1.41e-294\n",
       "Kurtosis:                       2.851   Cond. No.                         3.95\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "\n",
    "smf.wls(\n",
    "    \"has_college ~ C(simplified_race)\", matched_data, weights=matched_data[\"weights\"]\n",
    ").fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Exercise 13\n",
    "\n",
    "Now use a weighted least squares regression on your matched data to regress annual earnings on *just* having a college eduction. What is the apparent effect of a BA? How does that compare to our initial estimate using the raw CPS data (before matching)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>WLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>     <td>annual_earnings</td> <th>  R-squared:         </th> <td>   0.058</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>WLS</td>       <th>  Adj. R-squared:    </th> <td>   0.057</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   324.1</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 23 Feb 2021</td> <th>  Prob (F-statistic):</th> <td>2.19e-70</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>09:39:27</td>     <th>  Log-Likelihood:    </th> <td> -61753.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  5310</td>      <th>  AIC:               </th> <td>1.235e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  5308</td>      <th>  BIC:               </th> <td>1.235e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>   <td> 3.909e+04</td> <td>  351.293</td> <td>  111.287</td> <td> 0.000</td> <td> 3.84e+04</td> <td> 3.98e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>has_college</th> <td> 1.374e+04</td> <td>  763.203</td> <td>   18.003</td> <td> 0.000</td> <td> 1.22e+04</td> <td> 1.52e+04</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>2934.035</td> <th>  Durbin-Watson:     </th> <td>   2.006</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>33100.529</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 2.424</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>14.230</td>  <th>  Cond. No.          </th> <td>    2.58</td> \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            WLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:        annual_earnings   R-squared:                       0.058\n",
       "Model:                            WLS   Adj. R-squared:                  0.057\n",
       "Method:                 Least Squares   F-statistic:                     324.1\n",
       "Date:                Tue, 23 Feb 2021   Prob (F-statistic):           2.19e-70\n",
       "Time:                        09:39:27   Log-Likelihood:                -61753.\n",
       "No. Observations:                5310   AIC:                         1.235e+05\n",
       "Df Residuals:                    5308   BIC:                         1.235e+05\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===============================================================================\n",
       "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------\n",
       "Intercept    3.909e+04    351.293    111.287      0.000    3.84e+04    3.98e+04\n",
       "has_college  1.374e+04    763.203     18.003      0.000    1.22e+04    1.52e+04\n",
       "==============================================================================\n",
       "Omnibus:                     2934.035   Durbin-Watson:                   2.006\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            33100.529\n",
       "Skew:                           2.424   Prob(JB):                         0.00\n",
       "Kurtosis:                      14.230   Cond. No.                         2.58\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.wls(\n",
    "    \"annual_earnings ~ has_college\", matched_data, weights=matched_data[\"weights\"]\n",
    ").fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13564.430689800056"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dame_flame.utils.post_processing.ATE(matching_object=model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 14\n",
    "\n",
    "Now include our other matching variables as controls. Does the coefficient change?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>WLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>     <td>annual_earnings</td> <th>  R-squared:         </th> <td>   0.238</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>WLS</td>       <th>  Adj. R-squared:    </th> <td>   0.188</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   4.786</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 23 Feb 2021</td> <th>  Prob (F-statistic):</th> <td>1.62e-132</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>09:39:28</td>     <th>  Log-Likelihood:    </th> <td> -61189.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  5310</td>      <th>  AIC:               </th> <td>1.230e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  4984</td>      <th>  BIC:               </th> <td>1.252e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>   325</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "              <td></td>                 <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                 <td> 4.761e+04</td> <td> 2429.505</td> <td>   19.595</td> <td> 0.000</td> <td> 4.28e+04</td> <td> 5.24e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(simplified_race)[T.1.0]</th> <td>-8344.9150</td> <td> 1067.331</td> <td>   -7.818</td> <td> 0.000</td> <td>-1.04e+04</td> <td>-6252.476</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(simplified_race)[T.2.0]</th> <td>-6753.9175</td> <td> 1140.523</td> <td>   -5.922</td> <td> 0.000</td> <td>-8989.844</td> <td>-4517.991</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(simplified_race)[T.3.0]</th> <td>-3220.6308</td> <td> 1202.997</td> <td>   -2.677</td> <td> 0.007</td> <td>-5579.035</td> <td> -862.227</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(discretized_age)[T.3]</th>   <td> 8584.0505</td> <td>  868.037</td> <td>    9.889</td> <td> 0.000</td> <td> 6882.316</td> <td> 1.03e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(discretized_age)[T.4]</th>   <td> 1.251e+04</td> <td>  923.078</td> <td>   13.558</td> <td> 0.000</td> <td> 1.07e+04</td> <td> 1.43e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(discretized_age)[T.5]</th>   <td> 1.266e+04</td> <td>  964.214</td> <td>   13.131</td> <td> 0.000</td> <td> 1.08e+04</td> <td> 1.46e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(discretized_age)[T.6]</th>   <td> 9235.0616</td> <td> 1189.062</td> <td>    7.767</td> <td> 0.000</td> <td> 6903.976</td> <td> 1.16e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(discretized_age)[T.7]</th>   <td> 1.347e+04</td> <td> 2975.342</td> <td>    4.528</td> <td> 0.000</td> <td> 7639.580</td> <td> 1.93e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.1]</th>            <td>-1.114e+04</td> <td> 3231.653</td> <td>   -3.446</td> <td> 0.001</td> <td>-1.75e+04</td> <td>-4799.550</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.2]</th>            <td>-1.279e+04</td> <td> 3245.734</td> <td>   -3.942</td> <td> 0.000</td> <td>-1.92e+04</td> <td>-6430.115</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.3]</th>            <td>-9142.9921</td> <td> 1.19e+04</td> <td>   -0.771</td> <td> 0.441</td> <td>-3.24e+04</td> <td> 1.41e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.4]</th>            <td>-6471.4363</td> <td> 2990.234</td> <td>   -2.164</td> <td> 0.030</td> <td>-1.23e+04</td> <td> -609.261</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.5]</th>            <td>-6378.3577</td> <td> 4178.131</td> <td>   -1.527</td> <td> 0.127</td> <td>-1.46e+04</td> <td> 1812.617</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.6]</th>            <td>-1.627e+04</td> <td> 1.04e+04</td> <td>   -1.566</td> <td> 0.118</td> <td>-3.66e+04</td> <td> 4103.579</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.7]</th>            <td>-1.023e+04</td> <td> 3835.754</td> <td>   -2.666</td> <td> 0.008</td> <td>-1.77e+04</td> <td>-2706.649</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.8]</th>            <td>-1.153e+04</td> <td> 3175.916</td> <td>   -3.629</td> <td> 0.000</td> <td>-1.78e+04</td> <td>-5300.388</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.9]</th>            <td>-1.382e+04</td> <td> 5130.249</td> <td>   -2.694</td> <td> 0.007</td> <td>-2.39e+04</td> <td>-3762.096</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.10]</th>           <td>-1.501e+04</td> <td> 3427.926</td> <td>   -4.380</td> <td> 0.000</td> <td>-2.17e+04</td> <td>-8293.693</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.11]</th>           <td>-1.418e+04</td> <td> 3040.008</td> <td>   -4.664</td> <td> 0.000</td> <td>-2.01e+04</td> <td>-8218.173</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.12]</th>           <td>-6849.3954</td> <td> 3121.285</td> <td>   -2.194</td> <td> 0.028</td> <td> -1.3e+04</td> <td> -730.303</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.13]</th>           <td>-1.381e+04</td> <td> 3368.446</td> <td>   -4.101</td> <td> 0.000</td> <td>-2.04e+04</td> <td>-7209.235</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.14]</th>           <td>-1.369e+04</td> <td> 3918.748</td> <td>   -3.493</td> <td> 0.000</td> <td>-2.14e+04</td> <td>-6007.378</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.15]</th>           <td>-9190.4689</td> <td> 4799.618</td> <td>   -1.915</td> <td> 0.056</td> <td>-1.86e+04</td> <td>  218.895</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.16]</th>           <td>-1.061e+04</td> <td> 3616.372</td> <td>   -2.935</td> <td> 0.003</td> <td>-1.77e+04</td> <td>-3523.982</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.17]</th>           <td>-1.601e+04</td> <td> 7731.556</td> <td>   -2.070</td> <td> 0.038</td> <td>-3.12e+04</td> <td> -848.909</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.18]</th>           <td>-1788.7046</td> <td> 4787.690</td> <td>   -0.374</td> <td> 0.709</td> <td>-1.12e+04</td> <td> 7597.275</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.19]</th>           <td>-1.684e+04</td> <td> 6555.900</td> <td>   -2.569</td> <td> 0.010</td> <td>-2.97e+04</td> <td>-3989.067</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.20]</th>           <td>  -1.4e+04</td> <td> 4328.098</td> <td>   -3.235</td> <td> 0.001</td> <td>-2.25e+04</td> <td>-5515.772</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.21]</th>           <td>-6184.3776</td> <td> 3595.547</td> <td>   -1.720</td> <td> 0.085</td> <td>-1.32e+04</td> <td>  864.476</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.22]</th>           <td>-1.826e+04</td> <td> 3694.928</td> <td>   -4.941</td> <td> 0.000</td> <td>-2.55e+04</td> <td> -1.1e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.23]</th>           <td>-1.242e+04</td> <td> 3244.837</td> <td>   -3.828</td> <td> 0.000</td> <td>-1.88e+04</td> <td>-6059.940</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.24]</th>           <td>-1.104e+04</td> <td> 3171.193</td> <td>   -3.482</td> <td> 0.001</td> <td>-1.73e+04</td> <td>-4824.300</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.25]</th>           <td>-1.506e+04</td> <td> 3496.105</td> <td>   -4.309</td> <td> 0.000</td> <td>-2.19e+04</td> <td>-8211.049</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.26]</th>           <td>-1.391e+04</td> <td> 3137.745</td> <td>   -4.432</td> <td> 0.000</td> <td>-2.01e+04</td> <td>-7755.819</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.27]</th>           <td>-1.337e+04</td> <td> 3345.523</td> <td>   -3.997</td> <td> 0.000</td> <td>-1.99e+04</td> <td>-6814.638</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.28]</th>           <td>-1.297e+04</td> <td> 5671.204</td> <td>   -2.287</td> <td> 0.022</td> <td>-2.41e+04</td> <td>-1853.870</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.29]</th>           <td>-4845.0790</td> <td> 5203.125</td> <td>   -0.931</td> <td> 0.352</td> <td> -1.5e+04</td> <td> 5355.335</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.30]</th>           <td>-2248.8602</td> <td> 5067.398</td> <td>   -0.444</td> <td> 0.657</td> <td>-1.22e+04</td> <td> 7685.469</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.31]</th>           <td>-1.155e+04</td> <td> 4710.979</td> <td>   -2.452</td> <td> 0.014</td> <td>-2.08e+04</td> <td>-2313.897</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.32]</th>           <td>-7114.5598</td> <td> 3632.908</td> <td>   -1.958</td> <td> 0.050</td> <td>-1.42e+04</td> <td>    7.538</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.33]</th>           <td>-1.272e+04</td> <td> 3067.035</td> <td>   -4.149</td> <td> 0.000</td> <td>-1.87e+04</td> <td>-6711.354</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.34]</th>           <td> -1.32e+04</td> <td> 3443.339</td> <td>   -3.833</td> <td> 0.000</td> <td>-1.99e+04</td> <td>-6447.428</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.35]</th>           <td>-9324.2429</td> <td> 3384.603</td> <td>   -2.755</td> <td> 0.006</td> <td> -1.6e+04</td> <td>-2688.932</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.36]</th>           <td>-1.505e+04</td> <td> 3658.198</td> <td>   -4.115</td> <td> 0.000</td> <td>-2.22e+04</td> <td>-7881.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.37]</th>           <td>-1.023e+04</td> <td> 3762.247</td> <td>   -2.720</td> <td> 0.007</td> <td>-1.76e+04</td> <td>-2856.766</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.38]</th>           <td>-1.308e+04</td> <td> 3310.408</td> <td>   -3.951</td> <td> 0.000</td> <td>-1.96e+04</td> <td>-6590.153</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.39]</th>           <td>-1.177e+04</td> <td> 3252.230</td> <td>   -3.618</td> <td> 0.000</td> <td>-1.81e+04</td> <td>-5391.513</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.40]</th>           <td>-1.516e+04</td> <td> 3677.299</td> <td>   -4.123</td> <td> 0.000</td> <td>-2.24e+04</td> <td>-7954.028</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.41]</th>           <td>-9224.6049</td> <td> 2690.524</td> <td>   -3.429</td> <td> 0.001</td> <td>-1.45e+04</td> <td>-3949.994</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.42]</th>           <td>-1.365e+04</td> <td> 3460.095</td> <td>   -3.944</td> <td> 0.000</td> <td>-2.04e+04</td> <td>-6864.991</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.43]</th>           <td>-1.165e+04</td> <td> 3698.161</td> <td>   -3.151</td> <td> 0.002</td> <td>-1.89e+04</td> <td>-4404.402</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.44]</th>           <td> -1.07e+04</td> <td> 2961.782</td> <td>   -3.611</td> <td> 0.000</td> <td>-1.65e+04</td> <td>-4889.799</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.45]</th>           <td>-7052.4496</td> <td> 3127.876</td> <td>   -2.255</td> <td> 0.024</td> <td>-1.32e+04</td> <td> -920.437</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.46]</th>           <td>-9064.0230</td> <td> 3380.497</td> <td>   -2.681</td> <td> 0.007</td> <td>-1.57e+04</td> <td>-2436.761</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.47]</th>           <td>-1.681e+04</td> <td> 3013.844</td> <td>   -5.579</td> <td> 0.000</td> <td>-2.27e+04</td> <td>-1.09e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.48]</th>           <td>-8897.8731</td> <td> 3296.249</td> <td>   -2.699</td> <td> 0.007</td> <td>-1.54e+04</td> <td>-2435.774</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.49]</th>           <td> 2.125e+04</td> <td> 7993.324</td> <td>    2.659</td> <td> 0.008</td> <td> 5580.256</td> <td> 3.69e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.50]</th>           <td>-2.251e+04</td> <td> 1.13e+04</td> <td>   -1.997</td> <td> 0.046</td> <td>-4.46e+04</td> <td> -409.459</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.51]</th>           <td>-5880.2544</td> <td> 3452.043</td> <td>   -1.703</td> <td> 0.089</td> <td>-1.26e+04</td> <td>  887.270</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.52]</th>           <td>-1.006e+04</td> <td> 8297.064</td> <td>   -1.213</td> <td> 0.225</td> <td>-2.63e+04</td> <td> 6201.302</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.53]</th>           <td>-7396.8710</td> <td> 1.97e+04</td> <td>   -0.376</td> <td> 0.707</td> <td>-4.59e+04</td> <td> 3.12e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.54]</th>           <td>-1.349e+04</td> <td> 8853.843</td> <td>   -1.524</td> <td> 0.128</td> <td>-3.08e+04</td> <td> 3865.030</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.55]</th>           <td> 6016.8132</td> <td> 9691.581</td> <td>    0.621</td> <td> 0.535</td> <td> -1.3e+04</td> <td>  2.5e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.56]</th>           <td>-7435.2407</td> <td> 7281.280</td> <td>   -1.021</td> <td> 0.307</td> <td>-2.17e+04</td> <td> 6839.272</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.57]</th>           <td> 8434.9441</td> <td>  1.4e+04</td> <td>    0.604</td> <td> 0.546</td> <td>-1.89e+04</td> <td> 3.58e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.58]</th>           <td>-5918.5652</td> <td> 5278.657</td> <td>   -1.121</td> <td> 0.262</td> <td>-1.63e+04</td> <td> 4429.925</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.59]</th>           <td>-1.631e+04</td> <td> 9894.838</td> <td>   -1.649</td> <td> 0.099</td> <td>-3.57e+04</td> <td> 3086.114</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.60]</th>           <td>-1.499e+04</td> <td> 6719.761</td> <td>   -2.231</td> <td> 0.026</td> <td>-2.82e+04</td> <td>-1819.273</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.61]</th>           <td>-8015.9218</td> <td> 1.09e+04</td> <td>   -0.732</td> <td> 0.464</td> <td>-2.95e+04</td> <td> 1.34e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.62]</th>           <td> 1.171e+04</td> <td> 1.32e+04</td> <td>    0.884</td> <td> 0.377</td> <td>-1.43e+04</td> <td> 3.77e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.63]</th>           <td>-1.124e+04</td> <td> 8626.461</td> <td>   -1.303</td> <td> 0.193</td> <td>-2.82e+04</td> <td> 5671.473</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.64]</th>           <td>  1.57e+04</td> <td> 8596.970</td> <td>    1.826</td> <td> 0.068</td> <td>-1156.314</td> <td> 3.26e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.65]</th>           <td>-1.964e+04</td> <td> 9254.939</td> <td>   -2.122</td> <td> 0.034</td> <td>-3.78e+04</td> <td>-1498.590</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.66]</th>           <td>-2.286e+04</td> <td> 1.47e+04</td> <td>   -1.550</td> <td> 0.121</td> <td>-5.18e+04</td> <td> 6046.864</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.67]</th>           <td>-1.286e+04</td> <td> 2.97e+04</td> <td>   -0.434</td> <td> 0.664</td> <td> -7.1e+04</td> <td> 4.53e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.68]</th>           <td>  265.8046</td> <td> 9594.437</td> <td>    0.028</td> <td> 0.978</td> <td>-1.85e+04</td> <td> 1.91e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.69]</th>           <td>-1.382e+04</td> <td> 9042.247</td> <td>   -1.528</td> <td> 0.127</td> <td>-3.15e+04</td> <td> 3909.886</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.70]</th>           <td>-2.086e+04</td> <td> 1.33e+04</td> <td>   -1.567</td> <td> 0.117</td> <td> -4.7e+04</td> <td> 5231.063</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.71]</th>           <td>-1.914e+04</td> <td> 8999.435</td> <td>   -2.127</td> <td> 0.033</td> <td>-3.68e+04</td> <td>-1501.949</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.72]</th>           <td> 1.203e+04</td> <td> 1.91e+04</td> <td>    0.630</td> <td> 0.528</td> <td>-2.54e+04</td> <td> 4.95e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.73]</th>           <td>-4151.5319</td> <td> 5648.737</td> <td>   -0.735</td> <td> 0.462</td> <td>-1.52e+04</td> <td> 6922.479</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.74]</th>           <td>-1.341e+04</td> <td> 7534.403</td> <td>   -1.780</td> <td> 0.075</td> <td>-2.82e+04</td> <td> 1357.560</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.75]</th>           <td>-1.719e+04</td> <td> 3924.766</td> <td>   -4.381</td> <td> 0.000</td> <td>-2.49e+04</td> <td>-9500.690</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.76]</th>           <td>-3.746e+04</td> <td> 2.62e+04</td> <td>   -1.430</td> <td> 0.153</td> <td>-8.88e+04</td> <td> 1.39e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.77]</th>           <td>  237.8624</td> <td> 6897.951</td> <td>    0.034</td> <td> 0.972</td> <td>-1.33e+04</td> <td> 1.38e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.78]</th>           <td> 6770.8989</td> <td> 2.24e+04</td> <td>    0.302</td> <td> 0.763</td> <td>-3.72e+04</td> <td> 5.07e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.79]</th>           <td> 4.146e+04</td> <td> 8462.736</td> <td>    4.899</td> <td> 0.000</td> <td> 2.49e+04</td> <td>  5.8e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.80]</th>           <td>-1.741e+04</td> <td> 5589.953</td> <td>   -3.115</td> <td> 0.002</td> <td>-2.84e+04</td> <td>-6454.909</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.81]</th>           <td>-1.143e+04</td> <td> 5721.800</td> <td>   -1.998</td> <td> 0.046</td> <td>-2.27e+04</td> <td> -216.304</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.82]</th>           <td>-1.658e+04</td> <td> 1.61e+04</td> <td>   -1.032</td> <td> 0.302</td> <td>-4.81e+04</td> <td> 1.49e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.83]</th>           <td>-2.307e+04</td> <td> 1.25e+04</td> <td>   -1.840</td> <td> 0.066</td> <td>-4.77e+04</td> <td> 1514.953</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.84]</th>           <td>-8999.9730</td> <td> 1.22e+04</td> <td>   -0.740</td> <td> 0.459</td> <td>-3.28e+04</td> <td> 1.48e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.85]</th>           <td> 3419.8384</td> <td> 9046.856</td> <td>    0.378</td> <td> 0.705</td> <td>-1.43e+04</td> <td> 2.12e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.86]</th>           <td> 1.824e+04</td> <td> 1.43e+04</td> <td>    1.279</td> <td> 0.201</td> <td>-9720.390</td> <td> 4.62e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.87]</th>           <td>-2.403e+04</td> <td> 1.09e+04</td> <td>   -2.205</td> <td> 0.027</td> <td>-4.54e+04</td> <td>-2667.316</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.88]</th>           <td>-1.326e+04</td> <td> 1.74e+04</td> <td>   -0.763</td> <td> 0.445</td> <td>-4.73e+04</td> <td> 2.08e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.89]</th>           <td>-1.574e+04</td> <td> 8531.472</td> <td>   -1.845</td> <td> 0.065</td> <td>-3.25e+04</td> <td>  985.816</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.90]</th>           <td>-8870.8793</td> <td> 4968.614</td> <td>   -1.785</td> <td> 0.074</td> <td>-1.86e+04</td> <td>  869.791</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.91]</th>           <td> -1.04e+04</td> <td> 9791.880</td> <td>   -1.062</td> <td> 0.288</td> <td>-2.96e+04</td> <td> 8799.744</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.92]</th>           <td>-1.687e+04</td> <td> 1.17e+04</td> <td>   -1.441</td> <td> 0.150</td> <td>-3.98e+04</td> <td> 6076.622</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.93]</th>           <td>-4593.8182</td> <td> 9052.966</td> <td>   -0.507</td> <td> 0.612</td> <td>-2.23e+04</td> <td> 1.32e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.94]</th>           <td>  -66.5470</td> <td> 9761.637</td> <td>   -0.007</td> <td> 0.995</td> <td>-1.92e+04</td> <td> 1.91e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.95]</th>           <td>-1.199e+04</td> <td> 5085.007</td> <td>   -2.357</td> <td> 0.018</td> <td> -2.2e+04</td> <td>-2017.441</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.96]</th>           <td> -1.27e+04</td> <td> 1.03e+04</td> <td>   -1.228</td> <td> 0.219</td> <td> -3.3e+04</td> <td> 7572.284</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.97]</th>           <td>-2.457e+04</td> <td> 9432.408</td> <td>   -2.605</td> <td> 0.009</td> <td>-4.31e+04</td> <td>-6080.404</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.98]</th>           <td> 2197.3011</td> <td> 1.53e+04</td> <td>    0.144</td> <td> 0.886</td> <td>-2.78e+04</td> <td> 3.22e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.99]</th>           <td>-9289.2093</td> <td> 3098.282</td> <td>   -2.998</td> <td> 0.003</td> <td>-1.54e+04</td> <td>-3215.213</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.100]</th>          <td> 1.121e+04</td> <td> 7876.656</td> <td>    1.423</td> <td> 0.155</td> <td>-4235.032</td> <td> 2.66e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.101]</th>          <td>-1.684e+04</td> <td> 9598.189</td> <td>   -1.754</td> <td> 0.079</td> <td>-3.57e+04</td> <td> 1979.720</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.102]</th>          <td>-2597.8743</td> <td> 1.35e+04</td> <td>   -0.192</td> <td> 0.847</td> <td>-2.91e+04</td> <td> 2.39e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.103]</th>          <td>-1.014e+04</td> <td> 9066.754</td> <td>   -1.118</td> <td> 0.264</td> <td>-2.79e+04</td> <td> 7638.542</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.104]</th>          <td> -252.2631</td> <td> 1.16e+04</td> <td>   -0.022</td> <td> 0.983</td> <td> -2.3e+04</td> <td> 2.25e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.105]</th>          <td>-1.145e+04</td> <td>  1.3e+04</td> <td>   -0.880</td> <td> 0.379</td> <td> -3.7e+04</td> <td> 1.41e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.106]</th>          <td>-3.539e+04</td> <td> 3.35e+04</td> <td>   -1.055</td> <td> 0.291</td> <td>-1.01e+05</td> <td> 3.03e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.107]</th>          <td>-3.364e+04</td> <td> 1.71e+04</td> <td>   -1.962</td> <td> 0.050</td> <td>-6.72e+04</td> <td>  -29.720</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.109]</th>          <td>-4795.8027</td> <td> 8034.001</td> <td>   -0.597</td> <td> 0.551</td> <td>-2.05e+04</td> <td>  1.1e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.110]</th>          <td>-8716.5745</td> <td> 1.06e+04</td> <td>   -0.822</td> <td> 0.411</td> <td>-2.95e+04</td> <td> 1.21e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.111]</th>          <td>-1.946e+04</td> <td> 2.19e+04</td> <td>   -0.889</td> <td> 0.374</td> <td>-6.24e+04</td> <td> 2.35e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.112]</th>          <td>-7351.2007</td> <td> 1.42e+04</td> <td>   -0.516</td> <td> 0.606</td> <td>-3.53e+04</td> <td> 2.06e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.113]</th>          <td>-2.293e+04</td> <td>  2.6e+04</td> <td>   -0.882</td> <td> 0.378</td> <td>-7.39e+04</td> <td>  2.8e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.114]</th>          <td>-1.908e+04</td> <td> 1.61e+04</td> <td>   -1.185</td> <td> 0.236</td> <td>-5.07e+04</td> <td> 1.25e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.115]</th>          <td>-2798.0105</td> <td>    1e+04</td> <td>   -0.280</td> <td> 0.780</td> <td>-2.24e+04</td> <td> 1.68e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.116]</th>          <td>-8785.2988</td> <td> 1.35e+04</td> <td>   -0.650</td> <td> 0.516</td> <td>-3.53e+04</td> <td> 1.77e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.117]</th>          <td>-2.473e+04</td> <td> 4.28e+04</td> <td>   -0.577</td> <td> 0.564</td> <td>-1.09e+05</td> <td> 5.92e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.118]</th>          <td>-1.698e+04</td> <td>  1.1e+04</td> <td>   -1.538</td> <td> 0.124</td> <td>-3.86e+04</td> <td> 4669.861</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.120]</th>          <td>-1.704e+04</td> <td> 1.32e+04</td> <td>   -1.287</td> <td> 0.198</td> <td> -4.3e+04</td> <td> 8908.447</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.121]</th>          <td>-2.767e+04</td> <td> 1.32e+04</td> <td>   -2.093</td> <td> 0.036</td> <td>-5.36e+04</td> <td>-1747.007</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.123]</th>          <td>-1.291e+04</td> <td> 5091.347</td> <td>   -2.536</td> <td> 0.011</td> <td>-2.29e+04</td> <td>-2931.559</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.124]</th>          <td>-3.209e+04</td> <td>    1e+04</td> <td>   -3.197</td> <td> 0.001</td> <td>-5.18e+04</td> <td>-1.24e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.125]</th>          <td>-1.795e+04</td> <td> 1.25e+04</td> <td>   -1.440</td> <td> 0.150</td> <td>-4.24e+04</td> <td> 6490.095</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.126]</th>          <td>-6948.1460</td> <td> 9793.690</td> <td>   -0.709</td> <td> 0.478</td> <td>-2.61e+04</td> <td> 1.23e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.127]</th>          <td>-4111.7736</td> <td> 9598.180</td> <td>   -0.428</td> <td> 0.668</td> <td>-2.29e+04</td> <td> 1.47e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.128]</th>          <td>-1.407e+04</td> <td> 3.35e+04</td> <td>   -0.420</td> <td> 0.675</td> <td>-7.98e+04</td> <td> 5.17e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.129]</th>          <td>-1.338e+04</td> <td> 1.22e+04</td> <td>   -1.094</td> <td> 0.274</td> <td>-3.73e+04</td> <td> 1.06e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.130]</th>          <td>-2.958e+04</td> <td> 1.24e+04</td> <td>   -2.379</td> <td> 0.017</td> <td> -5.4e+04</td> <td>-5205.688</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.131]</th>          <td>-9462.1890</td> <td> 2.13e+04</td> <td>   -0.445</td> <td> 0.656</td> <td>-5.11e+04</td> <td> 3.22e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.132]</th>          <td>-7889.2394</td> <td> 5638.330</td> <td>   -1.399</td> <td> 0.162</td> <td>-1.89e+04</td> <td> 3164.369</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.133]</th>          <td> 2175.4884</td> <td> 1.51e+04</td> <td>    0.144</td> <td> 0.886</td> <td>-2.75e+04</td> <td> 3.18e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.134]</th>          <td> 5.467e+04</td> <td>  1.8e+04</td> <td>    3.045</td> <td> 0.002</td> <td> 1.95e+04</td> <td> 8.99e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.135]</th>          <td>-2.083e+04</td> <td> 1.38e+04</td> <td>   -1.509</td> <td> 0.131</td> <td>-4.79e+04</td> <td> 6228.141</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.136]</th>          <td>-4420.8608</td> <td> 5997.620</td> <td>   -0.737</td> <td> 0.461</td> <td>-1.62e+04</td> <td> 7337.113</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.137]</th>          <td>-4087.2387</td> <td> 8100.626</td> <td>   -0.505</td> <td> 0.614</td> <td>   -2e+04</td> <td> 1.18e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.138]</th>          <td>-7939.1789</td> <td> 8029.739</td> <td>   -0.989</td> <td> 0.323</td> <td>-2.37e+04</td> <td> 7802.643</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.139]</th>          <td> -692.3178</td> <td> 1.02e+04</td> <td>   -0.068</td> <td> 0.946</td> <td>-2.08e+04</td> <td> 1.94e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.140]</th>          <td>-1.651e+04</td> <td> 1.37e+04</td> <td>   -1.202</td> <td> 0.229</td> <td>-4.34e+04</td> <td> 1.04e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.141]</th>          <td>-8251.4595</td> <td> 1.22e+04</td> <td>   -0.676</td> <td> 0.499</td> <td>-3.22e+04</td> <td> 1.57e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.142]</th>          <td>-1373.8309</td> <td> 2.13e+04</td> <td>   -0.065</td> <td> 0.948</td> <td> -4.3e+04</td> <td> 4.03e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.143]</th>          <td>-5545.8845</td> <td> 5862.828</td> <td>   -0.946</td> <td> 0.344</td> <td> -1.7e+04</td> <td> 5947.838</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.144]</th>          <td>-4.741e+04</td> <td> 2.12e+04</td> <td>   -2.232</td> <td> 0.026</td> <td>-8.91e+04</td> <td>-5771.921</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.145]</th>          <td>-9556.0440</td> <td> 3.47e+04</td> <td>   -0.276</td> <td> 0.783</td> <td>-7.75e+04</td> <td> 5.84e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.146]</th>          <td>-1.903e+04</td> <td> 1.59e+04</td> <td>   -1.196</td> <td> 0.232</td> <td>-5.02e+04</td> <td> 1.22e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.147]</th>          <td>  -2.8e+04</td> <td> 1.52e+04</td> <td>   -1.848</td> <td> 0.065</td> <td>-5.77e+04</td> <td> 1707.239</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.148]</th>          <td>-2.012e+04</td> <td> 1.76e+04</td> <td>   -1.146</td> <td> 0.252</td> <td>-5.45e+04</td> <td> 1.43e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.149]</th>          <td>-1.012e+04</td> <td> 4824.670</td> <td>   -2.097</td> <td> 0.036</td> <td>-1.96e+04</td> <td> -657.758</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.150]</th>          <td>-2.052e+04</td> <td> 3.35e+04</td> <td>   -0.612</td> <td> 0.541</td> <td>-8.63e+04</td> <td> 4.52e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.151]</th>          <td>-2.235e+04</td> <td> 1.13e+04</td> <td>   -1.974</td> <td> 0.048</td> <td>-4.45e+04</td> <td> -157.867</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.152]</th>          <td>-1.249e+04</td> <td> 7332.914</td> <td>   -1.703</td> <td> 0.089</td> <td>-2.69e+04</td> <td> 1887.273</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.153]</th>          <td>-1.074e+04</td> <td> 2.99e+04</td> <td>   -0.360</td> <td> 0.719</td> <td>-6.93e+04</td> <td> 4.78e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.155]</th>          <td>-1.174e+04</td> <td> 1.32e+04</td> <td>   -0.892</td> <td> 0.373</td> <td>-3.75e+04</td> <td> 1.41e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.157]</th>          <td>-2.379e+04</td> <td> 1.34e+04</td> <td>   -1.777</td> <td> 0.076</td> <td>   -5e+04</td> <td> 2454.505</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.158]</th>          <td> -3.57e+04</td> <td> 1.24e+04</td> <td>   -2.878</td> <td> 0.004</td> <td>   -6e+04</td> <td>-1.14e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.159]</th>          <td>-3961.2072</td> <td> 2.67e+04</td> <td>   -0.149</td> <td> 0.882</td> <td>-5.62e+04</td> <td> 4.83e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.160]</th>          <td>-1.811e+04</td> <td> 8356.451</td> <td>   -2.167</td> <td> 0.030</td> <td>-3.45e+04</td> <td>-1729.232</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.161]</th>          <td> 6091.1910</td> <td> 8574.294</td> <td>    0.710</td> <td> 0.477</td> <td>-1.07e+04</td> <td> 2.29e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.162]</th>          <td> 9087.0830</td> <td> 1.55e+04</td> <td>    0.586</td> <td> 0.558</td> <td>-2.13e+04</td> <td> 3.95e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.163]</th>          <td>-2.133e+04</td> <td> 2.02e+04</td> <td>   -1.054</td> <td> 0.292</td> <td> -6.1e+04</td> <td> 1.84e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.164]</th>          <td>-2.283e+04</td> <td> 1.51e+04</td> <td>   -1.511</td> <td> 0.131</td> <td>-5.24e+04</td> <td> 6795.581</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.165]</th>          <td> -2.21e+04</td> <td> 2.13e+04</td> <td>   -1.037</td> <td> 0.300</td> <td>-6.39e+04</td> <td> 1.97e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.166]</th>          <td>-1.551e+04</td> <td> 9441.670</td> <td>   -1.642</td> <td> 0.101</td> <td> -3.4e+04</td> <td> 3002.990</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.167]</th>          <td>-3.947e+04</td> <td> 3.24e+04</td> <td>   -1.218</td> <td> 0.223</td> <td>-1.03e+05</td> <td> 2.41e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.168]</th>          <td> 1.007e+04</td> <td> 7103.076</td> <td>    1.417</td> <td> 0.156</td> <td>-3857.374</td> <td>  2.4e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.169]</th>          <td> 1.283e+04</td> <td> 1.14e+04</td> <td>    1.121</td> <td> 0.262</td> <td>-9600.934</td> <td> 3.53e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.170]</th>          <td>-1.615e+04</td> <td>  1.4e+04</td> <td>   -1.150</td> <td> 0.250</td> <td>-4.37e+04</td> <td> 1.14e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.171]</th>          <td> 2.365e+04</td> <td> 7177.844</td> <td>    3.295</td> <td> 0.001</td> <td> 9576.024</td> <td> 3.77e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.172]</th>          <td>-3.626e+04</td> <td> 3.24e+04</td> <td>   -1.119</td> <td> 0.263</td> <td>-9.98e+04</td> <td> 2.73e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.173]</th>          <td>-2.629e+04</td> <td> 2.38e+04</td> <td>   -1.106</td> <td> 0.269</td> <td>-7.29e+04</td> <td> 2.03e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.174]</th>          <td>-2.314e+04</td> <td> 1.59e+04</td> <td>   -1.458</td> <td> 0.145</td> <td>-5.43e+04</td> <td> 7983.357</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.176]</th>          <td>-8331.5679</td> <td> 1.76e+04</td> <td>   -0.472</td> <td> 0.637</td> <td>-4.29e+04</td> <td> 2.62e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.177]</th>          <td>-7787.9729</td> <td> 6943.898</td> <td>   -1.122</td> <td> 0.262</td> <td>-2.14e+04</td> <td> 5825.123</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.178]</th>          <td>-8426.9047</td> <td> 9527.061</td> <td>   -0.885</td> <td> 0.376</td> <td>-2.71e+04</td> <td> 1.03e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.179]</th>          <td> 5061.4958</td> <td> 9108.387</td> <td>    0.556</td> <td> 0.578</td> <td>-1.28e+04</td> <td> 2.29e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.180]</th>          <td>-9156.0300</td> <td> 7253.999</td> <td>   -1.262</td> <td> 0.207</td> <td>-2.34e+04</td> <td> 5065.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.181]</th>          <td>-6042.8525</td> <td> 1.16e+04</td> <td>   -0.522</td> <td> 0.602</td> <td>-2.87e+04</td> <td> 1.67e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.182]</th>          <td>  -1.6e+04</td> <td> 8180.157</td> <td>   -1.956</td> <td> 0.051</td> <td> -3.2e+04</td> <td>   40.230</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.183]</th>          <td> 1688.4654</td> <td> 4051.315</td> <td>    0.417</td> <td> 0.677</td> <td>-6253.894</td> <td> 9630.825</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.184]</th>          <td>-1.566e+04</td> <td> 3739.789</td> <td>   -4.189</td> <td> 0.000</td> <td> -2.3e+04</td> <td>-8333.281</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.185]</th>          <td>-1.158e+04</td> <td>  1.5e+04</td> <td>   -0.769</td> <td> 0.442</td> <td>-4.11e+04</td> <td> 1.79e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.186]</th>          <td>-1.279e+04</td> <td> 1.07e+04</td> <td>   -1.198</td> <td> 0.231</td> <td>-3.37e+04</td> <td> 8134.088</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.187]</th>          <td>-6652.3137</td> <td> 8781.097</td> <td>   -0.758</td> <td> 0.449</td> <td>-2.39e+04</td> <td> 1.06e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.188]</th>          <td>-1.083e+04</td> <td> 3548.268</td> <td>   -3.053</td> <td> 0.002</td> <td>-1.78e+04</td> <td>-3878.254</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.189]</th>          <td>-2.122e+04</td> <td> 5407.161</td> <td>   -3.925</td> <td> 0.000</td> <td>-3.18e+04</td> <td>-1.06e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.190]</th>          <td>-2.661e+04</td> <td> 1.48e+04</td> <td>   -1.803</td> <td> 0.071</td> <td>-5.55e+04</td> <td> 2321.109</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.191]</th>          <td>-3036.3270</td> <td> 1.92e+04</td> <td>   -0.158</td> <td> 0.874</td> <td>-4.06e+04</td> <td> 3.45e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.192]</th>          <td> 6940.9690</td> <td> 9281.647</td> <td>    0.748</td> <td> 0.455</td> <td>-1.13e+04</td> <td> 2.51e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.193]</th>          <td>-9444.8116</td> <td> 1.05e+04</td> <td>   -0.902</td> <td> 0.367</td> <td>   -3e+04</td> <td> 1.11e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.194]</th>          <td> 2498.3312</td> <td> 1.35e+04</td> <td>    0.185</td> <td> 0.853</td> <td> -2.4e+04</td> <td>  2.9e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.195]</th>          <td> -2.03e+04</td> <td> 9595.165</td> <td>   -2.116</td> <td> 0.034</td> <td>-3.91e+04</td> <td>-1493.798</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.196]</th>          <td>-2753.6229</td> <td> 6585.461</td> <td>   -0.418</td> <td> 0.676</td> <td>-1.57e+04</td> <td> 1.02e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.197]</th>          <td>  1.33e+04</td> <td> 5757.604</td> <td>    2.311</td> <td> 0.021</td> <td> 2015.983</td> <td> 2.46e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.198]</th>          <td> 7328.9890</td> <td> 7484.437</td> <td>    0.979</td> <td> 0.328</td> <td>-7343.801</td> <td>  2.2e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.199]</th>          <td>-2.136e+04</td> <td> 8594.063</td> <td>   -2.485</td> <td> 0.013</td> <td>-3.82e+04</td> <td>-4510.853</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.200]</th>          <td>-7508.9207</td> <td> 3016.843</td> <td>   -2.489</td> <td> 0.013</td> <td>-1.34e+04</td> <td>-1594.581</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.201]</th>          <td>-2.737e+04</td> <td> 1.51e+04</td> <td>   -1.811</td> <td> 0.070</td> <td> -5.7e+04</td> <td> 2251.151</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.202]</th>          <td>-1237.8204</td> <td> 2.25e+04</td> <td>   -0.055</td> <td> 0.956</td> <td>-4.54e+04</td> <td> 4.29e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.203]</th>          <td>-6666.3212</td> <td> 1.53e+04</td> <td>   -0.435</td> <td> 0.664</td> <td>-3.67e+04</td> <td> 2.34e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.204]</th>          <td>-1.464e+04</td> <td> 9850.437</td> <td>   -1.486</td> <td> 0.137</td> <td>-3.39e+04</td> <td> 4674.099</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.205]</th>          <td>-1.706e+04</td> <td> 6442.944</td> <td>   -2.648</td> <td> 0.008</td> <td>-2.97e+04</td> <td>-4427.328</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.206]</th>          <td>-3.733e+04</td> <td> 1.51e+04</td> <td>   -2.465</td> <td> 0.014</td> <td> -6.7e+04</td> <td>-7640.473</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.209]</th>          <td> 6087.6907</td> <td> 1.35e+04</td> <td>    0.452</td> <td> 0.651</td> <td>-2.03e+04</td> <td> 3.25e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.210]</th>          <td>-2.578e+04</td> <td> 2.65e+04</td> <td>   -0.973</td> <td> 0.330</td> <td>-7.77e+04</td> <td> 2.61e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.211]</th>          <td>-1093.8388</td> <td> 7382.081</td> <td>   -0.148</td> <td> 0.882</td> <td>-1.56e+04</td> <td> 1.34e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.213]</th>          <td>-2.153e+04</td> <td> 2.35e+04</td> <td>   -0.916</td> <td> 0.360</td> <td>-6.76e+04</td> <td> 2.45e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.214]</th>          <td>-2.351e+04</td> <td> 1.27e+04</td> <td>   -1.858</td> <td> 0.063</td> <td>-4.83e+04</td> <td> 1299.507</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.215]</th>          <td> -1.66e+04</td> <td> 1.12e+04</td> <td>   -1.488</td> <td> 0.137</td> <td>-3.85e+04</td> <td> 5271.613</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.216]</th>          <td>-9052.8944</td> <td> 5337.794</td> <td>   -1.696</td> <td> 0.090</td> <td>-1.95e+04</td> <td> 1411.531</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.217]</th>          <td>-2.914e+04</td> <td> 9643.602</td> <td>   -3.021</td> <td> 0.003</td> <td> -4.8e+04</td> <td>-1.02e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.218]</th>          <td>-1.642e+04</td> <td> 1.66e+04</td> <td>   -0.987</td> <td> 0.324</td> <td> -4.9e+04</td> <td> 1.62e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.219]</th>          <td> -482.9429</td> <td> 8190.878</td> <td>   -0.059</td> <td> 0.953</td> <td>-1.65e+04</td> <td> 1.56e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.220]</th>          <td> 1.038e+04</td> <td> 1.11e+04</td> <td>    0.934</td> <td> 0.350</td> <td>-1.14e+04</td> <td> 3.22e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.221]</th>          <td> 7271.3058</td> <td> 1.15e+04</td> <td>    0.634</td> <td> 0.526</td> <td>-1.52e+04</td> <td> 2.97e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.222]</th>          <td>-1.622e+04</td> <td> 1.02e+04</td> <td>   -1.588</td> <td> 0.112</td> <td>-3.63e+04</td> <td> 3804.653</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.223]</th>          <td>-1.878e+04</td> <td> 5199.813</td> <td>   -3.612</td> <td> 0.000</td> <td> -2.9e+04</td> <td>-8586.505</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.224]</th>          <td>-9192.1466</td> <td> 1.45e+04</td> <td>   -0.636</td> <td> 0.525</td> <td>-3.75e+04</td> <td> 1.92e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.225]</th>          <td> 2641.2389</td> <td> 1.98e+04</td> <td>    0.134</td> <td> 0.894</td> <td>-3.61e+04</td> <td> 4.14e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.226]</th>          <td>-8830.2891</td> <td> 6639.675</td> <td>   -1.330</td> <td> 0.184</td> <td>-2.18e+04</td> <td> 4186.397</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.227]</th>          <td>-2.143e+04</td> <td> 1.09e+04</td> <td>   -1.970</td> <td> 0.049</td> <td>-4.28e+04</td> <td> -102.683</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.228]</th>          <td> 3.233e+04</td> <td> 1.71e+04</td> <td>    1.894</td> <td> 0.058</td> <td>-1135.703</td> <td> 6.58e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.229]</th>          <td>-1.428e+04</td> <td> 1.91e+04</td> <td>   -0.748</td> <td> 0.454</td> <td>-5.17e+04</td> <td> 2.31e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.230]</th>          <td> -1.28e+04</td> <td> 6264.355</td> <td>   -2.043</td> <td> 0.041</td> <td>-2.51e+04</td> <td> -517.493</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.231]</th>          <td>-8271.2748</td> <td> 7245.759</td> <td>   -1.142</td> <td> 0.254</td> <td>-2.25e+04</td> <td> 5933.602</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.232]</th>          <td>-2.299e+04</td> <td> 8519.159</td> <td>   -2.699</td> <td> 0.007</td> <td>-3.97e+04</td> <td>-6289.960</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.233]</th>          <td>-1.285e+04</td> <td> 8491.101</td> <td>   -1.513</td> <td> 0.130</td> <td>-2.95e+04</td> <td> 3796.614</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.234]</th>          <td>-1.735e+04</td> <td>  3.1e+04</td> <td>   -0.559</td> <td> 0.576</td> <td>-7.82e+04</td> <td> 4.35e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.235]</th>          <td>-1.766e+04</td> <td> 3.16e+04</td> <td>   -0.559</td> <td> 0.576</td> <td>-7.96e+04</td> <td> 4.43e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.236]</th>          <td>-1.217e+04</td> <td> 8349.230</td> <td>   -1.457</td> <td> 0.145</td> <td>-2.85e+04</td> <td> 4200.746</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.237]</th>          <td>-1.141e+04</td> <td> 4505.618</td> <td>   -2.533</td> <td> 0.011</td> <td>-2.02e+04</td> <td>-2581.176</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.238]</th>          <td>-1.613e+04</td> <td> 7139.990</td> <td>   -2.258</td> <td> 0.024</td> <td>-3.01e+04</td> <td>-2127.974</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.239]</th>          <td>-2.712e+04</td> <td> 2.14e+04</td> <td>   -1.266</td> <td> 0.206</td> <td>-6.91e+04</td> <td> 1.49e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.240]</th>          <td> 6490.6376</td> <td> 9154.156</td> <td>    0.709</td> <td> 0.478</td> <td>-1.15e+04</td> <td> 2.44e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.241]</th>          <td>-3359.7031</td> <td> 6189.659</td> <td>   -0.543</td> <td> 0.587</td> <td>-1.55e+04</td> <td> 8774.753</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.242]</th>          <td>-1.613e+04</td> <td> 1.27e+04</td> <td>   -1.272</td> <td> 0.203</td> <td> -4.1e+04</td> <td> 8724.775</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.243]</th>          <td>-1.788e+04</td> <td> 1.39e+04</td> <td>   -1.286</td> <td> 0.199</td> <td>-4.51e+04</td> <td> 9383.449</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.244]</th>          <td>-3.071e+04</td> <td> 1.43e+04</td> <td>   -2.150</td> <td> 0.032</td> <td>-5.87e+04</td> <td>-2703.321</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.245]</th>          <td>-8153.4624</td> <td> 1.35e+04</td> <td>   -0.603</td> <td> 0.547</td> <td>-3.47e+04</td> <td> 1.84e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.246]</th>          <td> 5281.9970</td> <td> 4036.138</td> <td>    1.309</td> <td> 0.191</td> <td>-2630.610</td> <td> 1.32e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.247]</th>          <td>-9765.4698</td> <td> 5639.622</td> <td>   -1.732</td> <td> 0.083</td> <td>-2.08e+04</td> <td> 1290.671</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.248]</th>          <td>  143.0204</td> <td> 8692.204</td> <td>    0.016</td> <td> 0.987</td> <td>-1.69e+04</td> <td> 1.72e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.249]</th>          <td>-1.476e+04</td> <td> 3.35e+04</td> <td>   -0.440</td> <td> 0.660</td> <td>-8.05e+04</td> <td>  5.1e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.250]</th>          <td> 1.616e+04</td> <td> 1.05e+04</td> <td>    1.541</td> <td> 0.123</td> <td>-4398.223</td> <td> 3.67e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.251]</th>          <td>-1.651e+04</td> <td> 9569.822</td> <td>   -1.726</td> <td> 0.084</td> <td>-3.53e+04</td> <td> 2247.701</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.252]</th>          <td> -1.57e+04</td> <td> 2.01e+04</td> <td>   -0.781</td> <td> 0.435</td> <td>-5.51e+04</td> <td> 2.37e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.253]</th>          <td>-1.801e+04</td> <td> 1.58e+04</td> <td>   -1.141</td> <td> 0.254</td> <td>-4.89e+04</td> <td> 1.29e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.254]</th>          <td>-5819.5313</td> <td> 1.24e+04</td> <td>   -0.470</td> <td> 0.638</td> <td>-3.01e+04</td> <td> 1.85e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.256]</th>          <td>-9352.6145</td> <td> 1.31e+04</td> <td>   -0.712</td> <td> 0.476</td> <td>-3.51e+04</td> <td> 1.64e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.257]</th>          <td>-1.474e+04</td> <td> 4650.454</td> <td>   -3.170</td> <td> 0.002</td> <td>-2.39e+04</td> <td>-5626.575</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.258]</th>          <td> -2.95e+04</td> <td> 1.86e+04</td> <td>   -1.587</td> <td> 0.113</td> <td> -6.6e+04</td> <td> 6945.417</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.259]</th>          <td> 5.662e+04</td> <td> 1.78e+04</td> <td>    3.176</td> <td> 0.002</td> <td> 2.17e+04</td> <td> 9.16e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.260]</th>          <td>-2.075e+04</td> <td> 1.42e+04</td> <td>   -1.461</td> <td> 0.144</td> <td>-4.86e+04</td> <td> 7093.704</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.261]</th>          <td>-1.214e+04</td> <td> 9508.704</td> <td>   -1.277</td> <td> 0.202</td> <td>-3.08e+04</td> <td> 6499.043</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.262]</th>          <td>-1.499e+04</td> <td> 3.16e+04</td> <td>   -0.474</td> <td> 0.635</td> <td>-7.69e+04</td> <td>  4.7e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.263]</th>          <td> 1.094e+04</td> <td> 1.25e+04</td> <td>    0.872</td> <td> 0.383</td> <td>-1.36e+04</td> <td> 3.55e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.264]</th>          <td>-2479.7477</td> <td> 1.18e+04</td> <td>   -0.210</td> <td> 0.834</td> <td>-2.57e+04</td> <td> 2.07e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.265]</th>          <td>-2.203e+04</td> <td> 1.05e+04</td> <td>   -2.105</td> <td> 0.035</td> <td>-4.25e+04</td> <td>-1517.160</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.266]</th>          <td> 6210.2882</td> <td> 3.35e+04</td> <td>    0.185</td> <td> 0.853</td> <td>-5.95e+04</td> <td> 7.19e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.267]</th>          <td>-1.138e+04</td> <td> 2.33e+04</td> <td>   -0.488</td> <td> 0.626</td> <td>-5.71e+04</td> <td> 3.44e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.268]</th>          <td>-2.097e+04</td> <td> 1.51e+04</td> <td>   -1.389</td> <td> 0.165</td> <td>-5.06e+04</td> <td> 8629.225</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.269]</th>          <td>-1.836e+04</td> <td> 7924.529</td> <td>   -2.317</td> <td> 0.021</td> <td>-3.39e+04</td> <td>-2824.110</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.270]</th>          <td>-1.361e+04</td> <td> 1.72e+04</td> <td>   -0.789</td> <td> 0.430</td> <td>-4.74e+04</td> <td> 2.02e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.271]</th>          <td>-1.204e+04</td> <td> 1.55e+04</td> <td>   -0.777</td> <td> 0.437</td> <td>-4.24e+04</td> <td> 1.84e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.272]</th>          <td>-1.485e+04</td> <td> 8880.399</td> <td>   -1.672</td> <td> 0.095</td> <td>-3.23e+04</td> <td> 2561.281</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.273]</th>          <td>-1.149e+04</td> <td> 2.63e+04</td> <td>   -0.438</td> <td> 0.662</td> <td> -6.3e+04</td> <td>    4e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.274]</th>          <td>-9891.3781</td> <td> 4694.196</td> <td>   -2.107</td> <td> 0.035</td> <td>-1.91e+04</td> <td> -688.687</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.275]</th>          <td>-5173.7930</td> <td> 1.15e+04</td> <td>   -0.449</td> <td> 0.653</td> <td>-2.77e+04</td> <td> 1.74e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.276]</th>          <td>-1.966e+04</td> <td> 1.66e+04</td> <td>   -1.182</td> <td> 0.237</td> <td>-5.22e+04</td> <td> 1.29e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.277]</th>          <td>-3.402e+04</td> <td> 2.86e+04</td> <td>   -1.188</td> <td> 0.235</td> <td>-9.01e+04</td> <td> 2.21e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.278]</th>          <td> 2322.2439</td> <td>  1.9e+04</td> <td>    0.122</td> <td> 0.903</td> <td>-3.49e+04</td> <td> 3.95e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.279]</th>          <td>-1.119e+04</td> <td> 1.84e+04</td> <td>   -0.609</td> <td> 0.543</td> <td>-4.72e+04</td> <td> 2.48e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.280]</th>          <td>-1.345e+04</td> <td> 6306.646</td> <td>   -2.133</td> <td> 0.033</td> <td>-2.58e+04</td> <td>-1085.930</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.281]</th>          <td>-8403.4354</td> <td> 2.99e+04</td> <td>   -0.281</td> <td> 0.778</td> <td>-6.69e+04</td> <td> 5.01e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.282]</th>          <td>-3681.0429</td> <td>  1.2e+04</td> <td>   -0.307</td> <td> 0.759</td> <td>-2.72e+04</td> <td> 1.99e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.283]</th>          <td>-5339.8789</td> <td> 9936.127</td> <td>   -0.537</td> <td> 0.591</td> <td>-2.48e+04</td> <td> 1.41e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.284]</th>          <td>-1.452e+04</td> <td> 8179.287</td> <td>   -1.775</td> <td> 0.076</td> <td>-3.06e+04</td> <td> 1519.240</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.285]</th>          <td> -3.43e+04</td> <td> 2.13e+04</td> <td>   -1.613</td> <td> 0.107</td> <td> -7.6e+04</td> <td> 7382.687</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.286]</th>          <td> 7684.0660</td> <td> 1.16e+04</td> <td>    0.664</td> <td> 0.507</td> <td> -1.5e+04</td> <td> 3.04e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.287]</th>          <td>-1.775e+04</td> <td> 5134.756</td> <td>   -3.456</td> <td> 0.001</td> <td>-2.78e+04</td> <td>-7680.041</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.288]</th>          <td> 2038.4699</td> <td> 1.76e+04</td> <td>    0.116</td> <td> 0.908</td> <td>-3.26e+04</td> <td> 3.66e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.289]</th>          <td>-8041.0146</td> <td> 1.11e+04</td> <td>   -0.726</td> <td> 0.468</td> <td>-2.97e+04</td> <td> 1.37e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.290]</th>          <td>-1.581e+04</td> <td> 7099.249</td> <td>   -2.227</td> <td> 0.026</td> <td>-2.97e+04</td> <td>-1889.232</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.291]</th>          <td>-7663.1814</td> <td> 1.35e+04</td> <td>   -0.567</td> <td> 0.571</td> <td>-3.42e+04</td> <td> 1.88e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.292]</th>          <td>-1.567e+04</td> <td> 7319.153</td> <td>   -2.141</td> <td> 0.032</td> <td>   -3e+04</td> <td>-1323.652</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.293]</th>          <td>-5825.2555</td> <td> 1.34e+04</td> <td>   -0.433</td> <td> 0.665</td> <td>-3.22e+04</td> <td> 2.05e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.294]</th>          <td> 1.947e+04</td> <td> 9840.528</td> <td>    1.978</td> <td> 0.048</td> <td>  177.105</td> <td> 3.88e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.295]</th>          <td> -1.75e+04</td> <td> 1.76e+04</td> <td>   -0.996</td> <td> 0.319</td> <td> -5.2e+04</td> <td>  1.7e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.296]</th>          <td>-1096.1249</td> <td>  1.8e+04</td> <td>   -0.061</td> <td> 0.951</td> <td>-3.64e+04</td> <td> 3.42e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.297]</th>          <td>-1.141e+04</td> <td> 4502.234</td> <td>   -2.535</td> <td> 0.011</td> <td>-2.02e+04</td> <td>-2586.102</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.298]</th>          <td>-8732.4700</td> <td> 2.87e+04</td> <td>   -0.304</td> <td> 0.761</td> <td> -6.5e+04</td> <td> 4.75e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.299]</th>          <td> -1.74e+04</td> <td> 2.99e+04</td> <td>   -0.583</td> <td> 0.560</td> <td>-7.59e+04</td> <td> 4.11e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.300]</th>          <td>-1.986e+04</td> <td> 1.04e+04</td> <td>   -1.907</td> <td> 0.057</td> <td>-4.03e+04</td> <td>  560.482</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.301]</th>          <td>-4.329e+04</td> <td> 3.24e+04</td> <td>   -1.336</td> <td> 0.182</td> <td>-1.07e+05</td> <td> 2.03e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.302]</th>          <td> 4581.0131</td> <td> 7593.047</td> <td>    0.603</td> <td> 0.546</td> <td>-1.03e+04</td> <td> 1.95e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.303]</th>          <td>-1.484e+04</td> <td> 7473.001</td> <td>   -1.985</td> <td> 0.047</td> <td>-2.95e+04</td> <td> -186.892</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.304]</th>          <td>-2.222e+04</td> <td> 8772.347</td> <td>   -2.533</td> <td> 0.011</td> <td>-3.94e+04</td> <td>-5022.926</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.305]</th>          <td>-2514.2672</td> <td> 7217.330</td> <td>   -0.348</td> <td> 0.728</td> <td>-1.67e+04</td> <td> 1.16e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.306]</th>          <td>-2.336e+04</td> <td> 1.99e+04</td> <td>   -1.174</td> <td> 0.240</td> <td>-6.24e+04</td> <td> 1.57e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.307]</th>          <td>-1.116e+04</td> <td> 9796.527</td> <td>   -1.139</td> <td> 0.255</td> <td>-3.04e+04</td> <td> 8045.695</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.308]</th>          <td> 8.973e+04</td> <td> 1.66e+04</td> <td>    5.411</td> <td> 0.000</td> <td> 5.72e+04</td> <td> 1.22e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.309]</th>          <td>-1.179e+04</td> <td> 5120.504</td> <td>   -2.302</td> <td> 0.021</td> <td>-2.18e+04</td> <td>-1747.726</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.310]</th>          <td>-1.268e+04</td> <td> 3.35e+04</td> <td>   -0.378</td> <td> 0.705</td> <td>-7.84e+04</td> <td> 5.31e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.311]</th>          <td>-1.624e+04</td> <td> 1.01e+04</td> <td>   -1.611</td> <td> 0.107</td> <td> -3.6e+04</td> <td> 3524.476</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.312]</th>          <td>-9191.1488</td> <td> 9873.286</td> <td>   -0.931</td> <td> 0.352</td> <td>-2.85e+04</td> <td> 1.02e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.313]</th>          <td>-1.765e+04</td> <td> 4.28e+04</td> <td>   -0.412</td> <td> 0.680</td> <td>-1.02e+05</td> <td> 6.63e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.314]</th>          <td>-1.793e+04</td> <td> 7170.454</td> <td>   -2.501</td> <td> 0.012</td> <td> -3.2e+04</td> <td>-3875.671</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.315]</th>          <td>  879.4379</td> <td> 1.04e+04</td> <td>    0.084</td> <td> 0.933</td> <td>-1.96e+04</td> <td> 2.13e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.316]</th>          <td>-5807.9640</td> <td> 6758.678</td> <td>   -0.859</td> <td> 0.390</td> <td>-1.91e+04</td> <td> 7442.020</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.317]</th>          <td> 1.794e+04</td> <td> 9335.924</td> <td>    1.922</td> <td> 0.055</td> <td> -362.354</td> <td> 3.62e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.318]</th>          <td>-4980.2142</td> <td> 8582.095</td> <td>   -0.580</td> <td> 0.562</td> <td>-2.18e+04</td> <td> 1.18e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.319]</th>          <td> 1051.3237</td> <td> 1.42e+04</td> <td>    0.074</td> <td> 0.941</td> <td>-2.68e+04</td> <td> 2.89e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.320]</th>          <td>-1.431e+04</td> <td>  1.5e+04</td> <td>   -0.951</td> <td> 0.341</td> <td>-4.38e+04</td> <td> 1.52e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.321]</th>          <td>-1.684e+04</td> <td> 6968.208</td> <td>   -2.416</td> <td> 0.016</td> <td>-3.05e+04</td> <td>-3176.799</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.322]</th>          <td> -406.6903</td> <td> 6523.846</td> <td>   -0.062</td> <td> 0.950</td> <td>-1.32e+04</td> <td> 1.24e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.323]</th>          <td>-1.853e+04</td> <td> 5726.625</td> <td>   -3.236</td> <td> 0.001</td> <td>-2.98e+04</td> <td>-7302.079</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.324]</th>          <td>-2501.1256</td> <td> 7866.013</td> <td>   -0.318</td> <td> 0.751</td> <td>-1.79e+04</td> <td> 1.29e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>C(county)[T.325]</th>          <td>-1.951e+04</td> <td> 2.24e+04</td> <td>   -0.873</td> <td> 0.383</td> <td>-6.33e+04</td> <td> 2.43e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>has_college</th>               <td> 1.325e+04</td> <td>  742.630</td> <td>   17.843</td> <td> 0.000</td> <td> 1.18e+04</td> <td> 1.47e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>female</th>                    <td>-8657.2875</td> <td>  609.011</td> <td>  -14.215</td> <td> 0.000</td> <td>-9851.217</td> <td>-7463.358</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>2414.039</td> <th>  Durbin-Watson:     </th> <td>   1.981</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>22245.534</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 1.945</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>12.242</td>  <th>  Cond. No.          </th> <td>    198.</td> \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            WLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:        annual_earnings   R-squared:                       0.238\n",
       "Model:                            WLS   Adj. R-squared:                  0.188\n",
       "Method:                 Least Squares   F-statistic:                     4.786\n",
       "Date:                Tue, 23 Feb 2021   Prob (F-statistic):          1.62e-132\n",
       "Time:                        09:39:28   Log-Likelihood:                -61189.\n",
       "No. Observations:                5310   AIC:                         1.230e+05\n",
       "Df Residuals:                    4984   BIC:                         1.252e+05\n",
       "Df Model:                         325                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=============================================================================================\n",
       "                                coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------------\n",
       "Intercept                  4.761e+04   2429.505     19.595      0.000    4.28e+04    5.24e+04\n",
       "C(simplified_race)[T.1.0] -8344.9150   1067.331     -7.818      0.000   -1.04e+04   -6252.476\n",
       "C(simplified_race)[T.2.0] -6753.9175   1140.523     -5.922      0.000   -8989.844   -4517.991\n",
       "C(simplified_race)[T.3.0] -3220.6308   1202.997     -2.677      0.007   -5579.035    -862.227\n",
       "C(discretized_age)[T.3]    8584.0505    868.037      9.889      0.000    6882.316    1.03e+04\n",
       "C(discretized_age)[T.4]    1.251e+04    923.078     13.558      0.000    1.07e+04    1.43e+04\n",
       "C(discretized_age)[T.5]    1.266e+04    964.214     13.131      0.000    1.08e+04    1.46e+04\n",
       "C(discretized_age)[T.6]    9235.0616   1189.062      7.767      0.000    6903.976    1.16e+04\n",
       "C(discretized_age)[T.7]    1.347e+04   2975.342      4.528      0.000    7639.580    1.93e+04\n",
       "C(county)[T.1]            -1.114e+04   3231.653     -3.446      0.001   -1.75e+04   -4799.550\n",
       "C(county)[T.2]            -1.279e+04   3245.734     -3.942      0.000   -1.92e+04   -6430.115\n",
       "C(county)[T.3]            -9142.9921   1.19e+04     -0.771      0.441   -3.24e+04    1.41e+04\n",
       "C(county)[T.4]            -6471.4363   2990.234     -2.164      0.030   -1.23e+04    -609.261\n",
       "C(county)[T.5]            -6378.3577   4178.131     -1.527      0.127   -1.46e+04    1812.617\n",
       "C(county)[T.6]            -1.627e+04   1.04e+04     -1.566      0.118   -3.66e+04    4103.579\n",
       "C(county)[T.7]            -1.023e+04   3835.754     -2.666      0.008   -1.77e+04   -2706.649\n",
       "C(county)[T.8]            -1.153e+04   3175.916     -3.629      0.000   -1.78e+04   -5300.388\n",
       "C(county)[T.9]            -1.382e+04   5130.249     -2.694      0.007   -2.39e+04   -3762.096\n",
       "C(county)[T.10]           -1.501e+04   3427.926     -4.380      0.000   -2.17e+04   -8293.693\n",
       "C(county)[T.11]           -1.418e+04   3040.008     -4.664      0.000   -2.01e+04   -8218.173\n",
       "C(county)[T.12]           -6849.3954   3121.285     -2.194      0.028    -1.3e+04    -730.303\n",
       "C(county)[T.13]           -1.381e+04   3368.446     -4.101      0.000   -2.04e+04   -7209.235\n",
       "C(county)[T.14]           -1.369e+04   3918.748     -3.493      0.000   -2.14e+04   -6007.378\n",
       "C(county)[T.15]           -9190.4689   4799.618     -1.915      0.056   -1.86e+04     218.895\n",
       "C(county)[T.16]           -1.061e+04   3616.372     -2.935      0.003   -1.77e+04   -3523.982\n",
       "C(county)[T.17]           -1.601e+04   7731.556     -2.070      0.038   -3.12e+04    -848.909\n",
       "C(county)[T.18]           -1788.7046   4787.690     -0.374      0.709   -1.12e+04    7597.275\n",
       "C(county)[T.19]           -1.684e+04   6555.900     -2.569      0.010   -2.97e+04   -3989.067\n",
       "C(county)[T.20]             -1.4e+04   4328.098     -3.235      0.001   -2.25e+04   -5515.772\n",
       "C(county)[T.21]           -6184.3776   3595.547     -1.720      0.085   -1.32e+04     864.476\n",
       "C(county)[T.22]           -1.826e+04   3694.928     -4.941      0.000   -2.55e+04    -1.1e+04\n",
       "C(county)[T.23]           -1.242e+04   3244.837     -3.828      0.000   -1.88e+04   -6059.940\n",
       "C(county)[T.24]           -1.104e+04   3171.193     -3.482      0.001   -1.73e+04   -4824.300\n",
       "C(county)[T.25]           -1.506e+04   3496.105     -4.309      0.000   -2.19e+04   -8211.049\n",
       "C(county)[T.26]           -1.391e+04   3137.745     -4.432      0.000   -2.01e+04   -7755.819\n",
       "C(county)[T.27]           -1.337e+04   3345.523     -3.997      0.000   -1.99e+04   -6814.638\n",
       "C(county)[T.28]           -1.297e+04   5671.204     -2.287      0.022   -2.41e+04   -1853.870\n",
       "C(county)[T.29]           -4845.0790   5203.125     -0.931      0.352    -1.5e+04    5355.335\n",
       "C(county)[T.30]           -2248.8602   5067.398     -0.444      0.657   -1.22e+04    7685.469\n",
       "C(county)[T.31]           -1.155e+04   4710.979     -2.452      0.014   -2.08e+04   -2313.897\n",
       "C(county)[T.32]           -7114.5598   3632.908     -1.958      0.050   -1.42e+04       7.538\n",
       "C(county)[T.33]           -1.272e+04   3067.035     -4.149      0.000   -1.87e+04   -6711.354\n",
       "C(county)[T.34]            -1.32e+04   3443.339     -3.833      0.000   -1.99e+04   -6447.428\n",
       "C(county)[T.35]           -9324.2429   3384.603     -2.755      0.006    -1.6e+04   -2688.932\n",
       "C(county)[T.36]           -1.505e+04   3658.198     -4.115      0.000   -2.22e+04   -7881.001\n",
       "C(county)[T.37]           -1.023e+04   3762.247     -2.720      0.007   -1.76e+04   -2856.766\n",
       "C(county)[T.38]           -1.308e+04   3310.408     -3.951      0.000   -1.96e+04   -6590.153\n",
       "C(county)[T.39]           -1.177e+04   3252.230     -3.618      0.000   -1.81e+04   -5391.513\n",
       "C(county)[T.40]           -1.516e+04   3677.299     -4.123      0.000   -2.24e+04   -7954.028\n",
       "C(county)[T.41]           -9224.6049   2690.524     -3.429      0.001   -1.45e+04   -3949.994\n",
       "C(county)[T.42]           -1.365e+04   3460.095     -3.944      0.000   -2.04e+04   -6864.991\n",
       "C(county)[T.43]           -1.165e+04   3698.161     -3.151      0.002   -1.89e+04   -4404.402\n",
       "C(county)[T.44]            -1.07e+04   2961.782     -3.611      0.000   -1.65e+04   -4889.799\n",
       "C(county)[T.45]           -7052.4496   3127.876     -2.255      0.024   -1.32e+04    -920.437\n",
       "C(county)[T.46]           -9064.0230   3380.497     -2.681      0.007   -1.57e+04   -2436.761\n",
       "C(county)[T.47]           -1.681e+04   3013.844     -5.579      0.000   -2.27e+04   -1.09e+04\n",
       "C(county)[T.48]           -8897.8731   3296.249     -2.699      0.007   -1.54e+04   -2435.774\n",
       "C(county)[T.49]            2.125e+04   7993.324      2.659      0.008    5580.256    3.69e+04\n",
       "C(county)[T.50]           -2.251e+04   1.13e+04     -1.997      0.046   -4.46e+04    -409.459\n",
       "C(county)[T.51]           -5880.2544   3452.043     -1.703      0.089   -1.26e+04     887.270\n",
       "C(county)[T.52]           -1.006e+04   8297.064     -1.213      0.225   -2.63e+04    6201.302\n",
       "C(county)[T.53]           -7396.8710   1.97e+04     -0.376      0.707   -4.59e+04    3.12e+04\n",
       "C(county)[T.54]           -1.349e+04   8853.843     -1.524      0.128   -3.08e+04    3865.030\n",
       "C(county)[T.55]            6016.8132   9691.581      0.621      0.535    -1.3e+04     2.5e+04\n",
       "C(county)[T.56]           -7435.2407   7281.280     -1.021      0.307   -2.17e+04    6839.272\n",
       "C(county)[T.57]            8434.9441    1.4e+04      0.604      0.546   -1.89e+04    3.58e+04\n",
       "C(county)[T.58]           -5918.5652   5278.657     -1.121      0.262   -1.63e+04    4429.925\n",
       "C(county)[T.59]           -1.631e+04   9894.838     -1.649      0.099   -3.57e+04    3086.114\n",
       "C(county)[T.60]           -1.499e+04   6719.761     -2.231      0.026   -2.82e+04   -1819.273\n",
       "C(county)[T.61]           -8015.9218   1.09e+04     -0.732      0.464   -2.95e+04    1.34e+04\n",
       "C(county)[T.62]            1.171e+04   1.32e+04      0.884      0.377   -1.43e+04    3.77e+04\n",
       "C(county)[T.63]           -1.124e+04   8626.461     -1.303      0.193   -2.82e+04    5671.473\n",
       "C(county)[T.64]             1.57e+04   8596.970      1.826      0.068   -1156.314    3.26e+04\n",
       "C(county)[T.65]           -1.964e+04   9254.939     -2.122      0.034   -3.78e+04   -1498.590\n",
       "C(county)[T.66]           -2.286e+04   1.47e+04     -1.550      0.121   -5.18e+04    6046.864\n",
       "C(county)[T.67]           -1.286e+04   2.97e+04     -0.434      0.664    -7.1e+04    4.53e+04\n",
       "C(county)[T.68]             265.8046   9594.437      0.028      0.978   -1.85e+04    1.91e+04\n",
       "C(county)[T.69]           -1.382e+04   9042.247     -1.528      0.127   -3.15e+04    3909.886\n",
       "C(county)[T.70]           -2.086e+04   1.33e+04     -1.567      0.117    -4.7e+04    5231.063\n",
       "C(county)[T.71]           -1.914e+04   8999.435     -2.127      0.033   -3.68e+04   -1501.949\n",
       "C(county)[T.72]            1.203e+04   1.91e+04      0.630      0.528   -2.54e+04    4.95e+04\n",
       "C(county)[T.73]           -4151.5319   5648.737     -0.735      0.462   -1.52e+04    6922.479\n",
       "C(county)[T.74]           -1.341e+04   7534.403     -1.780      0.075   -2.82e+04    1357.560\n",
       "C(county)[T.75]           -1.719e+04   3924.766     -4.381      0.000   -2.49e+04   -9500.690\n",
       "C(county)[T.76]           -3.746e+04   2.62e+04     -1.430      0.153   -8.88e+04    1.39e+04\n",
       "C(county)[T.77]             237.8624   6897.951      0.034      0.972   -1.33e+04    1.38e+04\n",
       "C(county)[T.78]            6770.8989   2.24e+04      0.302      0.763   -3.72e+04    5.07e+04\n",
       "C(county)[T.79]            4.146e+04   8462.736      4.899      0.000    2.49e+04     5.8e+04\n",
       "C(county)[T.80]           -1.741e+04   5589.953     -3.115      0.002   -2.84e+04   -6454.909\n",
       "C(county)[T.81]           -1.143e+04   5721.800     -1.998      0.046   -2.27e+04    -216.304\n",
       "C(county)[T.82]           -1.658e+04   1.61e+04     -1.032      0.302   -4.81e+04    1.49e+04\n",
       "C(county)[T.83]           -2.307e+04   1.25e+04     -1.840      0.066   -4.77e+04    1514.953\n",
       "C(county)[T.84]           -8999.9730   1.22e+04     -0.740      0.459   -3.28e+04    1.48e+04\n",
       "C(county)[T.85]            3419.8384   9046.856      0.378      0.705   -1.43e+04    2.12e+04\n",
       "C(county)[T.86]            1.824e+04   1.43e+04      1.279      0.201   -9720.390    4.62e+04\n",
       "C(county)[T.87]           -2.403e+04   1.09e+04     -2.205      0.027   -4.54e+04   -2667.316\n",
       "C(county)[T.88]           -1.326e+04   1.74e+04     -0.763      0.445   -4.73e+04    2.08e+04\n",
       "C(county)[T.89]           -1.574e+04   8531.472     -1.845      0.065   -3.25e+04     985.816\n",
       "C(county)[T.90]           -8870.8793   4968.614     -1.785      0.074   -1.86e+04     869.791\n",
       "C(county)[T.91]            -1.04e+04   9791.880     -1.062      0.288   -2.96e+04    8799.744\n",
       "C(county)[T.92]           -1.687e+04   1.17e+04     -1.441      0.150   -3.98e+04    6076.622\n",
       "C(county)[T.93]           -4593.8182   9052.966     -0.507      0.612   -2.23e+04    1.32e+04\n",
       "C(county)[T.94]             -66.5470   9761.637     -0.007      0.995   -1.92e+04    1.91e+04\n",
       "C(county)[T.95]           -1.199e+04   5085.007     -2.357      0.018    -2.2e+04   -2017.441\n",
       "C(county)[T.96]            -1.27e+04   1.03e+04     -1.228      0.219    -3.3e+04    7572.284\n",
       "C(county)[T.97]           -2.457e+04   9432.408     -2.605      0.009   -4.31e+04   -6080.404\n",
       "C(county)[T.98]            2197.3011   1.53e+04      0.144      0.886   -2.78e+04    3.22e+04\n",
       "C(county)[T.99]           -9289.2093   3098.282     -2.998      0.003   -1.54e+04   -3215.213\n",
       "C(county)[T.100]           1.121e+04   7876.656      1.423      0.155   -4235.032    2.66e+04\n",
       "C(county)[T.101]          -1.684e+04   9598.189     -1.754      0.079   -3.57e+04    1979.720\n",
       "C(county)[T.102]          -2597.8743   1.35e+04     -0.192      0.847   -2.91e+04    2.39e+04\n",
       "C(county)[T.103]          -1.014e+04   9066.754     -1.118      0.264   -2.79e+04    7638.542\n",
       "C(county)[T.104]           -252.2631   1.16e+04     -0.022      0.983    -2.3e+04    2.25e+04\n",
       "C(county)[T.105]          -1.145e+04    1.3e+04     -0.880      0.379    -3.7e+04    1.41e+04\n",
       "C(county)[T.106]          -3.539e+04   3.35e+04     -1.055      0.291   -1.01e+05    3.03e+04\n",
       "C(county)[T.107]          -3.364e+04   1.71e+04     -1.962      0.050   -6.72e+04     -29.720\n",
       "C(county)[T.109]          -4795.8027   8034.001     -0.597      0.551   -2.05e+04     1.1e+04\n",
       "C(county)[T.110]          -8716.5745   1.06e+04     -0.822      0.411   -2.95e+04    1.21e+04\n",
       "C(county)[T.111]          -1.946e+04   2.19e+04     -0.889      0.374   -6.24e+04    2.35e+04\n",
       "C(county)[T.112]          -7351.2007   1.42e+04     -0.516      0.606   -3.53e+04    2.06e+04\n",
       "C(county)[T.113]          -2.293e+04    2.6e+04     -0.882      0.378   -7.39e+04     2.8e+04\n",
       "C(county)[T.114]          -1.908e+04   1.61e+04     -1.185      0.236   -5.07e+04    1.25e+04\n",
       "C(county)[T.115]          -2798.0105      1e+04     -0.280      0.780   -2.24e+04    1.68e+04\n",
       "C(county)[T.116]          -8785.2988   1.35e+04     -0.650      0.516   -3.53e+04    1.77e+04\n",
       "C(county)[T.117]          -2.473e+04   4.28e+04     -0.577      0.564   -1.09e+05    5.92e+04\n",
       "C(county)[T.118]          -1.698e+04    1.1e+04     -1.538      0.124   -3.86e+04    4669.861\n",
       "C(county)[T.120]          -1.704e+04   1.32e+04     -1.287      0.198    -4.3e+04    8908.447\n",
       "C(county)[T.121]          -2.767e+04   1.32e+04     -2.093      0.036   -5.36e+04   -1747.007\n",
       "C(county)[T.123]          -1.291e+04   5091.347     -2.536      0.011   -2.29e+04   -2931.559\n",
       "C(county)[T.124]          -3.209e+04      1e+04     -3.197      0.001   -5.18e+04   -1.24e+04\n",
       "C(county)[T.125]          -1.795e+04   1.25e+04     -1.440      0.150   -4.24e+04    6490.095\n",
       "C(county)[T.126]          -6948.1460   9793.690     -0.709      0.478   -2.61e+04    1.23e+04\n",
       "C(county)[T.127]          -4111.7736   9598.180     -0.428      0.668   -2.29e+04    1.47e+04\n",
       "C(county)[T.128]          -1.407e+04   3.35e+04     -0.420      0.675   -7.98e+04    5.17e+04\n",
       "C(county)[T.129]          -1.338e+04   1.22e+04     -1.094      0.274   -3.73e+04    1.06e+04\n",
       "C(county)[T.130]          -2.958e+04   1.24e+04     -2.379      0.017    -5.4e+04   -5205.688\n",
       "C(county)[T.131]          -9462.1890   2.13e+04     -0.445      0.656   -5.11e+04    3.22e+04\n",
       "C(county)[T.132]          -7889.2394   5638.330     -1.399      0.162   -1.89e+04    3164.369\n",
       "C(county)[T.133]           2175.4884   1.51e+04      0.144      0.886   -2.75e+04    3.18e+04\n",
       "C(county)[T.134]           5.467e+04    1.8e+04      3.045      0.002    1.95e+04    8.99e+04\n",
       "C(county)[T.135]          -2.083e+04   1.38e+04     -1.509      0.131   -4.79e+04    6228.141\n",
       "C(county)[T.136]          -4420.8608   5997.620     -0.737      0.461   -1.62e+04    7337.113\n",
       "C(county)[T.137]          -4087.2387   8100.626     -0.505      0.614      -2e+04    1.18e+04\n",
       "C(county)[T.138]          -7939.1789   8029.739     -0.989      0.323   -2.37e+04    7802.643\n",
       "C(county)[T.139]           -692.3178   1.02e+04     -0.068      0.946   -2.08e+04    1.94e+04\n",
       "C(county)[T.140]          -1.651e+04   1.37e+04     -1.202      0.229   -4.34e+04    1.04e+04\n",
       "C(county)[T.141]          -8251.4595   1.22e+04     -0.676      0.499   -3.22e+04    1.57e+04\n",
       "C(county)[T.142]          -1373.8309   2.13e+04     -0.065      0.948    -4.3e+04    4.03e+04\n",
       "C(county)[T.143]          -5545.8845   5862.828     -0.946      0.344    -1.7e+04    5947.838\n",
       "C(county)[T.144]          -4.741e+04   2.12e+04     -2.232      0.026   -8.91e+04   -5771.921\n",
       "C(county)[T.145]          -9556.0440   3.47e+04     -0.276      0.783   -7.75e+04    5.84e+04\n",
       "C(county)[T.146]          -1.903e+04   1.59e+04     -1.196      0.232   -5.02e+04    1.22e+04\n",
       "C(county)[T.147]            -2.8e+04   1.52e+04     -1.848      0.065   -5.77e+04    1707.239\n",
       "C(county)[T.148]          -2.012e+04   1.76e+04     -1.146      0.252   -5.45e+04    1.43e+04\n",
       "C(county)[T.149]          -1.012e+04   4824.670     -2.097      0.036   -1.96e+04    -657.758\n",
       "C(county)[T.150]          -2.052e+04   3.35e+04     -0.612      0.541   -8.63e+04    4.52e+04\n",
       "C(county)[T.151]          -2.235e+04   1.13e+04     -1.974      0.048   -4.45e+04    -157.867\n",
       "C(county)[T.152]          -1.249e+04   7332.914     -1.703      0.089   -2.69e+04    1887.273\n",
       "C(county)[T.153]          -1.074e+04   2.99e+04     -0.360      0.719   -6.93e+04    4.78e+04\n",
       "C(county)[T.155]          -1.174e+04   1.32e+04     -0.892      0.373   -3.75e+04    1.41e+04\n",
       "C(county)[T.157]          -2.379e+04   1.34e+04     -1.777      0.076      -5e+04    2454.505\n",
       "C(county)[T.158]           -3.57e+04   1.24e+04     -2.878      0.004      -6e+04   -1.14e+04\n",
       "C(county)[T.159]          -3961.2072   2.67e+04     -0.149      0.882   -5.62e+04    4.83e+04\n",
       "C(county)[T.160]          -1.811e+04   8356.451     -2.167      0.030   -3.45e+04   -1729.232\n",
       "C(county)[T.161]           6091.1910   8574.294      0.710      0.477   -1.07e+04    2.29e+04\n",
       "C(county)[T.162]           9087.0830   1.55e+04      0.586      0.558   -2.13e+04    3.95e+04\n",
       "C(county)[T.163]          -2.133e+04   2.02e+04     -1.054      0.292    -6.1e+04    1.84e+04\n",
       "C(county)[T.164]          -2.283e+04   1.51e+04     -1.511      0.131   -5.24e+04    6795.581\n",
       "C(county)[T.165]           -2.21e+04   2.13e+04     -1.037      0.300   -6.39e+04    1.97e+04\n",
       "C(county)[T.166]          -1.551e+04   9441.670     -1.642      0.101    -3.4e+04    3002.990\n",
       "C(county)[T.167]          -3.947e+04   3.24e+04     -1.218      0.223   -1.03e+05    2.41e+04\n",
       "C(county)[T.168]           1.007e+04   7103.076      1.417      0.156   -3857.374     2.4e+04\n",
       "C(county)[T.169]           1.283e+04   1.14e+04      1.121      0.262   -9600.934    3.53e+04\n",
       "C(county)[T.170]          -1.615e+04    1.4e+04     -1.150      0.250   -4.37e+04    1.14e+04\n",
       "C(county)[T.171]           2.365e+04   7177.844      3.295      0.001    9576.024    3.77e+04\n",
       "C(county)[T.172]          -3.626e+04   3.24e+04     -1.119      0.263   -9.98e+04    2.73e+04\n",
       "C(county)[T.173]          -2.629e+04   2.38e+04     -1.106      0.269   -7.29e+04    2.03e+04\n",
       "C(county)[T.174]          -2.314e+04   1.59e+04     -1.458      0.145   -5.43e+04    7983.357\n",
       "C(county)[T.176]          -8331.5679   1.76e+04     -0.472      0.637   -4.29e+04    2.62e+04\n",
       "C(county)[T.177]          -7787.9729   6943.898     -1.122      0.262   -2.14e+04    5825.123\n",
       "C(county)[T.178]          -8426.9047   9527.061     -0.885      0.376   -2.71e+04    1.03e+04\n",
       "C(county)[T.179]           5061.4958   9108.387      0.556      0.578   -1.28e+04    2.29e+04\n",
       "C(county)[T.180]          -9156.0300   7253.999     -1.262      0.207   -2.34e+04    5065.000\n",
       "C(county)[T.181]          -6042.8525   1.16e+04     -0.522      0.602   -2.87e+04    1.67e+04\n",
       "C(county)[T.182]            -1.6e+04   8180.157     -1.956      0.051    -3.2e+04      40.230\n",
       "C(county)[T.183]           1688.4654   4051.315      0.417      0.677   -6253.894    9630.825\n",
       "C(county)[T.184]          -1.566e+04   3739.789     -4.189      0.000    -2.3e+04   -8333.281\n",
       "C(county)[T.185]          -1.158e+04    1.5e+04     -0.769      0.442   -4.11e+04    1.79e+04\n",
       "C(county)[T.186]          -1.279e+04   1.07e+04     -1.198      0.231   -3.37e+04    8134.088\n",
       "C(county)[T.187]          -6652.3137   8781.097     -0.758      0.449   -2.39e+04    1.06e+04\n",
       "C(county)[T.188]          -1.083e+04   3548.268     -3.053      0.002   -1.78e+04   -3878.254\n",
       "C(county)[T.189]          -2.122e+04   5407.161     -3.925      0.000   -3.18e+04   -1.06e+04\n",
       "C(county)[T.190]          -2.661e+04   1.48e+04     -1.803      0.071   -5.55e+04    2321.109\n",
       "C(county)[T.191]          -3036.3270   1.92e+04     -0.158      0.874   -4.06e+04    3.45e+04\n",
       "C(county)[T.192]           6940.9690   9281.647      0.748      0.455   -1.13e+04    2.51e+04\n",
       "C(county)[T.193]          -9444.8116   1.05e+04     -0.902      0.367      -3e+04    1.11e+04\n",
       "C(county)[T.194]           2498.3312   1.35e+04      0.185      0.853    -2.4e+04     2.9e+04\n",
       "C(county)[T.195]           -2.03e+04   9595.165     -2.116      0.034   -3.91e+04   -1493.798\n",
       "C(county)[T.196]          -2753.6229   6585.461     -0.418      0.676   -1.57e+04    1.02e+04\n",
       "C(county)[T.197]            1.33e+04   5757.604      2.311      0.021    2015.983    2.46e+04\n",
       "C(county)[T.198]           7328.9890   7484.437      0.979      0.328   -7343.801     2.2e+04\n",
       "C(county)[T.199]          -2.136e+04   8594.063     -2.485      0.013   -3.82e+04   -4510.853\n",
       "C(county)[T.200]          -7508.9207   3016.843     -2.489      0.013   -1.34e+04   -1594.581\n",
       "C(county)[T.201]          -2.737e+04   1.51e+04     -1.811      0.070    -5.7e+04    2251.151\n",
       "C(county)[T.202]          -1237.8204   2.25e+04     -0.055      0.956   -4.54e+04    4.29e+04\n",
       "C(county)[T.203]          -6666.3212   1.53e+04     -0.435      0.664   -3.67e+04    2.34e+04\n",
       "C(county)[T.204]          -1.464e+04   9850.437     -1.486      0.137   -3.39e+04    4674.099\n",
       "C(county)[T.205]          -1.706e+04   6442.944     -2.648      0.008   -2.97e+04   -4427.328\n",
       "C(county)[T.206]          -3.733e+04   1.51e+04     -2.465      0.014    -6.7e+04   -7640.473\n",
       "C(county)[T.209]           6087.6907   1.35e+04      0.452      0.651   -2.03e+04    3.25e+04\n",
       "C(county)[T.210]          -2.578e+04   2.65e+04     -0.973      0.330   -7.77e+04    2.61e+04\n",
       "C(county)[T.211]          -1093.8388   7382.081     -0.148      0.882   -1.56e+04    1.34e+04\n",
       "C(county)[T.213]          -2.153e+04   2.35e+04     -0.916      0.360   -6.76e+04    2.45e+04\n",
       "C(county)[T.214]          -2.351e+04   1.27e+04     -1.858      0.063   -4.83e+04    1299.507\n",
       "C(county)[T.215]           -1.66e+04   1.12e+04     -1.488      0.137   -3.85e+04    5271.613\n",
       "C(county)[T.216]          -9052.8944   5337.794     -1.696      0.090   -1.95e+04    1411.531\n",
       "C(county)[T.217]          -2.914e+04   9643.602     -3.021      0.003    -4.8e+04   -1.02e+04\n",
       "C(county)[T.218]          -1.642e+04   1.66e+04     -0.987      0.324    -4.9e+04    1.62e+04\n",
       "C(county)[T.219]           -482.9429   8190.878     -0.059      0.953   -1.65e+04    1.56e+04\n",
       "C(county)[T.220]           1.038e+04   1.11e+04      0.934      0.350   -1.14e+04    3.22e+04\n",
       "C(county)[T.221]           7271.3058   1.15e+04      0.634      0.526   -1.52e+04    2.97e+04\n",
       "C(county)[T.222]          -1.622e+04   1.02e+04     -1.588      0.112   -3.63e+04    3804.653\n",
       "C(county)[T.223]          -1.878e+04   5199.813     -3.612      0.000    -2.9e+04   -8586.505\n",
       "C(county)[T.224]          -9192.1466   1.45e+04     -0.636      0.525   -3.75e+04    1.92e+04\n",
       "C(county)[T.225]           2641.2389   1.98e+04      0.134      0.894   -3.61e+04    4.14e+04\n",
       "C(county)[T.226]          -8830.2891   6639.675     -1.330      0.184   -2.18e+04    4186.397\n",
       "C(county)[T.227]          -2.143e+04   1.09e+04     -1.970      0.049   -4.28e+04    -102.683\n",
       "C(county)[T.228]           3.233e+04   1.71e+04      1.894      0.058   -1135.703    6.58e+04\n",
       "C(county)[T.229]          -1.428e+04   1.91e+04     -0.748      0.454   -5.17e+04    2.31e+04\n",
       "C(county)[T.230]           -1.28e+04   6264.355     -2.043      0.041   -2.51e+04    -517.493\n",
       "C(county)[T.231]          -8271.2748   7245.759     -1.142      0.254   -2.25e+04    5933.602\n",
       "C(county)[T.232]          -2.299e+04   8519.159     -2.699      0.007   -3.97e+04   -6289.960\n",
       "C(county)[T.233]          -1.285e+04   8491.101     -1.513      0.130   -2.95e+04    3796.614\n",
       "C(county)[T.234]          -1.735e+04    3.1e+04     -0.559      0.576   -7.82e+04    4.35e+04\n",
       "C(county)[T.235]          -1.766e+04   3.16e+04     -0.559      0.576   -7.96e+04    4.43e+04\n",
       "C(county)[T.236]          -1.217e+04   8349.230     -1.457      0.145   -2.85e+04    4200.746\n",
       "C(county)[T.237]          -1.141e+04   4505.618     -2.533      0.011   -2.02e+04   -2581.176\n",
       "C(county)[T.238]          -1.613e+04   7139.990     -2.258      0.024   -3.01e+04   -2127.974\n",
       "C(county)[T.239]          -2.712e+04   2.14e+04     -1.266      0.206   -6.91e+04    1.49e+04\n",
       "C(county)[T.240]           6490.6376   9154.156      0.709      0.478   -1.15e+04    2.44e+04\n",
       "C(county)[T.241]          -3359.7031   6189.659     -0.543      0.587   -1.55e+04    8774.753\n",
       "C(county)[T.242]          -1.613e+04   1.27e+04     -1.272      0.203    -4.1e+04    8724.775\n",
       "C(county)[T.243]          -1.788e+04   1.39e+04     -1.286      0.199   -4.51e+04    9383.449\n",
       "C(county)[T.244]          -3.071e+04   1.43e+04     -2.150      0.032   -5.87e+04   -2703.321\n",
       "C(county)[T.245]          -8153.4624   1.35e+04     -0.603      0.547   -3.47e+04    1.84e+04\n",
       "C(county)[T.246]           5281.9970   4036.138      1.309      0.191   -2630.610    1.32e+04\n",
       "C(county)[T.247]          -9765.4698   5639.622     -1.732      0.083   -2.08e+04    1290.671\n",
       "C(county)[T.248]            143.0204   8692.204      0.016      0.987   -1.69e+04    1.72e+04\n",
       "C(county)[T.249]          -1.476e+04   3.35e+04     -0.440      0.660   -8.05e+04     5.1e+04\n",
       "C(county)[T.250]           1.616e+04   1.05e+04      1.541      0.123   -4398.223    3.67e+04\n",
       "C(county)[T.251]          -1.651e+04   9569.822     -1.726      0.084   -3.53e+04    2247.701\n",
       "C(county)[T.252]           -1.57e+04   2.01e+04     -0.781      0.435   -5.51e+04    2.37e+04\n",
       "C(county)[T.253]          -1.801e+04   1.58e+04     -1.141      0.254   -4.89e+04    1.29e+04\n",
       "C(county)[T.254]          -5819.5313   1.24e+04     -0.470      0.638   -3.01e+04    1.85e+04\n",
       "C(county)[T.256]          -9352.6145   1.31e+04     -0.712      0.476   -3.51e+04    1.64e+04\n",
       "C(county)[T.257]          -1.474e+04   4650.454     -3.170      0.002   -2.39e+04   -5626.575\n",
       "C(county)[T.258]           -2.95e+04   1.86e+04     -1.587      0.113    -6.6e+04    6945.417\n",
       "C(county)[T.259]           5.662e+04   1.78e+04      3.176      0.002    2.17e+04    9.16e+04\n",
       "C(county)[T.260]          -2.075e+04   1.42e+04     -1.461      0.144   -4.86e+04    7093.704\n",
       "C(county)[T.261]          -1.214e+04   9508.704     -1.277      0.202   -3.08e+04    6499.043\n",
       "C(county)[T.262]          -1.499e+04   3.16e+04     -0.474      0.635   -7.69e+04     4.7e+04\n",
       "C(county)[T.263]           1.094e+04   1.25e+04      0.872      0.383   -1.36e+04    3.55e+04\n",
       "C(county)[T.264]          -2479.7477   1.18e+04     -0.210      0.834   -2.57e+04    2.07e+04\n",
       "C(county)[T.265]          -2.203e+04   1.05e+04     -2.105      0.035   -4.25e+04   -1517.160\n",
       "C(county)[T.266]           6210.2882   3.35e+04      0.185      0.853   -5.95e+04    7.19e+04\n",
       "C(county)[T.267]          -1.138e+04   2.33e+04     -0.488      0.626   -5.71e+04    3.44e+04\n",
       "C(county)[T.268]          -2.097e+04   1.51e+04     -1.389      0.165   -5.06e+04    8629.225\n",
       "C(county)[T.269]          -1.836e+04   7924.529     -2.317      0.021   -3.39e+04   -2824.110\n",
       "C(county)[T.270]          -1.361e+04   1.72e+04     -0.789      0.430   -4.74e+04    2.02e+04\n",
       "C(county)[T.271]          -1.204e+04   1.55e+04     -0.777      0.437   -4.24e+04    1.84e+04\n",
       "C(county)[T.272]          -1.485e+04   8880.399     -1.672      0.095   -3.23e+04    2561.281\n",
       "C(county)[T.273]          -1.149e+04   2.63e+04     -0.438      0.662    -6.3e+04       4e+04\n",
       "C(county)[T.274]          -9891.3781   4694.196     -2.107      0.035   -1.91e+04    -688.687\n",
       "C(county)[T.275]          -5173.7930   1.15e+04     -0.449      0.653   -2.77e+04    1.74e+04\n",
       "C(county)[T.276]          -1.966e+04   1.66e+04     -1.182      0.237   -5.22e+04    1.29e+04\n",
       "C(county)[T.277]          -3.402e+04   2.86e+04     -1.188      0.235   -9.01e+04    2.21e+04\n",
       "C(county)[T.278]           2322.2439    1.9e+04      0.122      0.903   -3.49e+04    3.95e+04\n",
       "C(county)[T.279]          -1.119e+04   1.84e+04     -0.609      0.543   -4.72e+04    2.48e+04\n",
       "C(county)[T.280]          -1.345e+04   6306.646     -2.133      0.033   -2.58e+04   -1085.930\n",
       "C(county)[T.281]          -8403.4354   2.99e+04     -0.281      0.778   -6.69e+04    5.01e+04\n",
       "C(county)[T.282]          -3681.0429    1.2e+04     -0.307      0.759   -2.72e+04    1.99e+04\n",
       "C(county)[T.283]          -5339.8789   9936.127     -0.537      0.591   -2.48e+04    1.41e+04\n",
       "C(county)[T.284]          -1.452e+04   8179.287     -1.775      0.076   -3.06e+04    1519.240\n",
       "C(county)[T.285]           -3.43e+04   2.13e+04     -1.613      0.107    -7.6e+04    7382.687\n",
       "C(county)[T.286]           7684.0660   1.16e+04      0.664      0.507    -1.5e+04    3.04e+04\n",
       "C(county)[T.287]          -1.775e+04   5134.756     -3.456      0.001   -2.78e+04   -7680.041\n",
       "C(county)[T.288]           2038.4699   1.76e+04      0.116      0.908   -3.26e+04    3.66e+04\n",
       "C(county)[T.289]          -8041.0146   1.11e+04     -0.726      0.468   -2.97e+04    1.37e+04\n",
       "C(county)[T.290]          -1.581e+04   7099.249     -2.227      0.026   -2.97e+04   -1889.232\n",
       "C(county)[T.291]          -7663.1814   1.35e+04     -0.567      0.571   -3.42e+04    1.88e+04\n",
       "C(county)[T.292]          -1.567e+04   7319.153     -2.141      0.032      -3e+04   -1323.652\n",
       "C(county)[T.293]          -5825.2555   1.34e+04     -0.433      0.665   -3.22e+04    2.05e+04\n",
       "C(county)[T.294]           1.947e+04   9840.528      1.978      0.048     177.105    3.88e+04\n",
       "C(county)[T.295]           -1.75e+04   1.76e+04     -0.996      0.319    -5.2e+04     1.7e+04\n",
       "C(county)[T.296]          -1096.1249    1.8e+04     -0.061      0.951   -3.64e+04    3.42e+04\n",
       "C(county)[T.297]          -1.141e+04   4502.234     -2.535      0.011   -2.02e+04   -2586.102\n",
       "C(county)[T.298]          -8732.4700   2.87e+04     -0.304      0.761    -6.5e+04    4.75e+04\n",
       "C(county)[T.299]           -1.74e+04   2.99e+04     -0.583      0.560   -7.59e+04    4.11e+04\n",
       "C(county)[T.300]          -1.986e+04   1.04e+04     -1.907      0.057   -4.03e+04     560.482\n",
       "C(county)[T.301]          -4.329e+04   3.24e+04     -1.336      0.182   -1.07e+05    2.03e+04\n",
       "C(county)[T.302]           4581.0131   7593.047      0.603      0.546   -1.03e+04    1.95e+04\n",
       "C(county)[T.303]          -1.484e+04   7473.001     -1.985      0.047   -2.95e+04    -186.892\n",
       "C(county)[T.304]          -2.222e+04   8772.347     -2.533      0.011   -3.94e+04   -5022.926\n",
       "C(county)[T.305]          -2514.2672   7217.330     -0.348      0.728   -1.67e+04    1.16e+04\n",
       "C(county)[T.306]          -2.336e+04   1.99e+04     -1.174      0.240   -6.24e+04    1.57e+04\n",
       "C(county)[T.307]          -1.116e+04   9796.527     -1.139      0.255   -3.04e+04    8045.695\n",
       "C(county)[T.308]           8.973e+04   1.66e+04      5.411      0.000    5.72e+04    1.22e+05\n",
       "C(county)[T.309]          -1.179e+04   5120.504     -2.302      0.021   -2.18e+04   -1747.726\n",
       "C(county)[T.310]          -1.268e+04   3.35e+04     -0.378      0.705   -7.84e+04    5.31e+04\n",
       "C(county)[T.311]          -1.624e+04   1.01e+04     -1.611      0.107    -3.6e+04    3524.476\n",
       "C(county)[T.312]          -9191.1488   9873.286     -0.931      0.352   -2.85e+04    1.02e+04\n",
       "C(county)[T.313]          -1.765e+04   4.28e+04     -0.412      0.680   -1.02e+05    6.63e+04\n",
       "C(county)[T.314]          -1.793e+04   7170.454     -2.501      0.012    -3.2e+04   -3875.671\n",
       "C(county)[T.315]            879.4379   1.04e+04      0.084      0.933   -1.96e+04    2.13e+04\n",
       "C(county)[T.316]          -5807.9640   6758.678     -0.859      0.390   -1.91e+04    7442.020\n",
       "C(county)[T.317]           1.794e+04   9335.924      1.922      0.055    -362.354    3.62e+04\n",
       "C(county)[T.318]          -4980.2142   8582.095     -0.580      0.562   -2.18e+04    1.18e+04\n",
       "C(county)[T.319]           1051.3237   1.42e+04      0.074      0.941   -2.68e+04    2.89e+04\n",
       "C(county)[T.320]          -1.431e+04    1.5e+04     -0.951      0.341   -4.38e+04    1.52e+04\n",
       "C(county)[T.321]          -1.684e+04   6968.208     -2.416      0.016   -3.05e+04   -3176.799\n",
       "C(county)[T.322]           -406.6903   6523.846     -0.062      0.950   -1.32e+04    1.24e+04\n",
       "C(county)[T.323]          -1.853e+04   5726.625     -3.236      0.001   -2.98e+04   -7302.079\n",
       "C(county)[T.324]          -2501.1256   7866.013     -0.318      0.751   -1.79e+04    1.29e+04\n",
       "C(county)[T.325]          -1.951e+04   2.24e+04     -0.873      0.383   -6.33e+04    2.43e+04\n",
       "has_college                1.325e+04    742.630     17.843      0.000    1.18e+04    1.47e+04\n",
       "female                    -8657.2875    609.011    -14.215      0.000   -9851.217   -7463.358\n",
       "==============================================================================\n",
       "Omnibus:                     2414.039   Durbin-Watson:                   1.981\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            22245.534\n",
       "Skew:                           1.945   Prob(JB):                         0.00\n",
       "Kurtosis:                      12.242   Cond. No.                         198.\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.wls(\n",
    "    \"annual_earnings ~ has_college + C(simplified_race)\"\n",
    "    \" + C(discretized_age) + female + C(county)\",\n",
    "    matched_data,\n",
    "    weights=matched_data[\"weights\"],\n",
    ").fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 15\n",
    "\n",
    "If you stopped matching after Iteration 2 back in Exercise 10, you may be wondering if that was a good choice! Let's check by restricting our attention to ONLY exact matches (`iteration = 1`). Run that match."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration number:  1\n",
      "\tNumber of matched groups formed in total:  370\n",
      "\tUnmatched treated units:  644 out of a total of  1150 treated units\n",
      "\tUnmatched control units:  3187 out of a total of  4365 control units\n",
      "\tPredictive error of covariates chosen this iteration:  0\n",
      "\tNumber of matches made in this iteration:  1684\n",
      "\tNumber of matches made so far:  1684\n",
      "\tIn this iteration, the covariates dropped are:  set()\n",
      "1684 units matched. We stopped before doing iteration number:  1\n"
     ]
    }
   ],
   "source": [
    "model2 = dame_flame.matching.DAME(\n",
    "    repeats=False, verbose=3, want_pe=True, early_stop_iterations=1\n",
    ")\n",
    "model2.fit(\n",
    "    for_matching,\n",
    "    treatment_column_name=\"has_college\",\n",
    "    outcome_column_name=\"annual_earnings\",\n",
    ")\n",
    "result2 = model2.predict(for_matching)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "renormalization param: 2.3280632411067192\n"
     ]
    }
   ],
   "source": [
    "matched_data2 = get_dataframe(model2, result2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Exercise 16\n",
    "\n",
    "Now use a weighted linear regression on your matched data to regress annual earnings on *just* having a college eduction. Is that different from what you had when you allowed more low quality matches?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>WLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>     <td>annual_earnings</td> <th>  R-squared:         </th> <td>   0.049</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>WLS</td>       <th>  Adj. R-squared:    </th> <td>   0.048</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   86.65</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 23 Feb 2021</td> <th>  Prob (F-statistic):</th> <td>3.92e-20</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>09:39:29</td>     <th>  Log-Likelihood:    </th> <td> -19512.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  1684</td>      <th>  AIC:               </th> <td>3.903e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  1682</td>      <th>  BIC:               </th> <td>3.904e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>   <td> 3.914e+04</td> <td>  664.386</td> <td>   58.907</td> <td> 0.000</td> <td> 3.78e+04</td> <td> 4.04e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>has_college</th> <td> 1.128e+04</td> <td> 1212.039</td> <td>    9.308</td> <td> 0.000</td> <td> 8904.805</td> <td> 1.37e+04</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>855.250</td> <th>  Durbin-Watson:     </th> <td>   2.037</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>6653.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 2.256</td>  <th>  Prob(JB):          </th> <td>    0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td>11.629</td>  <th>  Cond. No.          </th> <td>    2.42</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            WLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:        annual_earnings   R-squared:                       0.049\n",
       "Model:                            WLS   Adj. R-squared:                  0.048\n",
       "Method:                 Least Squares   F-statistic:                     86.65\n",
       "Date:                Tue, 23 Feb 2021   Prob (F-statistic):           3.92e-20\n",
       "Time:                        09:39:29   Log-Likelihood:                -19512.\n",
       "No. Observations:                1684   AIC:                         3.903e+04\n",
       "Df Residuals:                    1682   BIC:                         3.904e+04\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===============================================================================\n",
       "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------\n",
       "Intercept    3.914e+04    664.386     58.907      0.000    3.78e+04    4.04e+04\n",
       "has_college  1.128e+04   1212.039      9.308      0.000    8904.805    1.37e+04\n",
       "==============================================================================\n",
       "Omnibus:                      855.250   Durbin-Watson:                   2.037\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             6653.000\n",
       "Skew:                           2.256   Prob(JB):                         0.00\n",
       "Kurtosis:                      11.629   Cond. No.                         2.42\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smf.wls(\n",
    "    \"annual_earnings ~ has_college\", matched_data2, weights=matched_data2[\"weights\"]\n",
    ").fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Other Forms of Matching\n",
    "\n",
    "OK, hopefully this gives you a taste of matching! There are, of course, *many* other permutations to be aware of though. \n",
    "\n",
    "- Matching with replacement.  In this exercise, we set `repeat=False`, so each observation could only end up in our final dataset once. However, if we use `repeat=True`, if an untreated observation is the closest observation to multiple treated observations, it may get put in the dataset multiple times. We can still use this dataset in *almost* the same way, though, except we have to make use of weights so that if an observation appears, say, twice, each observation has a weight that's 1/2 the weight of an observation only appearing once. \n",
    "- Matching with continuous variables: DAME is used for exact matching, but if you have lots of continuous variables, you can also match on those. In fact, the Almost Exact Matching Lab also has a library called [MALTS](https://almost-matching-exactly.github.io/MALTS/) that will do matching with continuous variables. That package does something *like* Mahalanobis Distance matching, but ulike Mahalanobis, which calculates the distance between observations in terms of the difference in all the matching variables normalized by each matching variable's standard deviation, MALTS does something much more clever. (Here's [the paper](https://arxiv.org/abs/1811.07415) describing the technique if you want all the details). Basically, it figures out how well each matching variable predicts our outcome $Y$, then weights the different variables by their predictive power instead of just normalizing by something arbitrary like their standard deviation. As a result, final matches will prioritize matching more closely on variables that are outcome-relevant. In addition, when it sees a categorical variable, it recognizes that and only pairs observations when they are an exact match on that categorical variable. \n",
    "- If you're dataset is huge, use `FLAME`: this dataset is small, but if you have lots of observations and lots of matching variable, the computational complexity of this task explodes, so the AEML created FLAME, which works with millions of observations at only a small cost to match quality. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Absolutely positively need the solutions?\n",
    "\n",
    "*Don't use this link until you've really, really spent time struggling with your code!* Doing so only results in you cheating yourself. \n",
    "\n",
    "[Link](../solutions_warning.ipynb)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
